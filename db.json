{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/butterfly/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/var.styl","path":"css/var.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/404.jpg","path":"img/404.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/algolia.svg","path":"img/algolia.svg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":0,"renderable":1},{"_id":"source/img/404.jpg","path":"img/404.jpg","modified":0,"renderable":0},{"_id":"source/img/algolia.svg","path":"img/algolia.svg","modified":0,"renderable":0},{"_id":"source/img/avatar.jpg","path":"img/avatar.jpg","modified":0,"renderable":0},{"_id":"source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":0},{"_id":"source/img/friend_404.gif","path":"img/friend_404.gif","modified":0,"renderable":0},{"_id":"source/src/cursors/default.cur","path":"src/cursors/default.cur","modified":0,"renderable":0},{"_id":"source/src/cursors/pointer.cur","path":"src/cursors/pointer.cur","modified":0,"renderable":0},{"_id":"source/src/fonts/alibaba-puhuiti-regular.ttf","path":"src/fonts/alibaba-puhuiti-regular.ttf","modified":0,"renderable":0}],"Cache":[{"_id":"source/.DS_Store","hash":"a1863f3d09fb6df07de74bb077f4f76816fe0ec2","modified":1637161005954},{"_id":"source/404.md","hash":"b4a8b8c412b0890e057700a15bc29316eb8baf54","modified":1637160572686},{"_id":"source/_data/link.yml","hash":"12ceb63a04ba1c92e284f65936881d77c97baa97","modified":1637160572686},{"_id":"source/about/index.md","hash":"7af100085e3b0647a481163bc04bfd881c1fef8e","modified":1637161182285},{"_id":"source/artitalk/index.md","hash":"88f8241f457b2ec3e5257bd63c41a24d95db5edc","modified":1637160572696},{"_id":"source/categories/index.md","hash":"d99eaf9ff3a2febd0b31eb394e49b043f7139bcf","modified":1637160572696},{"_id":"source/contact/index.md","hash":"543e39afa39588a1c4cec1a9060dcf19fb8f2c2d","modified":1637160572696},{"_id":"source/css/custom.css","hash":"47bd63e4c84eaaa193c5594da6901766e0b67a6a","modified":1637160572697},{"_id":"source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1637160572697},{"_id":"source/img/algolia.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1637160572697},{"_id":"source/img/avatar.jpg","hash":"1ac012456e21b50276ad87ee0750cedaa9d94a39","modified":1637160572697},{"_id":"source/img/favicon.png","hash":"fcc9984769d0e0399f10a9ab049c4b70a7b8e6d0","modified":1637160572698},{"_id":"source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1637160572698},{"_id":"source/js/weather.js","hash":"f9028fc95e7ae8693c78f31291a7c2a4375dd121","modified":1637160572699},{"_id":"source/link/index.md","hash":"eb4b3b63d275113fe8a2be411916e6baf461dbbc","modified":1637160572699},{"_id":"source/tags/index.md","hash":"9897e22b3e10cb380eacc82eed0f1267b00ea810","modified":1637160572782},{"_id":"source/_posts/yuque/Java即时编译器原理解析及实践.md","hash":"a5a1fb18a736e3aee72ccf1d30b5fbf4a85da4c9","modified":1637214267430},{"_id":"source/_posts/yuque/data.md","hash":"91631e5566f3d15be7605ef90bc577d3f1247fa4","modified":1637214267434},{"_id":"source/_posts/yuque/java启动性能优化.md","hash":"f70e5124b8de0b66c6d826f52fa36cc75143463d","modified":1637214267477},{"_id":"source/_posts/yuque/java的虚拟机.md","hash":"d5ff872bb69f600ec41283ff842e6b44dceaa1fb","modified":1637214445083},{"_id":"source/_posts/yuque/三大难.md","hash":"70ee0ef1dec20d6e5d090a820798bc8848f64649","modified":1637214267029},{"_id":"source/_posts/yuque/前端.md","hash":"9f055d50a08274b1de65c397cb3991f6294e41f1","modified":1637214267038},{"_id":"source/_posts/yuque/微服务.md","hash":"9dde07ac03f4ab9a732ca7d69cfbf7bfa7114848","modified":1637214267489},{"_id":"source/_posts/yuque/技术.md","hash":"c5b2bc0f18b2e637958dcbd797e38502de77ee23","modified":1637214267023},{"_id":"source/_posts/yuque/稳定性.md","hash":"e689365f60b4fbdfad1268faf029726fe0dedfca","modified":1637214267480},{"_id":"source/_posts/yuque/缓存的方案.md","hash":"78322be437726afff2168583ffa1f82bbc79d1f6","modified":1637214850181},{"_id":"source/src/cursors/default.cur","hash":"3381d41a9dcbb4c4e69559723481f85e2b8cf99e","modified":1637160572699},{"_id":"source/src/cursors/pointer.cur","hash":"3adb643f97571f547021fb57b2d9d768a252d546","modified":1637160572699},{"_id":"themes/butterfly/LICENSE","hash":"1128f8f91104ba9ef98d37eea6523a888dcfa5de","modified":1637043699322},{"_id":"themes/butterfly/README.md","hash":"cedd13fcd8c75a68742265dd8eced4087e940ffd","modified":1637043699322},{"_id":"themes/butterfly/README_CN.md","hash":"459d6f3200863021bee1fe72a719aef236fb4090","modified":1637043699322},{"_id":"themes/butterfly/_config.yml","hash":"63d1a594969b7b5b97e1babebc7b85ef07c02e4f","modified":1637043699322},{"_id":"themes/butterfly/package.json","hash":"333603963b3d2cedb643def8a9955f6d540f5d95","modified":1637043699347},{"_id":"themes/butterfly/.github/stale.yml","hash":"05a55a87fa7f122c59683e41c8b2e37e79f688f0","modified":1637043699321},{"_id":"themes/butterfly/languages/default.yml","hash":"7ca673fb629ea74f5ba5e75b4f0f95248cfb5090","modified":1637043699323},{"_id":"themes/butterfly/languages/en.yml","hash":"cd333235ff1648a6bf58dfafc81f2c57672a15a5","modified":1637043699323},{"_id":"themes/butterfly/languages/zh-CN.yml","hash":"741e522b2387f94764a73844e7b084cc7e927c54","modified":1637043699323},{"_id":"themes/butterfly/languages/zh-TW.yml","hash":"79a50c40d9f5463f1fa42aa870ac6b8b84540412","modified":1637043699323},{"_id":"themes/butterfly/layout/archive.pug","hash":"bd62286afb64a51c97e800c5945620d51605d5fa","modified":1637043699323},{"_id":"themes/butterfly/layout/category.pug","hash":"60c1b795b6e227b5dd81963b51d29d1b81d0bf49","modified":1637043699323},{"_id":"themes/butterfly/layout/index.pug","hash":"e1c3146834c16e6077406180858add0a8183875a","modified":1637043699346},{"_id":"themes/butterfly/layout/page.pug","hash":"82aa988527a11835e7ac86ce4f23b8cd20014dfa","modified":1637043699347},{"_id":"themes/butterfly/layout/post.pug","hash":"8d398c8925182699d9f2b9f1b727f06228488312","modified":1637043699347},{"_id":"themes/butterfly/layout/tag.pug","hash":"0440f42569df2676273c026a92384fa7729bc4e9","modified":1637043699347},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/bug_report.md","hash":"476802922b774b679225102ac30a9d9183394701","modified":1637043699321},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/custom.md","hash":"eff495eb1584cf4586e33c76e8b2fa6a469a179b","modified":1637043699321},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/feature_request.md","hash":"f6867a2f0417fe89a0f2008730ee19dd38422021","modified":1637043699321},{"_id":"themes/butterfly/.github/workflows/publish.yml","hash":"05857c2f265246d8de00e31037f2720709540c09","modified":1637043699322},{"_id":"themes/butterfly/layout/includes/404.pug","hash":"7d378e328a53cc99d5acc9682dce53f5eb61537d","modified":1637043699324},{"_id":"themes/butterfly/layout/includes/additional-js.pug","hash":"4156224c47bfc2482281ac4e4df701c30476ff00","modified":1637043699324},{"_id":"themes/butterfly/layout/includes/footer.pug","hash":"02390a5b6ae1f57497b22ba2e6be9f13cfb7acac","modified":1637043699324},{"_id":"themes/butterfly/layout/includes/head.pug","hash":"f27173cab1a88f895274ee299ce855e4ac38e628","modified":1637212574425},{"_id":"themes/butterfly/layout/includes/layout.pug","hash":"6f2608c4d93d3d10ae6b2cd7f8918f303f024321","modified":1637043699328},{"_id":"themes/butterfly/layout/includes/pagination.pug","hash":"0b80f04950bd0fe5e6c4e7b7559adf4d0ce28436","modified":1637043699330},{"_id":"themes/butterfly/layout/includes/rightside.pug","hash":"2d0453adf92a3fd3466cf0793f14685d17b8b51d","modified":1637043699331},{"_id":"themes/butterfly/layout/includes/sidebar.pug","hash":"8dafc2dcd8c33f70a546fee443f0b6d80b3cd243","modified":1637043699331},{"_id":"themes/butterfly/scripts/events/404.js","hash":"83cd7f73225ccad123afbd526ce1834eb1eb6a6d","modified":1637043699348},{"_id":"themes/butterfly/scripts/events/init.js","hash":"018aa446265fe627301b1d53d7cba4f4ff1960ac","modified":1637043699348},{"_id":"themes/butterfly/scripts/events/welcome.js","hash":"d575137c8779e50422c2416f4d0832fdea346ee6","modified":1637043699348},{"_id":"themes/butterfly/scripts/filters/post_lazyload.js","hash":"4cc2d517195c8779471d326ada09f9371cbad4dd","modified":1637043699349},{"_id":"themes/butterfly/scripts/filters/random_cover.js","hash":"9821872007cf57efae4b728dc575ef9d004547bb","modified":1637043699349},{"_id":"themes/butterfly/scripts/tag/button.js","hash":"b816ded1451f28c7c54151ffe6c259b110253ae3","modified":1637043699350},{"_id":"themes/butterfly/scripts/tag/gallery.js","hash":"94826ea6bcc4d2304199adae12c4e2b272caf529","modified":1637043699351},{"_id":"themes/butterfly/scripts/tag/hide.js","hash":"f33858ffb9e88191e644796e11d2f901eb332308","modified":1637043699351},{"_id":"themes/butterfly/scripts/tag/inlineImg.js","hash":"a43ee2c7871bdd93cb6beb804429e404570f7929","modified":1637043699351},{"_id":"themes/butterfly/scripts/tag/label.js","hash":"03b2afef41d02bd1045c89578a02402c28356006","modified":1637043699351},{"_id":"themes/butterfly/scripts/tag/mermaid.js","hash":"35f073021db93699fcac9ef351e26c59c31aadf7","modified":1637043699351},{"_id":"themes/butterfly/scripts/tag/note.js","hash":"c16c6eb058af2b36bcd583b2591076c7ebdd51ad","modified":1637043699351},{"_id":"themes/butterfly/scripts/tag/tabs.js","hash":"6c6e415623d0fd39da016d9e353bb4f5cca444f5","modified":1637043699352},{"_id":"themes/butterfly/scripts/helpers/aside_archives.js","hash":"2ec66513d5322f185d2071acc052978ba9415a8e","modified":1637043699349},{"_id":"themes/butterfly/scripts/helpers/aside_categories.js","hash":"e00efdb5d02bc5c6eb4159e498af69fa61a7dbb9","modified":1637043699349},{"_id":"themes/butterfly/scripts/helpers/inject_head_js.js","hash":"65f2442e04c4defd16e7c1e67701d3bb41d9577a","modified":1637043699350},{"_id":"themes/butterfly/scripts/helpers/page.js","hash":"c6611d97087c51845cb1ab4821696a62fa33daeb","modified":1637043699350},{"_id":"themes/butterfly/scripts/helpers/related_post.js","hash":"21556f9cb412ddc500ad12ecfd419f3ea6c9f663","modified":1637043699350},{"_id":"themes/butterfly/source/css/index.styl","hash":"861998e4ac67a59529a8245a9130d68f826c9c12","modified":1637043699362},{"_id":"themes/butterfly/source/css/var.styl","hash":"40c3f64422205a24e68ce1ad8fe8163f24fdd525","modified":1637043699363},{"_id":"themes/butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1637043699363},{"_id":"themes/butterfly/source/img/algolia.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1637043699363},{"_id":"themes/butterfly/source/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1637043699364},{"_id":"themes/butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1637043699364},{"_id":"themes/butterfly/source/js/main.js","hash":"b244f28124a46d7f1e8ef76ba6e925289691f93b","modified":1637043699365},{"_id":"themes/butterfly/source/js/tw_cn.js","hash":"00053ce73210274b3679f42607edef1206eebc68","modified":1637043699366},{"_id":"themes/butterfly/source/js/utils.js","hash":"8319b59c26ce8cd2b0ae7d030c4912215148fa92","modified":1637043699366},{"_id":"themes/butterfly/layout/includes/head/Open_Graph.pug","hash":"6c41f49a3e682067533dd9384e6e4511fc3a1349","modified":1637043699325},{"_id":"themes/butterfly/layout/includes/head/analytics.pug","hash":"90d01b88d0f406d00184960b1afe9230aec2ebe6","modified":1637043699325},{"_id":"themes/butterfly/layout/includes/head/config_site.pug","hash":"889ef16fa34a39e5533bc170e62f20f3450cc522","modified":1637043699325},{"_id":"themes/butterfly/layout/includes/head/config.pug","hash":"4def0aab9e2172ad1f29abd1535d8e08ff23aa0b","modified":1637043699325},{"_id":"themes/butterfly/layout/includes/head/google_adsense.pug","hash":"95a37e92b39c44bcbea4be7e29ddb3921c5b8220","modified":1637043699326},{"_id":"themes/butterfly/layout/includes/head/noscript.pug","hash":"d16ad2ee0ff5751fd7f8a5ce1b83935518674977","modified":1637043699326},{"_id":"themes/butterfly/layout/includes/head/preconnect.pug","hash":"e55f8bdb876d5429a908498db1307b94094c0d06","modified":1637043699326},{"_id":"themes/butterfly/layout/includes/head/pwa.pug","hash":"3d492cfe645d37c94d30512e0b230b0a09913148","modified":1637043699326},{"_id":"themes/butterfly/layout/includes/head/site_verification.pug","hash":"e2e8d681f183f00ce5ee239c42d2e36b3744daad","modified":1637043699326},{"_id":"themes/butterfly/layout/includes/header/index.pug","hash":"65fa23680af0daf64930a399c2f2ca37809a8149","modified":1637043699327},{"_id":"themes/butterfly/layout/includes/header/menu_item.pug","hash":"24370508ee87f14418e8f06e9d79ad8c52a342c4","modified":1637043699327},{"_id":"themes/butterfly/layout/includes/header/nav.pug","hash":"c205b9fd72b2fe19e6d15c5b5ab0fb38c653032e","modified":1637043699327},{"_id":"themes/butterfly/layout/includes/header/post-info.pug","hash":"92f81a437c9db49f7ebcf608bc09488ecdb55a21","modified":1637043699328},{"_id":"themes/butterfly/layout/includes/header/social.pug","hash":"0d953e51d04a9294a64153c89c20f491a9ec42d4","modified":1637043699328},{"_id":"themes/butterfly/layout/includes/loading/loading-js.pug","hash":"4cfcf0100e37ce91864703cd44f1cb99cb5493ea","modified":1637043699328},{"_id":"themes/butterfly/layout/includes/loading/loading.pug","hash":"5276937fbcceb9d62879dc47be880cd469a27349","modified":1637043699329},{"_id":"themes/butterfly/layout/includes/mixins/article-sort.pug","hash":"2fb74d0b0e4b98749427c5a1a1b0acb6c85fadc4","modified":1637043699329},{"_id":"themes/butterfly/layout/includes/mixins/post-ui.pug","hash":"4c3c5cb69b3aead8c232cb0fbc251929f28aad75","modified":1637043699329},{"_id":"themes/butterfly/layout/includes/page/categories.pug","hash":"1f30952fed73dec21b42e2e30b7fe2e84618d2e4","modified":1637043699329},{"_id":"themes/butterfly/layout/includes/page/default-page.pug","hash":"dbec869c62135695495703a29ad7655e9965d461","modified":1637043699330},{"_id":"themes/butterfly/layout/includes/page/flink.pug","hash":"b53a2d4f9c37b375a4446d2273dcfb7712d91b3e","modified":1637043699330},{"_id":"themes/butterfly/layout/includes/page/tags.pug","hash":"93d4ebc7dc8228c7a10ddeb5a553d0dcdabbe145","modified":1637043699330},{"_id":"themes/butterfly/layout/includes/post/post-copyright.pug","hash":"88e3b611b03149665e4113cfa39595c1a3fca7e5","modified":1637043699331},{"_id":"themes/butterfly/layout/includes/post/reward.pug","hash":"5b404356f311d2ee36478291ca3553210867b738","modified":1637043699331},{"_id":"themes/butterfly/layout/includes/third-party/aplayer.pug","hash":"292646dfab135973b09f0fa9e3931e83da2ed30e","modified":1637043699332},{"_id":"themes/butterfly/layout/includes/third-party/effect.pug","hash":"b9d54a01d7c2a7a183cb7209e99430ce7fea1fe3","modified":1637043699338},{"_id":"themes/butterfly/layout/includes/third-party/pangu.pug","hash":"d5fec7dedc52ab23865fb4db002755e9bdaadc9f","modified":1637043699340},{"_id":"themes/butterfly/layout/includes/third-party/pjax.pug","hash":"933cb710d2dbcea25c6426a57c6f49d2f48b792c","modified":1637043699340},{"_id":"themes/butterfly/layout/includes/third-party/prismjs.pug","hash":"1fbecfd299068f90d727f0c8c65e2a792fa6e3e2","modified":1637043699341},{"_id":"themes/butterfly/layout/includes/third-party/subtitle.pug","hash":"d50e5c22cd6bc3c378bc581918136746cfa3447f","modified":1637043699343},{"_id":"themes/butterfly/layout/includes/widget/card_ad.pug","hash":"60dc48a7b5d89c2a49123c3fc5893ab9c57dd225","modified":1637043699343},{"_id":"themes/butterfly/layout/includes/widget/card_announcement.pug","hash":"3d8e3706a056389176f55dd21956aabc78046761","modified":1637043699344},{"_id":"themes/butterfly/layout/includes/widget/card_archives.pug","hash":"86897010fe71503e239887fd8f6a4f5851737be9","modified":1637043699344},{"_id":"themes/butterfly/layout/includes/widget/card_author.pug","hash":"0366c658cdcff839aa1df2e2d252a03a53fd427e","modified":1637043699344},{"_id":"themes/butterfly/layout/includes/widget/card_bottom_self.pug","hash":"13dc8ce922e2e2332fe6ad5856ebb5dbf9ea4444","modified":1637043699345},{"_id":"themes/butterfly/layout/includes/widget/card_categories.pug","hash":"d1a416d0a8a7916d0b1a41d73adc66f8c811e493","modified":1637043699345},{"_id":"themes/butterfly/layout/includes/widget/card_newest_comment.pug","hash":"27afd2274bd5f2cbbf1bad9f0afe2b2b72c213ca","modified":1637043699345},{"_id":"themes/butterfly/layout/includes/widget/card_post_toc.pug","hash":"ae9336bf31cdad08ff586ead4295912a96563c76","modified":1637043699345},{"_id":"themes/butterfly/layout/includes/widget/card_recent_post.pug","hash":"9c1229af6ab48961021886882c473514101fba21","modified":1637043699345},{"_id":"themes/butterfly/layout/includes/widget/card_tags.pug","hash":"438aea3e713ed16b7559b9a80a9c5ec0221263df","modified":1637043699346},{"_id":"themes/butterfly/layout/includes/widget/card_top_self.pug","hash":"ae67c6d4130a6c075058a9c1faea1648bcc6f83e","modified":1637043699346},{"_id":"themes/butterfly/layout/includes/widget/card_webinfo.pug","hash":"0612aaee878f33ea8d3da0293c7dc3b6cd871466","modified":1637043699346},{"_id":"themes/butterfly/layout/includes/widget/index.pug","hash":"b5525891f6affd02c1ea3b2327c026882efe428b","modified":1637043699346},{"_id":"themes/butterfly/source/css/_global/function.styl","hash":"eda47f3e807a466ba8275627ea936c5100c43818","modified":1637043699352},{"_id":"themes/butterfly/source/css/_global/index.styl","hash":"e211efbd1952d4b1b881287aa43423133c1d166e","modified":1637043699352},{"_id":"themes/butterfly/source/css/_highlight/highlight.styl","hash":"85e72c70a0cef29e40be1968f5d23b06c6f8e3aa","modified":1637043699353},{"_id":"themes/butterfly/source/css/_highlight/theme.styl","hash":"fa4b87e7b29bdd1f09eb1a30e06ba74b224f0ba2","modified":1637043699354},{"_id":"themes/butterfly/source/css/_layout/aside.styl","hash":"7feb755ca7c22da36bbad11e74ecd95fdcf3b879","modified":1637043699355},{"_id":"themes/butterfly/source/css/_layout/chat.styl","hash":"29f48f9370f245e6e575b5836bccf47eb5688d8b","modified":1637043699355},{"_id":"themes/butterfly/source/css/_layout/comments.styl","hash":"f1b63892baafa48ab872bc79671d57aafd511f6c","modified":1637043699355},{"_id":"themes/butterfly/source/css/_layout/footer.styl","hash":"dd8cdf639ba2b726437c77fa7aa8d5edbabe8f9b","modified":1637043699355},{"_id":"themes/butterfly/source/css/_layout/head.styl","hash":"98235fcda3b87ad6f7e91eafbed94d0d6ae847ca","modified":1637043699356},{"_id":"themes/butterfly/source/css/_layout/loading.styl","hash":"7d18a7be9cfea65091de3ef00014063d2d649912","modified":1637043699356},{"_id":"themes/butterfly/source/css/_layout/pagination.styl","hash":"90fe01c968696a9f791cb2b84fca621cbbb56f47","modified":1637043699356},{"_id":"themes/butterfly/source/css/_layout/post.styl","hash":"d748951d9fbcd04dda839085af78b01b8fa04cba","modified":1637043699356},{"_id":"themes/butterfly/source/css/_layout/relatedposts.styl","hash":"0551c5893d1589a3d17ce161e50ecb1d724cc6e8","modified":1637043699356},{"_id":"themes/butterfly/source/css/_layout/reward.styl","hash":"ea1ba40dd5954c2ed718a126336fb7f94da4e66f","modified":1637043699357},{"_id":"themes/butterfly/source/css/_layout/rightside.styl","hash":"7a072589e6097dbe942783131964f2372fdf1eb6","modified":1637043699357},{"_id":"themes/butterfly/source/css/_layout/sidebar.styl","hash":"2c5fb77c448ce0a734040c8ce532b28fed688899","modified":1637043699357},{"_id":"themes/butterfly/source/css/_layout/third-party.styl","hash":"978c397d0966eaf9e6e2afd13866f8f4900b509f","modified":1637043699357},{"_id":"themes/butterfly/source/css/_mode/darkmode.styl","hash":"4e629f510b73f998ab208b739c5bd7dcd168d1a7","modified":1637043699358},{"_id":"themes/butterfly/source/css/_mode/readmode.styl","hash":"f59a9a0059d5261251bdd6de45aa97dd2d11e633","modified":1637043699358},{"_id":"themes/butterfly/source/css/_page/404.styl","hash":"b0488ceacde74af139d66c8db5cb36cc21737b9b","modified":1637043699358},{"_id":"themes/butterfly/source/css/_page/archives.styl","hash":"6874adc2e276443f354bbe50d0072e9bec37243c","modified":1637043699358},{"_id":"themes/butterfly/source/css/_page/categories.styl","hash":"e554549f0a0ae85362f0b0e8687981741f486f6b","modified":1637043699358},{"_id":"themes/butterfly/source/css/_page/common.styl","hash":"97fec1e814f88237862f4d800a35362b802f6625","modified":1637043699359},{"_id":"themes/butterfly/source/css/_page/flink.styl","hash":"2cc49d3f6a6beb9f7bff93e292f88aa5681da1d0","modified":1637043699359},{"_id":"themes/butterfly/source/css/_page/homepage.styl","hash":"7c4152162a03aa8331a783df5695e4ebbb816a8c","modified":1637043699359},{"_id":"themes/butterfly/source/css/_page/tags.styl","hash":"9a881c031f463c486bd25248c2814fd09f97892b","modified":1637043699359},{"_id":"themes/butterfly/source/css/_search/algolia.styl","hash":"917e0e399e117217184ca63d3eb5c4843bcccf7b","modified":1637043699359},{"_id":"themes/butterfly/source/css/_search/index.styl","hash":"f168f5c669978f633abe118cdcc4a12cfc883c01","modified":1637043699359},{"_id":"themes/butterfly/source/css/_search/local-search.styl","hash":"6befe4c51b86d0c1de130beeecad9e28d6442713","modified":1637043699360},{"_id":"themes/butterfly/source/css/_tags/button.styl","hash":"1c3f9d7efc3b9dfcfa8926a1132d0c44ffc7d4b2","modified":1637043699360},{"_id":"themes/butterfly/source/css/_tags/gallery.styl","hash":"53ecae272e16223a436c497abbf25dd5f0fc4aaa","modified":1637043699360},{"_id":"themes/butterfly/source/css/_tags/hexo.styl","hash":"d0386ba6d8d63afc72b9673e8f3e89df6446ffc2","modified":1637043699360},{"_id":"themes/butterfly/source/css/_tags/hide.styl","hash":"21964fdd6d74ffbea519418bab65024aee5f3736","modified":1637043699361},{"_id":"themes/butterfly/source/css/_tags/inlineImg.styl","hash":"df9d405c33a9a68946b530410f64096bcb72560c","modified":1637043699361},{"_id":"themes/butterfly/source/css/_tags/label.styl","hash":"f741e85295ce15c70a6027ec15a542636dd5dcca","modified":1637043699361},{"_id":"themes/butterfly/source/css/_tags/note.styl","hash":"86fee274a62f7f034547342930f445c47378eb55","modified":1637043699361},{"_id":"themes/butterfly/source/css/_tags/tabs.styl","hash":"1756791581c0ec51cb03353a09dac4778d944349","modified":1637043699362},{"_id":"themes/butterfly/source/css/_third-party/normalize.min.css","hash":"2c18a1c9604af475b4749def8f1959df88d8b276","modified":1637043699362},{"_id":"themes/butterfly/source/js/search/algolia.js","hash":"65b45e61586f7e66c3f338370bfd9daadd71a4b7","modified":1637043699365},{"_id":"themes/butterfly/source/js/search/local-search.js","hash":"b1429e9f80ef6b9a77434819ffb87d90bdad25e8","modified":1637043699365},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"d85c3737b5c9548553a78b757a7698df126a52cf","modified":1637043699332},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"7848ec58c6ec03243abf80a3b22b4dc10f3edf53","modified":1637043699332},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"ef1b2b5b980d6aeaa5d06b97d1afc9644b155a16","modified":1637043699333},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"e3bf847553515174f6085df982f0623e9783db7a","modified":1637043699333},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"bba9871f446c10ffcc8fa9023f5a2eb701a86bae","modified":1637043699333},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"400ce038548d6f9ddb486150c724c87b6923a88b","modified":1637043699333},{"_id":"themes/butterfly/layout/includes/third-party/chat/chatra.pug","hash":"481cd5053bafb1a19f623554a27d3aa077ea59c3","modified":1637043699334},{"_id":"themes/butterfly/layout/includes/third-party/chat/crisp.pug","hash":"76634112c64023177260d1317ae39cef2a68e35f","modified":1637043699334},{"_id":"themes/butterfly/layout/includes/third-party/chat/daovoice.pug","hash":"cfe63e7d26a6665df6aa32ca90868ad48e05ec04","modified":1637043699334},{"_id":"themes/butterfly/layout/includes/third-party/chat/gitter.pug","hash":"d1d2474420bf4edc2e43ccdff6f92b8b082143df","modified":1637043699334},{"_id":"themes/butterfly/layout/includes/third-party/chat/index.pug","hash":"3f05f8311ae559d768ee3d0925e84ed767c314d3","modified":1637043699335},{"_id":"themes/butterfly/layout/includes/third-party/chat/tidio.pug","hash":"24a926756c2300b9c561aaab6bd3a71fdd16e16d","modified":1637043699335},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqus.pug","hash":"a111407fdcafcf1099e26ffa69786f8822c5d9fb","modified":1637043699335},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"2e52c64e89f16267596a8465841dd46f51820982","modified":1637043699335},{"_id":"themes/butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"c46a932257212f82e4a9974fbbc5de8878c8b383","modified":1637043699336},{"_id":"themes/butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"0b7571919e8ad51285deda56a1868fccf8c563d7","modified":1637043699336},{"_id":"themes/butterfly/layout/includes/third-party/comments/index.pug","hash":"da9813f8dc0d388869c15413cf056012cfb69e1a","modified":1637043699336},{"_id":"themes/butterfly/layout/includes/third-party/comments/js.pug","hash":"bafb3d5710824caa59a56017afb058fd2b4eac65","modified":1637043699336},{"_id":"themes/butterfly/layout/includes/third-party/comments/livere.pug","hash":"52ea8aa26b84d3ad38ae28cdf0f163e9ca8dced7","modified":1637043699336},{"_id":"themes/butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"16378d8646ea3f4ac99c18f0296dd85b13f9d775","modified":1637043699337},{"_id":"themes/butterfly/layout/includes/third-party/comments/utterances.pug","hash":"b871ea208e36398b4d668db9a9a0b61c79415381","modified":1637043699337},{"_id":"themes/butterfly/layout/includes/third-party/comments/valine.pug","hash":"2b45fe09d5b591dca156b76dae99981f8d8e1c61","modified":1637043699337},{"_id":"themes/butterfly/layout/includes/third-party/comments/waline.pug","hash":"36f3c603d2a2ecddaa6d2675a89d76ad94968f72","modified":1637043699337},{"_id":"themes/butterfly/layout/includes/third-party/math/index.pug","hash":"b8ae5fd7d74e1edcef21f5004fc96147e064d219","modified":1637043699338},{"_id":"themes/butterfly/layout/includes/third-party/math/katex.pug","hash":"f9b00ead54573ba6e6eb33481588af144aab648d","modified":1637043699338},{"_id":"themes/butterfly/layout/includes/third-party/math/mathjax.pug","hash":"a47d8f9f593091cc91192c0c49deaa2c0d2317fd","modified":1637043699338},{"_id":"themes/butterfly/layout/includes/third-party/math/mermaid.pug","hash":"3f3a3cd8bea2103dedd754f767aca5cb84d5f586","modified":1637043699338},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"b443d6b16baf3ea250041342cc0361a42a412b7f","modified":1637043699339},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"34088a15655704d12e9b1807b47b3f6a860c9eec","modified":1637043699339},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"f6506ccfd1ce994b9e53aa95588d0b6dbad11411","modified":1637043699339},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"cb38ffe911023092a90a28f2ba8317a92b22cd0c","modified":1637043699340},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"59b4c26a827ace5a54855881d199977103ff6f50","modified":1637043699340},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"a2bc2601b7e0ae5caf1fc51a07390562d928620a","modified":1637043699340},{"_id":"themes/butterfly/layout/includes/third-party/search/algolia.pug","hash":"d8f59e94eafc669c49349561dc5bbea3915aecb7","modified":1637043699341},{"_id":"themes/butterfly/layout/includes/third-party/search/index.pug","hash":"da3b9437d061ee68dbc383057db5c73034c49605","modified":1637043699341},{"_id":"themes/butterfly/layout/includes/third-party/search/local-search.pug","hash":"613280d61b8ab9612014ec016ae3d3698d36fd1a","modified":1637043699341},{"_id":"themes/butterfly/layout/includes/third-party/share/add-this.pug","hash":"2980f1889226ca981aa23b8eb1853fde26dcf89a","modified":1637043699342},{"_id":"themes/butterfly/layout/includes/third-party/share/addtoany.pug","hash":"309f51bc5302e72fc469d54c577fbcfe57fb07a8","modified":1637043699342},{"_id":"themes/butterfly/layout/includes/third-party/share/index.pug","hash":"4c4a9c15215ae8ac5eadb0e086b278f76db9ee92","modified":1637043699342},{"_id":"themes/butterfly/layout/includes/third-party/share/share-js.pug","hash":"006acc91ce25fc7c7d778ca043e970f57dc46b83","modified":1637043699342},{"_id":"themes/butterfly/source/css/_highlight/highlight/diff.styl","hash":"8c0726fb8d9a497d2f900b0be2845efaa68e3d87","modified":1637043699353},{"_id":"themes/butterfly/source/css/_highlight/highlight/index.styl","hash":"89cbcc8e087788ecec18b5fa58710afacdb7d080","modified":1637043699354},{"_id":"themes/butterfly/source/css/_highlight/prismjs/diff.styl","hash":"5972c61f5125068cbe0af279a0c93a54847fdc3b","modified":1637043699354},{"_id":"themes/butterfly/source/css/_highlight/prismjs/index.styl","hash":"e0e7065124ef0d99f8322a47bc47838982e04ad0","modified":1637043699354},{"_id":"themes/butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"8970cc1916c982b64a1478792b2822d1d31e276d","modified":1637043699354},{"_id":"source/src/fonts/alibaba-puhuiti-regular.ttf","hash":"966efdc57066cb8778748926d60212cc9601260d","modified":1637160572782},{"_id":"public/css/custom.css","hash":"47bd63e4c84eaaa193c5594da6901766e0b67a6a","modified":1637490448386},{"_id":"public/js/weather.js","hash":"f9028fc95e7ae8693c78f31291a7c2a4375dd121","modified":1637490448386},{"_id":"public/404.html","hash":"93873b3e274fafbdd9cdb74ea4e71a3a9b69ce89","modified":1637490448386},{"_id":"public/artitalk/index.html","hash":"497d3fe196ccb1232a3afb51a78842d2997e91fc","modified":1637490448386},{"_id":"public/about/index.html","hash":"ed70ae857f4384bd1463fcd9ec20286d4129c80a","modified":1637490448386},{"_id":"public/contact/index.html","hash":"f9f9f0c5f965ac49176b91b86162da2b8ff41378","modified":1637490448386},{"_id":"public/categories/index.html","hash":"5630269bb0c3941e655dbd111f305807f8eb70b8","modified":1637490448386},{"_id":"public/link/index.html","hash":"a3e37d7f6952ad79075d1525b1d07a9d6b31ed9d","modified":1637490448386},{"_id":"public/tags/index.html","hash":"03b887490fc954498865b54e7975ff5fc5673d83","modified":1637490448386},{"_id":"public/2021/11/18/yuque/java的虚拟机/index.html","hash":"076dac15ddd4ff91049d7e6fe3d67fb9b78a44cf","modified":1637490448386},{"_id":"public/2021/11/12/yuque/技术/index.html","hash":"0e6400aee6ec8f10cf580c5bb8f2d57c77835852","modified":1637490448386},{"_id":"public/2021/11/08/yuque/三大难/index.html","hash":"3d2a569385808529b6fc0dfbbdcc3f4872c7a562","modified":1637490448386},{"_id":"public/2021/11/08/yuque/前端/index.html","hash":"225ed6e91987fc33c87ec8400cde482ffe2b78c7","modified":1637490448386},{"_id":"public/2021/09/26/yuque/Java即时编译器原理解析及实践/index.html","hash":"624f87193e5c1f96b8fe7eac728b4b9e11c6c2f5","modified":1637490448386},{"_id":"public/2021/09/24/yuque/data/index.html","hash":"89c7c0470df19273d90180abdd5810f04c680c09","modified":1637490448386},{"_id":"public/2021/09/24/yuque/java启动性能优化/index.html","hash":"1114b97867f4cc719c97f3fb4fe193e5d3434620","modified":1637490448386},{"_id":"public/2021/09/16/yuque/稳定性/index.html","hash":"7de1afae119962378dd030ccd83565dad0ed8793","modified":1637490448386},{"_id":"public/2021/09/12/yuque/微服务/index.html","hash":"8ce094dd111912c9a7ffd8e634747182152efdc7","modified":1637490448386},{"_id":"public/2021/08/11/yuque/缓存的方案/index.html","hash":"ebcf64d80ecebb95d6923e5b8787547d9ef79529","modified":1637490448386},{"_id":"public/archives/index.html","hash":"ecb30a93be41ee58af969a0450861df2a10409db","modified":1637490448386},{"_id":"public/archives/2021/index.html","hash":"592dfb0bdce6f4a5d2e123379ebf703cdad2a46a","modified":1637490448386},{"_id":"public/archives/2021/08/index.html","hash":"d6a656bfa819efb879cb818dae78bac27555082c","modified":1637490448386},{"_id":"public/archives/2021/09/index.html","hash":"8a3770ba5b88fec7a5d48891c59aad4f92e45815","modified":1637490448386},{"_id":"public/archives/2021/11/index.html","hash":"25441545bd16b4e4a6bde338875c0465b08b2e4b","modified":1637490448386},{"_id":"public/categories/技术/index.html","hash":"335f2e5d8a002ccfe0f5d2ac5b771a28751600e3","modified":1637490448386},{"_id":"public/categories/折腾致死/index.html","hash":"33178aed4649c027ca8f2c1c69eb9862ceb9f1c2","modified":1637490448386},{"_id":"public/index.html","hash":"4835bffb0982b6ac41633f56ff930d0aa894ca88","modified":1637490448386},{"_id":"public/tags/java/index.html","hash":"2db5bc97263fb809dc37f4864f17fa7081aa452a","modified":1637490448386},{"_id":"public/tags/Github/index.html","hash":"11a462c69408971a294aa885e8313f69f3e3f1c8","modified":1637490448386},{"_id":"public/img/algolia.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1637490448386},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1637490448386},{"_id":"public/img/avatar.jpg","hash":"1ac012456e21b50276ad87ee0750cedaa9d94a39","modified":1637490448386},{"_id":"public/img/favicon.png","hash":"fcc9984769d0e0399f10a9ab049c4b70a7b8e6d0","modified":1637490448386},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1637490448386},{"_id":"public/src/cursors/default.cur","hash":"3381d41a9dcbb4c4e69559723481f85e2b8cf99e","modified":1637490448386},{"_id":"public/src/cursors/pointer.cur","hash":"3adb643f97571f547021fb57b2d9d768a252d546","modified":1637490448386},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1637490448386},{"_id":"public/js/utils.js","hash":"8319b59c26ce8cd2b0ae7d030c4912215148fa92","modified":1637490448386},{"_id":"public/js/search/algolia.js","hash":"65b45e61586f7e66c3f338370bfd9daadd71a4b7","modified":1637490448386},{"_id":"public/js/search/local-search.js","hash":"b1429e9f80ef6b9a77434819ffb87d90bdad25e8","modified":1637490448386},{"_id":"public/css/index.css","hash":"d15d9502d58efc5ee966dd4d43d1a36b31c7fff4","modified":1637490448386},{"_id":"public/js/main.js","hash":"b244f28124a46d7f1e8ef76ba6e925289691f93b","modified":1637490448386},{"_id":"public/js/tw_cn.js","hash":"00053ce73210274b3679f42607edef1206eebc68","modified":1637490448386},{"_id":"public/src/fonts/alibaba-puhuiti-regular.ttf","hash":"966efdc57066cb8778748926d60212cc9601260d","modified":1637490448386}],"Category":[{"name":"技术","_id":"ckw4j4bh200083m3ka7j3ec74"},{"name":"折腾致死","_id":"ckw4jg1xa0000qu3k6jgf4aq4"}],"Data":[{"_id":"link","data":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}],"Page":[{"title":"404","date":"2018-09-30T09:25:30.000Z","type":"404","layout":"404","description":"Oops～，我崩溃了！找不到你想要的页面 :(","_content":"\n","source":"404.md","raw":"---\ntitle: 404\ndate: 2018-09-30 17:25:30\ntype: \"404\"\nlayout: \"404\"\ndescription: \"Oops～，我崩溃了！找不到你想要的页面 :(\"\n---\n\n","updated":"2021-11-17T14:49:32.686Z","path":"404.html","comments":1,"_id":"ckw4j4bgl00003m3k914x9aja","content":"","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/img/default.jpg","excerpt":"","more":""},{"title":"微语","type":"artitalk","layout":"artitalk","noDate":"true","comments":1,"_content":"","source":"artitalk/index.md","raw":"---\ntitle: 微语\ntype: artitalk\nlayout: 'artitalk'\nnoDate: 'true'\ncomments: 'true'\n---","date":"2021-11-17T14:55:54.391Z","updated":"2021-11-17T14:49:32.696Z","path":"artitalk/index.html","_id":"ckw4j4bgw00023m3kfgaw1715","content":"","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/img/default.jpg","excerpt":"","more":""},{"title":"about","date":"2018-09-30T09:25:30.000Z","type":"about","layout":"about","_content":"dfadfsd","source":"about/index.md","raw":"---\ntitle: about\ndate: 2018-09-30 17:25:30\ntype: \"about\"\nlayout: \"about\"\n---\ndfadfsd","updated":"2021-11-17T14:59:42.285Z","path":"about/index.html","comments":1,"_id":"ckw4j4bgy00043m3kc7rt3s96","content":"<p>dfadfsd</p>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/img/default.jpg","excerpt":"","more":"<p>dfadfsd</p>\n"},{"title":"contact","date":"2018-09-30T09:25:30.000Z","type":"contact","layout":"contact","_content":"","source":"contact/index.md","raw":"---\ntitle: contact\ndate: 2018-09-30 17:25:30\ntype: \"contact\"\nlayout: \"contact\"\n---\n","updated":"2021-11-17T14:49:32.696Z","path":"contact/index.html","comments":1,"_id":"ckw4j4bh000063m3k1gwh6j5b","content":"","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/img/default.jpg","excerpt":"","more":""},{"_content":"@font-face {\n  font-family: 'alibaba-puhuiti';\n  font-display: swap;\n  src: url('/src/fonts/alibaba-puhuiti-regular.ttf') format(\"truetype\");\n}\n/* 日间模式页面调整 */\n[data-theme=light] {\n    --card-bg: rgba(255,255,255,.9) !important; /* 全局背景调整 */\n    --h1-color: #04393f;\n    --h2-color: #34495e;\n    --h3-color: #34b3c6;\n    --h4-color: #03a1b9cc;\n    --h5-color: #58c6d6;\n    --blockquote-border-color: #9fc0d6;\n    --blockquote-background-color: #e6eeee5c;\n    --inline-code-background: #e7ecef;\n}\n\n/* 夜间模式页面调整 */\n[data-theme=dark] {\n    --card-bg: rgba(26, 27, 29, .9) !important; /* 全局背景调整 */\n    --btn-bg: #012c48 !important; /* 页面所有按钮夜间背景色 */\n    --h1-color: #4ef7e0;\n    --h2-color: #60e4f7;\n    --h3-color: #43b8ca;\n    --h4-color: #06a0b7;\n    --h5-color: #03889c;\n    --blockquote-border-color: #699495;\n    --blockquote-background-color: #26333ea6;\n    --inline-code-background: #225764;\n}\n\n/*哔哩哔哩视频适配*/\n.aspect-ratio {position: relative;width: 100%;height: 0;padding-bottom: 75%;margin: 3% auto;text-align: center;}      \n.aspect-ratio iframe {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    left: 0;\n    top: 0;\n}\n\n\n\n/* 滚动条 */\n\n\n::-webkit-scrollbar {\n    width: 10px;\n    height: 10px;\n}\n\n::-webkit-scrollbar-thumb {\n    background-color: #71ca80;\n    background-image: -webkit-linear-gradient( 45deg, rgba(255, 255, 255, 0.4) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.4) 50%, rgba(255, 255, 255, 0.4) 75%, transparent 75%, transparent);\n    border-radius: 2em;\n}\n\n::-webkit-scrollbar-corner {\n    background-color: transparent;\n}\n\n::-moz-selection {\n    color: #fff;\n    background-color: #71ca80;\n}\n\n\n/* 去除时钟背景 */\n.card-widget.card-clock  .card-glass .card-background {\n    background-color: unset !important;\n    box-shadow: unset !important;\n}\n\nh1{\n    text-align: center;\n    font-size: 1.75em !important;\n    color: var(--h1-color);\n}\nh2 {\n    color:var(--h2-color);\n    font-size: 1.55em !important;\n}\nh3 {\n    color:var(--h3-color);\n\n    font-size: 1.35em !important;\n\n}\nh3:before {\n    content: \"| \";\n\n\n}\nh4 {\n    font-size: 1.2em !important;\n    color: var(--h4-color);\n}\nh5 {\n    font-size: 1.1em!important;\n    color: var(--h5-color);\n}\n\nblockquote {\n    margin: 0 0 1rem;\n    padding: .1rem .8rem;\n    border-left: 4px solid var(--blockquote-border-color);\n    background-color: var(--blockquote-background-color);\n    border-radius: .31em;\n    color: inherit;\n    opacity: 0.85;\n}\n#article-container a {\n    color: #49b1b2;\n}\n#article-container code {\n    padding: 0.1rem 0.2rem;\n    background: var(--inline-code-background);\n    color: inherit;\n    border: 1px solid #c6c6c73f;\n    border-radius: 3px;\n}\n\n#he-plugin-simple {\n    top: 1rem !important;\n    left: 8rem !important;\n}\n\n/* 鼠标 */\nbody {\n    cursor: url(/src/cursors/default.cur),\n        default;\n}\na,\nimg {\n    cursor: url(/src/cursors/pointer.cur),\n        default;\n}\n\n\n#live2d-widget.live2d-widget-container {\n    z-index: 1 !important;\n}\n\n#rightside_config {\n    display: none !important;\n    opacity: 0 !important;\n}\n\n\n.card-clock-weather,\n.card-clock-location,\n.card-clock-humidity,\n.card-clock-dackorlight,\n.card-clock-ip {\n    display: none !important;\n}\n\n.card-widget.card-clock {\n    height: 100px;\n}\n.card-clock-clockdate, .card-clock-ip {\n    top: -18px;\n    display: block;\n    position: relative;\n}\n.card-clock-time {\n    flex: 1;\n    font-family: UnidreamLED;\n    font-size: 38px;\n    text-align: center;\n    line-height: 1.5;\n    position: relative;\n    top: -23px;\n}\n\n\n.avatar-img img:hover {\n        -webkit-transform: rotate(\n    0deg\n    );\n    -moz-transform: rotate(0deg);\n    -o-transform: rotate(0deg);\n    -ms-transform: rotate(0deg);\n    transform: rotate(0deg);\n}\n.avatar-img:hover {\n        transform: scale(1.2);\n        transition: all 0.2s ease;\n}\n#waifu {\n    /* cursor: grab;\n    height: 250px;\n\twidth: 250px; */\n    transform: scale(0.9) !important;\n    bottom: -17px !important;\n    left: -30px !important;\n    /* top: -180px !important;\n    left: -74px !important; */\n}\n#waifu-tips{\n    /* top: -154px !important; */\n    width: 158px !important;\n    left: 14px !important;\n    font-size: 17px !important;\n}\n\n/* #waifu-tool .fa-comment, */\n/* #waifu-tool .fa-user-circle, */\n#waifu-tool .fa-camera-retro,\n#waifu-tool .fa-info-circle,\n#waifu-tool .fa-paper-plane{\n    display: none !important;\n} \n.aplayer-narrow .aplayer-body {\n    bottom: 400px !important;\n    left: -68px !important;\n}\n.aplayer-body {\n    bottom: 400px !important;\n}\n.aplayer .aplayer-pic .aplayer-pause {\n    width: 16px;\n    height: 16px;\n    border: 2px solid #fff;\n    bottom: 24px !important;\n    right: 24px !important; \n}\n.aplayer-withlist[data-type=\"playlist\"] {\n    bottom: 140px !important;\n}\n.aplayer.aplayer-fixed .aplayer-list {\n    margin-bottom: 0px !important;\n}\n\n/* #rightside {\n    right: 6px !important;\n}\n\n\n@media screen and (min-width: 300px) and (max-width: 1023px) {\n    #live2d-widget {\n        display: none;\n    }\n    #rightside {\n    right: 0px !important;\n}\n\n} */","source":"css/custom.css","raw":"@font-face {\n  font-family: 'alibaba-puhuiti';\n  font-display: swap;\n  src: url('/src/fonts/alibaba-puhuiti-regular.ttf') format(\"truetype\");\n}\n/* 日间模式页面调整 */\n[data-theme=light] {\n    --card-bg: rgba(255,255,255,.9) !important; /* 全局背景调整 */\n    --h1-color: #04393f;\n    --h2-color: #34495e;\n    --h3-color: #34b3c6;\n    --h4-color: #03a1b9cc;\n    --h5-color: #58c6d6;\n    --blockquote-border-color: #9fc0d6;\n    --blockquote-background-color: #e6eeee5c;\n    --inline-code-background: #e7ecef;\n}\n\n/* 夜间模式页面调整 */\n[data-theme=dark] {\n    --card-bg: rgba(26, 27, 29, .9) !important; /* 全局背景调整 */\n    --btn-bg: #012c48 !important; /* 页面所有按钮夜间背景色 */\n    --h1-color: #4ef7e0;\n    --h2-color: #60e4f7;\n    --h3-color: #43b8ca;\n    --h4-color: #06a0b7;\n    --h5-color: #03889c;\n    --blockquote-border-color: #699495;\n    --blockquote-background-color: #26333ea6;\n    --inline-code-background: #225764;\n}\n\n/*哔哩哔哩视频适配*/\n.aspect-ratio {position: relative;width: 100%;height: 0;padding-bottom: 75%;margin: 3% auto;text-align: center;}      \n.aspect-ratio iframe {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    left: 0;\n    top: 0;\n}\n\n\n\n/* 滚动条 */\n\n\n::-webkit-scrollbar {\n    width: 10px;\n    height: 10px;\n}\n\n::-webkit-scrollbar-thumb {\n    background-color: #71ca80;\n    background-image: -webkit-linear-gradient( 45deg, rgba(255, 255, 255, 0.4) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.4) 50%, rgba(255, 255, 255, 0.4) 75%, transparent 75%, transparent);\n    border-radius: 2em;\n}\n\n::-webkit-scrollbar-corner {\n    background-color: transparent;\n}\n\n::-moz-selection {\n    color: #fff;\n    background-color: #71ca80;\n}\n\n\n/* 去除时钟背景 */\n.card-widget.card-clock  .card-glass .card-background {\n    background-color: unset !important;\n    box-shadow: unset !important;\n}\n\nh1{\n    text-align: center;\n    font-size: 1.75em !important;\n    color: var(--h1-color);\n}\nh2 {\n    color:var(--h2-color);\n    font-size: 1.55em !important;\n}\nh3 {\n    color:var(--h3-color);\n\n    font-size: 1.35em !important;\n\n}\nh3:before {\n    content: \"| \";\n\n\n}\nh4 {\n    font-size: 1.2em !important;\n    color: var(--h4-color);\n}\nh5 {\n    font-size: 1.1em!important;\n    color: var(--h5-color);\n}\n\nblockquote {\n    margin: 0 0 1rem;\n    padding: .1rem .8rem;\n    border-left: 4px solid var(--blockquote-border-color);\n    background-color: var(--blockquote-background-color);\n    border-radius: .31em;\n    color: inherit;\n    opacity: 0.85;\n}\n#article-container a {\n    color: #49b1b2;\n}\n#article-container code {\n    padding: 0.1rem 0.2rem;\n    background: var(--inline-code-background);\n    color: inherit;\n    border: 1px solid #c6c6c73f;\n    border-radius: 3px;\n}\n\n#he-plugin-simple {\n    top: 1rem !important;\n    left: 8rem !important;\n}\n\n/* 鼠标 */\nbody {\n    cursor: url(/src/cursors/default.cur),\n        default;\n}\na,\nimg {\n    cursor: url(/src/cursors/pointer.cur),\n        default;\n}\n\n\n#live2d-widget.live2d-widget-container {\n    z-index: 1 !important;\n}\n\n#rightside_config {\n    display: none !important;\n    opacity: 0 !important;\n}\n\n\n.card-clock-weather,\n.card-clock-location,\n.card-clock-humidity,\n.card-clock-dackorlight,\n.card-clock-ip {\n    display: none !important;\n}\n\n.card-widget.card-clock {\n    height: 100px;\n}\n.card-clock-clockdate, .card-clock-ip {\n    top: -18px;\n    display: block;\n    position: relative;\n}\n.card-clock-time {\n    flex: 1;\n    font-family: UnidreamLED;\n    font-size: 38px;\n    text-align: center;\n    line-height: 1.5;\n    position: relative;\n    top: -23px;\n}\n\n\n.avatar-img img:hover {\n        -webkit-transform: rotate(\n    0deg\n    );\n    -moz-transform: rotate(0deg);\n    -o-transform: rotate(0deg);\n    -ms-transform: rotate(0deg);\n    transform: rotate(0deg);\n}\n.avatar-img:hover {\n        transform: scale(1.2);\n        transition: all 0.2s ease;\n}\n#waifu {\n    /* cursor: grab;\n    height: 250px;\n\twidth: 250px; */\n    transform: scale(0.9) !important;\n    bottom: -17px !important;\n    left: -30px !important;\n    /* top: -180px !important;\n    left: -74px !important; */\n}\n#waifu-tips{\n    /* top: -154px !important; */\n    width: 158px !important;\n    left: 14px !important;\n    font-size: 17px !important;\n}\n\n/* #waifu-tool .fa-comment, */\n/* #waifu-tool .fa-user-circle, */\n#waifu-tool .fa-camera-retro,\n#waifu-tool .fa-info-circle,\n#waifu-tool .fa-paper-plane{\n    display: none !important;\n} \n.aplayer-narrow .aplayer-body {\n    bottom: 400px !important;\n    left: -68px !important;\n}\n.aplayer-body {\n    bottom: 400px !important;\n}\n.aplayer .aplayer-pic .aplayer-pause {\n    width: 16px;\n    height: 16px;\n    border: 2px solid #fff;\n    bottom: 24px !important;\n    right: 24px !important; \n}\n.aplayer-withlist[data-type=\"playlist\"] {\n    bottom: 140px !important;\n}\n.aplayer.aplayer-fixed .aplayer-list {\n    margin-bottom: 0px !important;\n}\n\n/* #rightside {\n    right: 6px !important;\n}\n\n\n@media screen and (min-width: 300px) and (max-width: 1023px) {\n    #live2d-widget {\n        display: none;\n    }\n    #rightside {\n    right: 0px !important;\n}\n\n} */","date":"2021-11-17T14:55:54.463Z","updated":"2021-11-17T14:49:32.697Z","path":"css/custom.css","layout":"false","title":"","comments":1,"_id":"ckw4j4bh5000a3m3k01ggab1g","content":"@font-face {\n  font-family: 'alibaba-puhuiti';\n  font-display: swap;\n  src: url('/src/fonts/alibaba-puhuiti-regular.ttf') format(\"truetype\");\n}\n/* 日间模式页面调整 */\n[data-theme=light] {\n    --card-bg: rgba(255,255,255,.9) !important; /* 全局背景调整 */\n    --h1-color: #04393f;\n    --h2-color: #34495e;\n    --h3-color: #34b3c6;\n    --h4-color: #03a1b9cc;\n    --h5-color: #58c6d6;\n    --blockquote-border-color: #9fc0d6;\n    --blockquote-background-color: #e6eeee5c;\n    --inline-code-background: #e7ecef;\n}\n\n/* 夜间模式页面调整 */\n[data-theme=dark] {\n    --card-bg: rgba(26, 27, 29, .9) !important; /* 全局背景调整 */\n    --btn-bg: #012c48 !important; /* 页面所有按钮夜间背景色 */\n    --h1-color: #4ef7e0;\n    --h2-color: #60e4f7;\n    --h3-color: #43b8ca;\n    --h4-color: #06a0b7;\n    --h5-color: #03889c;\n    --blockquote-border-color: #699495;\n    --blockquote-background-color: #26333ea6;\n    --inline-code-background: #225764;\n}\n\n/*哔哩哔哩视频适配*/\n.aspect-ratio {position: relative;width: 100%;height: 0;padding-bottom: 75%;margin: 3% auto;text-align: center;}      \n.aspect-ratio iframe {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    left: 0;\n    top: 0;\n}\n\n\n\n/* 滚动条 */\n\n\n::-webkit-scrollbar {\n    width: 10px;\n    height: 10px;\n}\n\n::-webkit-scrollbar-thumb {\n    background-color: #71ca80;\n    background-image: -webkit-linear-gradient( 45deg, rgba(255, 255, 255, 0.4) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.4) 50%, rgba(255, 255, 255, 0.4) 75%, transparent 75%, transparent);\n    border-radius: 2em;\n}\n\n::-webkit-scrollbar-corner {\n    background-color: transparent;\n}\n\n::-moz-selection {\n    color: #fff;\n    background-color: #71ca80;\n}\n\n\n/* 去除时钟背景 */\n.card-widget.card-clock  .card-glass .card-background {\n    background-color: unset !important;\n    box-shadow: unset !important;\n}\n\nh1{\n    text-align: center;\n    font-size: 1.75em !important;\n    color: var(--h1-color);\n}\nh2 {\n    color:var(--h2-color);\n    font-size: 1.55em !important;\n}\nh3 {\n    color:var(--h3-color);\n\n    font-size: 1.35em !important;\n\n}\nh3:before {\n    content: \"| \";\n\n\n}\nh4 {\n    font-size: 1.2em !important;\n    color: var(--h4-color);\n}\nh5 {\n    font-size: 1.1em!important;\n    color: var(--h5-color);\n}\n\nblockquote {\n    margin: 0 0 1rem;\n    padding: .1rem .8rem;\n    border-left: 4px solid var(--blockquote-border-color);\n    background-color: var(--blockquote-background-color);\n    border-radius: .31em;\n    color: inherit;\n    opacity: 0.85;\n}\n#article-container a {\n    color: #49b1b2;\n}\n#article-container code {\n    padding: 0.1rem 0.2rem;\n    background: var(--inline-code-background);\n    color: inherit;\n    border: 1px solid #c6c6c73f;\n    border-radius: 3px;\n}\n\n#he-plugin-simple {\n    top: 1rem !important;\n    left: 8rem !important;\n}\n\n/* 鼠标 */\nbody {\n    cursor: url(/src/cursors/default.cur),\n        default;\n}\na,\nimg {\n    cursor: url(/src/cursors/pointer.cur),\n        default;\n}\n\n\n#live2d-widget.live2d-widget-container {\n    z-index: 1 !important;\n}\n\n#rightside_config {\n    display: none !important;\n    opacity: 0 !important;\n}\n\n\n.card-clock-weather,\n.card-clock-location,\n.card-clock-humidity,\n.card-clock-dackorlight,\n.card-clock-ip {\n    display: none !important;\n}\n\n.card-widget.card-clock {\n    height: 100px;\n}\n.card-clock-clockdate, .card-clock-ip {\n    top: -18px;\n    display: block;\n    position: relative;\n}\n.card-clock-time {\n    flex: 1;\n    font-family: UnidreamLED;\n    font-size: 38px;\n    text-align: center;\n    line-height: 1.5;\n    position: relative;\n    top: -23px;\n}\n\n\n.avatar-img img:hover {\n        -webkit-transform: rotate(\n    0deg\n    );\n    -moz-transform: rotate(0deg);\n    -o-transform: rotate(0deg);\n    -ms-transform: rotate(0deg);\n    transform: rotate(0deg);\n}\n.avatar-img:hover {\n        transform: scale(1.2);\n        transition: all 0.2s ease;\n}\n#waifu {\n    /* cursor: grab;\n    height: 250px;\n\twidth: 250px; */\n    transform: scale(0.9) !important;\n    bottom: -17px !important;\n    left: -30px !important;\n    /* top: -180px !important;\n    left: -74px !important; */\n}\n#waifu-tips{\n    /* top: -154px !important; */\n    width: 158px !important;\n    left: 14px !important;\n    font-size: 17px !important;\n}\n\n/* #waifu-tool .fa-comment, */\n/* #waifu-tool .fa-user-circle, */\n#waifu-tool .fa-camera-retro,\n#waifu-tool .fa-info-circle,\n#waifu-tool .fa-paper-plane{\n    display: none !important;\n} \n.aplayer-narrow .aplayer-body {\n    bottom: 400px !important;\n    left: -68px !important;\n}\n.aplayer-body {\n    bottom: 400px !important;\n}\n.aplayer .aplayer-pic .aplayer-pause {\n    width: 16px;\n    height: 16px;\n    border: 2px solid #fff;\n    bottom: 24px !important;\n    right: 24px !important; \n}\n.aplayer-withlist[data-type=\"playlist\"] {\n    bottom: 140px !important;\n}\n.aplayer.aplayer-fixed .aplayer-list {\n    margin-bottom: 0px !important;\n}\n\n/* #rightside {\n    right: 6px !important;\n}\n\n\n@media screen and (min-width: 300px) and (max-width: 1023px) {\n    #live2d-widget {\n        display: none;\n    }\n    #rightside {\n    right: 0px !important;\n}\n\n} */","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/img/default.jpg","excerpt":"","more":"@font-face {\n  font-family: 'alibaba-puhuiti';\n  font-display: swap;\n  src: url('/src/fonts/alibaba-puhuiti-regular.ttf') format(\"truetype\");\n}\n/* 日间模式页面调整 */\n[data-theme=light] {\n    --card-bg: rgba(255,255,255,.9) !important; /* 全局背景调整 */\n    --h1-color: #04393f;\n    --h2-color: #34495e;\n    --h3-color: #34b3c6;\n    --h4-color: #03a1b9cc;\n    --h5-color: #58c6d6;\n    --blockquote-border-color: #9fc0d6;\n    --blockquote-background-color: #e6eeee5c;\n    --inline-code-background: #e7ecef;\n}\n\n/* 夜间模式页面调整 */\n[data-theme=dark] {\n    --card-bg: rgba(26, 27, 29, .9) !important; /* 全局背景调整 */\n    --btn-bg: #012c48 !important; /* 页面所有按钮夜间背景色 */\n    --h1-color: #4ef7e0;\n    --h2-color: #60e4f7;\n    --h3-color: #43b8ca;\n    --h4-color: #06a0b7;\n    --h5-color: #03889c;\n    --blockquote-border-color: #699495;\n    --blockquote-background-color: #26333ea6;\n    --inline-code-background: #225764;\n}\n\n/*哔哩哔哩视频适配*/\n.aspect-ratio {position: relative;width: 100%;height: 0;padding-bottom: 75%;margin: 3% auto;text-align: center;}      \n.aspect-ratio iframe {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    left: 0;\n    top: 0;\n}\n\n\n\n/* 滚动条 */\n\n\n::-webkit-scrollbar {\n    width: 10px;\n    height: 10px;\n}\n\n::-webkit-scrollbar-thumb {\n    background-color: #71ca80;\n    background-image: -webkit-linear-gradient( 45deg, rgba(255, 255, 255, 0.4) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.4) 50%, rgba(255, 255, 255, 0.4) 75%, transparent 75%, transparent);\n    border-radius: 2em;\n}\n\n::-webkit-scrollbar-corner {\n    background-color: transparent;\n}\n\n::-moz-selection {\n    color: #fff;\n    background-color: #71ca80;\n}\n\n\n/* 去除时钟背景 */\n.card-widget.card-clock  .card-glass .card-background {\n    background-color: unset !important;\n    box-shadow: unset !important;\n}\n\nh1{\n    text-align: center;\n    font-size: 1.75em !important;\n    color: var(--h1-color);\n}\nh2 {\n    color:var(--h2-color);\n    font-size: 1.55em !important;\n}\nh3 {\n    color:var(--h3-color);\n\n    font-size: 1.35em !important;\n\n}\nh3:before {\n    content: \"| \";\n\n\n}\nh4 {\n    font-size: 1.2em !important;\n    color: var(--h4-color);\n}\nh5 {\n    font-size: 1.1em!important;\n    color: var(--h5-color);\n}\n\nblockquote {\n    margin: 0 0 1rem;\n    padding: .1rem .8rem;\n    border-left: 4px solid var(--blockquote-border-color);\n    background-color: var(--blockquote-background-color);\n    border-radius: .31em;\n    color: inherit;\n    opacity: 0.85;\n}\n#article-container a {\n    color: #49b1b2;\n}\n#article-container code {\n    padding: 0.1rem 0.2rem;\n    background: var(--inline-code-background);\n    color: inherit;\n    border: 1px solid #c6c6c73f;\n    border-radius: 3px;\n}\n\n#he-plugin-simple {\n    top: 1rem !important;\n    left: 8rem !important;\n}\n\n/* 鼠标 */\nbody {\n    cursor: url(/src/cursors/default.cur),\n        default;\n}\na,\nimg {\n    cursor: url(/src/cursors/pointer.cur),\n        default;\n}\n\n\n#live2d-widget.live2d-widget-container {\n    z-index: 1 !important;\n}\n\n#rightside_config {\n    display: none !important;\n    opacity: 0 !important;\n}\n\n\n.card-clock-weather,\n.card-clock-location,\n.card-clock-humidity,\n.card-clock-dackorlight,\n.card-clock-ip {\n    display: none !important;\n}\n\n.card-widget.card-clock {\n    height: 100px;\n}\n.card-clock-clockdate, .card-clock-ip {\n    top: -18px;\n    display: block;\n    position: relative;\n}\n.card-clock-time {\n    flex: 1;\n    font-family: UnidreamLED;\n    font-size: 38px;\n    text-align: center;\n    line-height: 1.5;\n    position: relative;\n    top: -23px;\n}\n\n\n.avatar-img img:hover {\n        -webkit-transform: rotate(\n    0deg\n    );\n    -moz-transform: rotate(0deg);\n    -o-transform: rotate(0deg);\n    -ms-transform: rotate(0deg);\n    transform: rotate(0deg);\n}\n.avatar-img:hover {\n        transform: scale(1.2);\n        transition: all 0.2s ease;\n}\n#waifu {\n    /* cursor: grab;\n    height: 250px;\n\twidth: 250px; */\n    transform: scale(0.9) !important;\n    bottom: -17px !important;\n    left: -30px !important;\n    /* top: -180px !important;\n    left: -74px !important; */\n}\n#waifu-tips{\n    /* top: -154px !important; */\n    width: 158px !important;\n    left: 14px !important;\n    font-size: 17px !important;\n}\n\n/* #waifu-tool .fa-comment, */\n/* #waifu-tool .fa-user-circle, */\n#waifu-tool .fa-camera-retro,\n#waifu-tool .fa-info-circle,\n#waifu-tool .fa-paper-plane{\n    display: none !important;\n} \n.aplayer-narrow .aplayer-body {\n    bottom: 400px !important;\n    left: -68px !important;\n}\n.aplayer-body {\n    bottom: 400px !important;\n}\n.aplayer .aplayer-pic .aplayer-pause {\n    width: 16px;\n    height: 16px;\n    border: 2px solid #fff;\n    bottom: 24px !important;\n    right: 24px !important; \n}\n.aplayer-withlist[data-type=\"playlist\"] {\n    bottom: 140px !important;\n}\n.aplayer.aplayer-fixed .aplayer-list {\n    margin-bottom: 0px !important;\n}\n\n/* #rightside {\n    right: 6px !important;\n}\n\n\n@media screen and (min-width: 300px) and (max-width: 1023px) {\n    #live2d-widget {\n        display: none;\n    }\n    #rightside {\n    right: 0px !important;\n}\n\n} */"},{"_content":"WIDGET = {\n    \"CONFIG\": {\n        \"modules\": \"01234\",\n        \"background\": \"5\",\n        \"tmpColor\": \"4A86E8\",\n        \"tmpSize\": \"16\",\n        \"cityColor\": \"FF9900\",\n        \"citySize\": \"16\",\n        \"aqiColor\": \"4A86E8\",\n        \"aqiSize\": \"16\",\n        \"weatherIconSize\": \"24\",\n        \"alertIconSize\": \"18\",\n        \"padding\": \"0px 0px 0px 0px\",\n        \"shadow\": \"0\",\n        \"language\": \"auto\",\n        \"fixed\": \"true\",\n        \"vertical\": \"center\",\n        \"horizontal\": \"center\",\n        \"left\": \"125\",\n        \"top\": \"20\",\n        \"key\": \"6317642dbf254ddc9cb208a648aebc83\"\n    }\n}\n\n","source":"js/weather.js","raw":"WIDGET = {\n    \"CONFIG\": {\n        \"modules\": \"01234\",\n        \"background\": \"5\",\n        \"tmpColor\": \"4A86E8\",\n        \"tmpSize\": \"16\",\n        \"cityColor\": \"FF9900\",\n        \"citySize\": \"16\",\n        \"aqiColor\": \"4A86E8\",\n        \"aqiSize\": \"16\",\n        \"weatherIconSize\": \"24\",\n        \"alertIconSize\": \"18\",\n        \"padding\": \"0px 0px 0px 0px\",\n        \"shadow\": \"0\",\n        \"language\": \"auto\",\n        \"fixed\": \"true\",\n        \"vertical\": \"center\",\n        \"horizontal\": \"center\",\n        \"left\": \"125\",\n        \"top\": \"20\",\n        \"key\": \"6317642dbf254ddc9cb208a648aebc83\"\n    }\n}\n\n","date":"2021-11-17T14:55:54.505Z","updated":"2021-11-17T14:49:32.699Z","path":"js/weather.js","layout":"false","title":"","comments":1,"_id":"ckw4j4bh8000c3m3kei7x42hi","content":"WIDGET = {\n    \"CONFIG\": {\n        \"modules\": \"01234\",\n        \"background\": \"5\",\n        \"tmpColor\": \"4A86E8\",\n        \"tmpSize\": \"16\",\n        \"cityColor\": \"FF9900\",\n        \"citySize\": \"16\",\n        \"aqiColor\": \"4A86E8\",\n        \"aqiSize\": \"16\",\n        \"weatherIconSize\": \"24\",\n        \"alertIconSize\": \"18\",\n        \"padding\": \"0px 0px 0px 0px\",\n        \"shadow\": \"0\",\n        \"language\": \"auto\",\n        \"fixed\": \"true\",\n        \"vertical\": \"center\",\n        \"horizontal\": \"center\",\n        \"left\": \"125\",\n        \"top\": \"20\",\n        \"key\": \"6317642dbf254ddc9cb208a648aebc83\"\n    }\n}\n\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/img/default.jpg","excerpt":"","more":"WIDGET = {\n    \"CONFIG\": {\n        \"modules\": \"01234\",\n        \"background\": \"5\",\n        \"tmpColor\": \"4A86E8\",\n        \"tmpSize\": \"16\",\n        \"cityColor\": \"FF9900\",\n        \"citySize\": \"16\",\n        \"aqiColor\": \"4A86E8\",\n        \"aqiSize\": \"16\",\n        \"weatherIconSize\": \"24\",\n        \"alertIconSize\": \"18\",\n        \"padding\": \"0px 0px 0px 0px\",\n        \"shadow\": \"0\",\n        \"language\": \"auto\",\n        \"fixed\": \"true\",\n        \"vertical\": \"center\",\n        \"horizontal\": \"center\",\n        \"left\": \"125\",\n        \"top\": \"20\",\n        \"key\": \"6317642dbf254ddc9cb208a648aebc83\"\n    }\n}\n\n"},{"title":"categories","date":"2018-09-30T09:25:30.000Z","type":"categories","layout":"categories","_content":"\n","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2018-09-30 17:25:30\ntype: \"categories\"\nlayout: \"categories\"\n---\n\n","updated":"2021-11-17T14:49:32.696Z","path":"categories/index.html","comments":1,"_id":"ckw4j4bha000e3m3k397r358i","content":"","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/img/default.jpg","excerpt":"","more":""},{"title":"友情鏈接","date":"2018-06-07T14:17:49.000Z","type":"link","_content":"","source":"link/index.md","raw":"---\ntitle: 友情鏈接\ndate: 2018-06-07 22:17:49\ntype: \"link\"\n---","updated":"2021-11-17T14:49:32.699Z","path":"link/index.html","comments":1,"layout":"page","_id":"ckw4j4bhc000h3m3k1b8h5bnv","content":"","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/img/default.jpg","excerpt":"","more":""},{"title":"tags","date":"2018-09-30T10:23:38.000Z","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2018-09-30 18:23:38\ntype: \"tags\"\nlayout: \"tags\"\n---\n","updated":"2021-11-17T14:49:32.782Z","path":"tags/index.html","comments":1,"_id":"ckw4j4bhd000i3m3kcr9bfo8i","content":"","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/img/default.jpg","excerpt":"","more":""}],"Post":[{"title":"data","urlname":"gs6s32","date":"2021-09-24T06:26:55.000Z","_content":"\n2 查 cpu 升高的问题\n2、在 Cacheable 的使用过程中，一定要注意同个 cacheName 中 key 值相同的可能覆盖的问题。\n","source":"_posts/yuque/data.md","raw":"---\ntitle: data\nurlname: gs6s32\ndate: '2021-09-24 14:26:55 +0800'\ntags: []\ncategories: []\n---\n\n2 查 cpu 升高的问题\n2、在 Cacheable 的使用过程中，一定要注意同个 cacheName 中 key 值相同的可能覆盖的问题。\n","slug":"yuque/data","published":1,"updated":"2021-11-18T05:44:27.434Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckw4j4bgq00013m3ke3dw9xdu","content":"<p>2 查 cpu 升高的问题<br>2、在 Cacheable 的使用过程中，一定要注意同个 cacheName 中 key 值相同的可能覆盖的问题。</p>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/img/default.jpg","excerpt":"","more":"<p>2 查 cpu 升高的问题<br>2、在 Cacheable 的使用过程中，一定要注意同个 cacheName 中 key 值相同的可能覆盖的问题。</p>\n"},{"title":"java启动性能优化","urlname":"ogd5iu","date":"2021-09-24T06:14:08.000Z","_content":"\nJIT 的 Profile 神器 JITWatch\n[https://mp.weixin.qq.com/s/1r2NtTgsI63G_ICJMx6XxQ](https://mp.weixin.qq.com/s/1r2NtTgsI63G_ICJMx6XxQ)\n​\n\n作者：kelthuzadx\n链接：https://www.zhihu.com/question/478887438/answer/2054092011\n来源：知乎\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n\nAOT 编译即 jaotc，可以将 Java 代码编成二进制，然后虚拟机直接用这些二进制，而不是在运行时花费时间用 JIT 编译。JDK10 还尝试使用 AOT 背后的 Graal 代替 HotSpot VM 原有的 C2 JIT 编译器。但是它们两个的探索不算成功，首先用的不多，成功实践不多，关于这点可以问问自己有没有听过或者实际用过 jaotc 或者 Graal JIT。\n其次 Graal 主要是 Oracle Labs 那边做开发，他们有一个[仓库](https://link.zhihu.com/?target=https%3A//github.com/oracle/graal)，相当于它们是 JDK 里面的 Graal 和 AOT 的上游，但是它们在 JDK 中的测试挂了没人修，也不太活跃，对 JDK 的代码演进会照成一定的困扰（小道消息可能还有派系斗争。。），基于总总原因，OpenJDK 社区决定在 JDK17 中移除它们，由 Oracle Labs 在独立的仓库中维护。所以，**OpenJDK 社区确实已经彻底放弃基于 Graal 的 AOT 了，**但是彻底放弃 AOT 这个技术本身也不一定，没准哪天就有个基于 C2 的 AOT 呢：P.\n是不是听起来感觉还有救？反正还有 Oracle Labs 仓库的继续维护，不慌。\n相关用户还是要慌一下，因为 Oracle Labs 也在它们的主线上[移除了 AOT](https://link.zhihu.com/?target=https%3A//github.com/oracle/graal/commit/2850e2ea3d47f0ac81a740f4ac48bf0e27135a11)，我们未来可能要永远告别 jaotc 了。至于 Graal 短时间内肯定还是有的，因为它是 GraalVM 安身立命的基础。\n但是对于函数计算、Serverless 甚至更广阔的应用场景，快速启动、内存低占用这些仍然是刚需，我们仍然需要解决。\n---- 探索 1\n很多应用启动性能 Profiling 显示 JVM 启动慢的主要原因是类的**加载-链接-初始化**这一套，它们占据了启动的绝大部分时间，JVM 本身的启动是非常快的（-Xlog:startuptime)。对于类的三部曲，一个解决方案是[AppCDS](https://link.zhihu.com/?target=http%3A//openjdk.java.net/jeps/310)技术，OpenJDK 对它做了很多工作，阿里 JDK 也对快速启动和 AppCDS 做了大量改造（[所以，亲，看机会吗？](https://zhuanlan.zhihu.com/p/392773209)）\n回到技术本身。JVM 之所以要加载-链接-初始化一个类，目的是让用户写的一个类 Foo，在虚拟机里面能有个数据结构（即 InstanceKlass）对应，这样虚拟机就可以通过它知道 Foo 实现了哪些接口，父类是谁等等。那么只要 Foo 类的字节码没有变过，我们跑多次应用，最终 JVM 里面的 InstanceKlass 就可以是一样的。这就是 AppCDS 的洞察，它可以让应用先 模拟 跑一次，把 JVM 里面已经走过加载-链接-初始化流程的 InstanceKlass 都存放到 App.jsa 文件里面，第二次 实际 运行时直接使用读 App.jsa，拿到已经准备就绪的 InstanceKlass 直接用，省去了加载-链接的开销。\n---- 探索 2\n注意 AppCDS 不能跳过初始化这个过程，这个过程需要另一项依赖 AppCDS 和 G1 的技术，即 Pre-initialization 提前初始化来部分解决。Pre-initialization 是比较前沿的技术，也处于探索期间，最新的工作可以使这个技术适用于非 G1 的垃圾回收器。\nOpenJDK 还针对 AppCDS 做了非常多的工作，比如 DynamicAppCDS、AppCDS for Lambda/Proxy Classes，就不展开了。\n----探索 3\n除了 VM 上面做功夫之外，Linux CRIU 技术也不容忽视。CRIU 的介绍我就贴一点官网的：CRIU 可以冻结运行中的容器或者某个单独的应用，然后把它的状态保存到磁盘上， 然后下次运行时读取磁盘的数据恢复执行。**理想情况下，**应用程序是无感知的，它不知道被暂停过。\nOpenJDK 也在积极探索，前一段时间 Azul 的一位开发者（为 macOS M1 提供 JDK 的那个男人）提议成立[CRaC 项目](https://link.zhihu.com/?target=https%3A//mail.openjdk.java.net/pipermail/discuss/2021-July/005862.html)（JDK 中需要花费大量努力的方向或者技术探索都会创建一个项目，而不是在主线，比如 ZGC，VectorAPI，Valhalla），这个技术旨在探索如何让 CRIU 和 JVM 更好的协作。该项目目前还在广泛讨(che)论(pi)，参与者至少包括 RedHat，Amazon，Azul。对于开发者，等就完事了。\n----探索 4\n再补充一点。\nOpenJDK 还有一个[Leyden 项目](https://link.zhihu.com/?target=https%3A//mail.openjdk.java.net/pipermail/announce/2020-May/000289.html)，探索 static-image 技术，目标也是为了解决上面我们提到的 Java 启动慢、内存高占用等问题。\n那么 static-image 又是啥呢？假如有个 void foo()方法，用传统的 AOT 如 jatoc，会把 foo 编译成二进制，而 static-image 会把 foo 编译成二进制，**同时**再带上语言运行时（比如 GC、线程模型等），最终得到一个“**闭合的二进制世界**”。static-image 其实就是更广义的 AOT。\n所以不要悲观，OpenJDK 和 GraalVM 虽然都废弃了传统的 AOT 编译，但是两者都**不约而同**的探索 static-image 技术，OpenJDK 这边是 Leyden，GraalVM 那边是[SubstrateVM](https://www.zhihu.com/question/274042223/answer/1270829173)。不过我得吐槽一下。。Leyden 雷声大雨点小，截至目前(2021.8.12)还没有实际的动静，GraalVM 那边的 SubstrateVM 倒是做的风生水起。\n","source":"_posts/yuque/java启动性能优化.md","raw":"---\ntitle: java启动性能优化\nurlname: ogd5iu\ndate: '2021-09-24 14:14:08 +0800'\ntags: []\ncategories: []\n---\n\nJIT 的 Profile 神器 JITWatch\n[https://mp.weixin.qq.com/s/1r2NtTgsI63G_ICJMx6XxQ](https://mp.weixin.qq.com/s/1r2NtTgsI63G_ICJMx6XxQ)\n​\n\n作者：kelthuzadx\n链接：https://www.zhihu.com/question/478887438/answer/2054092011\n来源：知乎\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n\nAOT 编译即 jaotc，可以将 Java 代码编成二进制，然后虚拟机直接用这些二进制，而不是在运行时花费时间用 JIT 编译。JDK10 还尝试使用 AOT 背后的 Graal 代替 HotSpot VM 原有的 C2 JIT 编译器。但是它们两个的探索不算成功，首先用的不多，成功实践不多，关于这点可以问问自己有没有听过或者实际用过 jaotc 或者 Graal JIT。\n其次 Graal 主要是 Oracle Labs 那边做开发，他们有一个[仓库](https://link.zhihu.com/?target=https%3A//github.com/oracle/graal)，相当于它们是 JDK 里面的 Graal 和 AOT 的上游，但是它们在 JDK 中的测试挂了没人修，也不太活跃，对 JDK 的代码演进会照成一定的困扰（小道消息可能还有派系斗争。。），基于总总原因，OpenJDK 社区决定在 JDK17 中移除它们，由 Oracle Labs 在独立的仓库中维护。所以，**OpenJDK 社区确实已经彻底放弃基于 Graal 的 AOT 了，**但是彻底放弃 AOT 这个技术本身也不一定，没准哪天就有个基于 C2 的 AOT 呢：P.\n是不是听起来感觉还有救？反正还有 Oracle Labs 仓库的继续维护，不慌。\n相关用户还是要慌一下，因为 Oracle Labs 也在它们的主线上[移除了 AOT](https://link.zhihu.com/?target=https%3A//github.com/oracle/graal/commit/2850e2ea3d47f0ac81a740f4ac48bf0e27135a11)，我们未来可能要永远告别 jaotc 了。至于 Graal 短时间内肯定还是有的，因为它是 GraalVM 安身立命的基础。\n但是对于函数计算、Serverless 甚至更广阔的应用场景，快速启动、内存低占用这些仍然是刚需，我们仍然需要解决。\n---- 探索 1\n很多应用启动性能 Profiling 显示 JVM 启动慢的主要原因是类的**加载-链接-初始化**这一套，它们占据了启动的绝大部分时间，JVM 本身的启动是非常快的（-Xlog:startuptime)。对于类的三部曲，一个解决方案是[AppCDS](https://link.zhihu.com/?target=http%3A//openjdk.java.net/jeps/310)技术，OpenJDK 对它做了很多工作，阿里 JDK 也对快速启动和 AppCDS 做了大量改造（[所以，亲，看机会吗？](https://zhuanlan.zhihu.com/p/392773209)）\n回到技术本身。JVM 之所以要加载-链接-初始化一个类，目的是让用户写的一个类 Foo，在虚拟机里面能有个数据结构（即 InstanceKlass）对应，这样虚拟机就可以通过它知道 Foo 实现了哪些接口，父类是谁等等。那么只要 Foo 类的字节码没有变过，我们跑多次应用，最终 JVM 里面的 InstanceKlass 就可以是一样的。这就是 AppCDS 的洞察，它可以让应用先 模拟 跑一次，把 JVM 里面已经走过加载-链接-初始化流程的 InstanceKlass 都存放到 App.jsa 文件里面，第二次 实际 运行时直接使用读 App.jsa，拿到已经准备就绪的 InstanceKlass 直接用，省去了加载-链接的开销。\n---- 探索 2\n注意 AppCDS 不能跳过初始化这个过程，这个过程需要另一项依赖 AppCDS 和 G1 的技术，即 Pre-initialization 提前初始化来部分解决。Pre-initialization 是比较前沿的技术，也处于探索期间，最新的工作可以使这个技术适用于非 G1 的垃圾回收器。\nOpenJDK 还针对 AppCDS 做了非常多的工作，比如 DynamicAppCDS、AppCDS for Lambda/Proxy Classes，就不展开了。\n----探索 3\n除了 VM 上面做功夫之外，Linux CRIU 技术也不容忽视。CRIU 的介绍我就贴一点官网的：CRIU 可以冻结运行中的容器或者某个单独的应用，然后把它的状态保存到磁盘上， 然后下次运行时读取磁盘的数据恢复执行。**理想情况下，**应用程序是无感知的，它不知道被暂停过。\nOpenJDK 也在积极探索，前一段时间 Azul 的一位开发者（为 macOS M1 提供 JDK 的那个男人）提议成立[CRaC 项目](https://link.zhihu.com/?target=https%3A//mail.openjdk.java.net/pipermail/discuss/2021-July/005862.html)（JDK 中需要花费大量努力的方向或者技术探索都会创建一个项目，而不是在主线，比如 ZGC，VectorAPI，Valhalla），这个技术旨在探索如何让 CRIU 和 JVM 更好的协作。该项目目前还在广泛讨(che)论(pi)，参与者至少包括 RedHat，Amazon，Azul。对于开发者，等就完事了。\n----探索 4\n再补充一点。\nOpenJDK 还有一个[Leyden 项目](https://link.zhihu.com/?target=https%3A//mail.openjdk.java.net/pipermail/announce/2020-May/000289.html)，探索 static-image 技术，目标也是为了解决上面我们提到的 Java 启动慢、内存高占用等问题。\n那么 static-image 又是啥呢？假如有个 void foo()方法，用传统的 AOT 如 jatoc，会把 foo 编译成二进制，而 static-image 会把 foo 编译成二进制，**同时**再带上语言运行时（比如 GC、线程模型等），最终得到一个“**闭合的二进制世界**”。static-image 其实就是更广义的 AOT。\n所以不要悲观，OpenJDK 和 GraalVM 虽然都废弃了传统的 AOT 编译，但是两者都**不约而同**的探索 static-image 技术，OpenJDK 这边是 Leyden，GraalVM 那边是[SubstrateVM](https://www.zhihu.com/question/274042223/answer/1270829173)。不过我得吐槽一下。。Leyden 雷声大雨点小，截至目前(2021.8.12)还没有实际的动静，GraalVM 那边的 SubstrateVM 倒是做的风生水起。\n","slug":"yuque/java启动性能优化","published":1,"updated":"2021-11-18T05:44:27.477Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckw4j4bgw00033m3k4xzzcsoz","content":"<p>JIT 的 Profile 神器 JITWatch<br><a href=\"https://mp.weixin.qq.com/s/1r2NtTgsI63G_ICJMx6XxQ\">https://mp.weixin.qq.com/s/1r2NtTgsI63G_ICJMx6XxQ</a><br>​</p>\n<p>作者：kelthuzadx<br>链接：<a href=\"https://www.zhihu.com/question/478887438/answer/2054092011\">https://www.zhihu.com/question/478887438/answer/2054092011</a><br>来源：知乎<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>\n<p>AOT 编译即 jaotc，可以将 Java 代码编成二进制，然后虚拟机直接用这些二进制，而不是在运行时花费时间用 JIT 编译。JDK10 还尝试使用 AOT 背后的 Graal 代替 HotSpot VM 原有的 C2 JIT 编译器。但是它们两个的探索不算成功，首先用的不多，成功实践不多，关于这点可以问问自己有没有听过或者实际用过 jaotc 或者 Graal JIT。<br>其次 Graal 主要是 Oracle Labs 那边做开发，他们有一个<a href=\"https://link.zhihu.com/?target=https://github.com/oracle/graal\">仓库</a>，相当于它们是 JDK 里面的 Graal 和 AOT 的上游，但是它们在 JDK 中的测试挂了没人修，也不太活跃，对 JDK 的代码演进会照成一定的困扰（小道消息可能还有派系斗争。。），基于总总原因，OpenJDK 社区决定在 JDK17 中移除它们，由 Oracle Labs 在独立的仓库中维护。所以，<strong>OpenJDK 社区确实已经彻底放弃基于 Graal 的 AOT 了，</strong>但是彻底放弃 AOT 这个技术本身也不一定，没准哪天就有个基于 C2 的 AOT 呢：P.<br>是不是听起来感觉还有救？反正还有 Oracle Labs 仓库的继续维护，不慌。<br>相关用户还是要慌一下，因为 Oracle Labs 也在它们的主线上<a href=\"https://link.zhihu.com/?target=https://github.com/oracle/graal/commit/2850e2ea3d47f0ac81a740f4ac48bf0e27135a11\">移除了 AOT</a>，我们未来可能要永远告别 jaotc 了。至于 Graal 短时间内肯定还是有的，因为它是 GraalVM 安身立命的基础。<br>但是对于函数计算、Serverless 甚至更广阔的应用场景，快速启动、内存低占用这些仍然是刚需，我们仍然需要解决。<br>—- 探索 1<br>很多应用启动性能 Profiling 显示 JVM 启动慢的主要原因是类的<strong>加载-链接-初始化</strong>这一套，它们占据了启动的绝大部分时间，JVM 本身的启动是非常快的（-Xlog:startuptime)。对于类的三部曲，一个解决方案是<a href=\"https://link.zhihu.com/?target=http://openjdk.java.net/jeps/310\">AppCDS</a>技术，OpenJDK 对它做了很多工作，阿里 JDK 也对快速启动和 AppCDS 做了大量改造（<a href=\"https://zhuanlan.zhihu.com/p/392773209\">所以，亲，看机会吗？</a>）<br>回到技术本身。JVM 之所以要加载-链接-初始化一个类，目的是让用户写的一个类 Foo，在虚拟机里面能有个数据结构（即 InstanceKlass）对应，这样虚拟机就可以通过它知道 Foo 实现了哪些接口，父类是谁等等。那么只要 Foo 类的字节码没有变过，我们跑多次应用，最终 JVM 里面的 InstanceKlass 就可以是一样的。这就是 AppCDS 的洞察，它可以让应用先 模拟 跑一次，把 JVM 里面已经走过加载-链接-初始化流程的 InstanceKlass 都存放到 App.jsa 文件里面，第二次 实际 运行时直接使用读 App.jsa，拿到已经准备就绪的 InstanceKlass 直接用，省去了加载-链接的开销。<br>—- 探索 2<br>注意 AppCDS 不能跳过初始化这个过程，这个过程需要另一项依赖 AppCDS 和 G1 的技术，即 Pre-initialization 提前初始化来部分解决。Pre-initialization 是比较前沿的技术，也处于探索期间，最新的工作可以使这个技术适用于非 G1 的垃圾回收器。<br>OpenJDK 还针对 AppCDS 做了非常多的工作，比如 DynamicAppCDS、AppCDS for Lambda/Proxy Classes，就不展开了。<br>—-探索 3<br>除了 VM 上面做功夫之外，Linux CRIU 技术也不容忽视。CRIU 的介绍我就贴一点官网的：CRIU 可以冻结运行中的容器或者某个单独的应用，然后把它的状态保存到磁盘上， 然后下次运行时读取磁盘的数据恢复执行。<strong>理想情况下，</strong>应用程序是无感知的，它不知道被暂停过。<br>OpenJDK 也在积极探索，前一段时间 Azul 的一位开发者（为 macOS M1 提供 JDK 的那个男人）提议成立<a href=\"https://link.zhihu.com/?target=https://mail.openjdk.java.net/pipermail/discuss/2021-July/005862.html\">CRaC 项目</a>（JDK 中需要花费大量努力的方向或者技术探索都会创建一个项目，而不是在主线，比如 ZGC，VectorAPI，Valhalla），这个技术旨在探索如何让 CRIU 和 JVM 更好的协作。该项目目前还在广泛讨(che)论(pi)，参与者至少包括 RedHat，Amazon，Azul。对于开发者，等就完事了。<br>—-探索 4<br>再补充一点。<br>OpenJDK 还有一个<a href=\"https://link.zhihu.com/?target=https://mail.openjdk.java.net/pipermail/announce/2020-May/000289.html\">Leyden 项目</a>，探索 static-image 技术，目标也是为了解决上面我们提到的 Java 启动慢、内存高占用等问题。<br>那么 static-image 又是啥呢？假如有个 void foo()方法，用传统的 AOT 如 jatoc，会把 foo 编译成二进制，而 static-image 会把 foo 编译成二进制，<strong>同时</strong>再带上语言运行时（比如 GC、线程模型等），最终得到一个“<strong>闭合的二进制世界</strong>”。static-image 其实就是更广义的 AOT。<br>所以不要悲观，OpenJDK 和 GraalVM 虽然都废弃了传统的 AOT 编译，但是两者都<strong>不约而同</strong>的探索 static-image 技术，OpenJDK 这边是 Leyden，GraalVM 那边是<a href=\"https://www.zhihu.com/question/274042223/answer/1270829173\">SubstrateVM</a>。不过我得吐槽一下。。Leyden 雷声大雨点小，截至目前(2021.8.12)还没有实际的动静，GraalVM 那边的 SubstrateVM 倒是做的风生水起。</p>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/img/default.jpg","excerpt":"","more":"<p>JIT 的 Profile 神器 JITWatch<br><a href=\"https://mp.weixin.qq.com/s/1r2NtTgsI63G_ICJMx6XxQ\">https://mp.weixin.qq.com/s/1r2NtTgsI63G_ICJMx6XxQ</a><br>​</p>\n<p>作者：kelthuzadx<br>链接：<a href=\"https://www.zhihu.com/question/478887438/answer/2054092011\">https://www.zhihu.com/question/478887438/answer/2054092011</a><br>来源：知乎<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>\n<p>AOT 编译即 jaotc，可以将 Java 代码编成二进制，然后虚拟机直接用这些二进制，而不是在运行时花费时间用 JIT 编译。JDK10 还尝试使用 AOT 背后的 Graal 代替 HotSpot VM 原有的 C2 JIT 编译器。但是它们两个的探索不算成功，首先用的不多，成功实践不多，关于这点可以问问自己有没有听过或者实际用过 jaotc 或者 Graal JIT。<br>其次 Graal 主要是 Oracle Labs 那边做开发，他们有一个<a href=\"https://link.zhihu.com/?target=https://github.com/oracle/graal\">仓库</a>，相当于它们是 JDK 里面的 Graal 和 AOT 的上游，但是它们在 JDK 中的测试挂了没人修，也不太活跃，对 JDK 的代码演进会照成一定的困扰（小道消息可能还有派系斗争。。），基于总总原因，OpenJDK 社区决定在 JDK17 中移除它们，由 Oracle Labs 在独立的仓库中维护。所以，<strong>OpenJDK 社区确实已经彻底放弃基于 Graal 的 AOT 了，</strong>但是彻底放弃 AOT 这个技术本身也不一定，没准哪天就有个基于 C2 的 AOT 呢：P.<br>是不是听起来感觉还有救？反正还有 Oracle Labs 仓库的继续维护，不慌。<br>相关用户还是要慌一下，因为 Oracle Labs 也在它们的主线上<a href=\"https://link.zhihu.com/?target=https://github.com/oracle/graal/commit/2850e2ea3d47f0ac81a740f4ac48bf0e27135a11\">移除了 AOT</a>，我们未来可能要永远告别 jaotc 了。至于 Graal 短时间内肯定还是有的，因为它是 GraalVM 安身立命的基础。<br>但是对于函数计算、Serverless 甚至更广阔的应用场景，快速启动、内存低占用这些仍然是刚需，我们仍然需要解决。<br>—- 探索 1<br>很多应用启动性能 Profiling 显示 JVM 启动慢的主要原因是类的<strong>加载-链接-初始化</strong>这一套，它们占据了启动的绝大部分时间，JVM 本身的启动是非常快的（-Xlog:startuptime)。对于类的三部曲，一个解决方案是<a href=\"https://link.zhihu.com/?target=http://openjdk.java.net/jeps/310\">AppCDS</a>技术，OpenJDK 对它做了很多工作，阿里 JDK 也对快速启动和 AppCDS 做了大量改造（<a href=\"https://zhuanlan.zhihu.com/p/392773209\">所以，亲，看机会吗？</a>）<br>回到技术本身。JVM 之所以要加载-链接-初始化一个类，目的是让用户写的一个类 Foo，在虚拟机里面能有个数据结构（即 InstanceKlass）对应，这样虚拟机就可以通过它知道 Foo 实现了哪些接口，父类是谁等等。那么只要 Foo 类的字节码没有变过，我们跑多次应用，最终 JVM 里面的 InstanceKlass 就可以是一样的。这就是 AppCDS 的洞察，它可以让应用先 模拟 跑一次，把 JVM 里面已经走过加载-链接-初始化流程的 InstanceKlass 都存放到 App.jsa 文件里面，第二次 实际 运行时直接使用读 App.jsa，拿到已经准备就绪的 InstanceKlass 直接用，省去了加载-链接的开销。<br>—- 探索 2<br>注意 AppCDS 不能跳过初始化这个过程，这个过程需要另一项依赖 AppCDS 和 G1 的技术，即 Pre-initialization 提前初始化来部分解决。Pre-initialization 是比较前沿的技术，也处于探索期间，最新的工作可以使这个技术适用于非 G1 的垃圾回收器。<br>OpenJDK 还针对 AppCDS 做了非常多的工作，比如 DynamicAppCDS、AppCDS for Lambda/Proxy Classes，就不展开了。<br>—-探索 3<br>除了 VM 上面做功夫之外，Linux CRIU 技术也不容忽视。CRIU 的介绍我就贴一点官网的：CRIU 可以冻结运行中的容器或者某个单独的应用，然后把它的状态保存到磁盘上， 然后下次运行时读取磁盘的数据恢复执行。<strong>理想情况下，</strong>应用程序是无感知的，它不知道被暂停过。<br>OpenJDK 也在积极探索，前一段时间 Azul 的一位开发者（为 macOS M1 提供 JDK 的那个男人）提议成立<a href=\"https://link.zhihu.com/?target=https://mail.openjdk.java.net/pipermail/discuss/2021-July/005862.html\">CRaC 项目</a>（JDK 中需要花费大量努力的方向或者技术探索都会创建一个项目，而不是在主线，比如 ZGC，VectorAPI，Valhalla），这个技术旨在探索如何让 CRIU 和 JVM 更好的协作。该项目目前还在广泛讨(che)论(pi)，参与者至少包括 RedHat，Amazon，Azul。对于开发者，等就完事了。<br>—-探索 4<br>再补充一点。<br>OpenJDK 还有一个<a href=\"https://link.zhihu.com/?target=https://mail.openjdk.java.net/pipermail/announce/2020-May/000289.html\">Leyden 项目</a>，探索 static-image 技术，目标也是为了解决上面我们提到的 Java 启动慢、内存高占用等问题。<br>那么 static-image 又是啥呢？假如有个 void foo()方法，用传统的 AOT 如 jatoc，会把 foo 编译成二进制，而 static-image 会把 foo 编译成二进制，<strong>同时</strong>再带上语言运行时（比如 GC、线程模型等），最终得到一个“<strong>闭合的二进制世界</strong>”。static-image 其实就是更广义的 AOT。<br>所以不要悲观，OpenJDK 和 GraalVM 虽然都废弃了传统的 AOT 编译，但是两者都<strong>不约而同</strong>的探索 static-image 技术，OpenJDK 这边是 Leyden，GraalVM 那边是<a href=\"https://www.zhihu.com/question/274042223/answer/1270829173\">SubstrateVM</a>。不过我得吐槽一下。。Leyden 雷声大雨点小，截至目前(2021.8.12)还没有实际的动静，GraalVM 那边的 SubstrateVM 倒是做的风生水起。</p>\n"},{"title":"java的虚拟机","urlname":"bdigug","date":"2021-11-18T05:25:59.000Z","description":"testuxykdkfksdflakdflajdsfajdsf;ljasdlkfja;lksdfj;klajdf;lkajdflkjadsl;kfja;ldfadfasdfs","cover":"https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/img/default.jpg","_content":"\n<!-- 简介 -->\n\n每一行代码，都是美丽的诗句。\n\n<!-- more -->\n\n# 名称\n\njava 虚拟的优化\n\n# 原因\n\njava 虚拟机的不好\n","source":"_posts/yuque/java的虚拟机.md","raw":"---\ntitle: java的虚拟机\nurlname: bdigug\ndate: '2021-11-18 13:25:59 +0800'\ncategories: 技术\ntags: java\ndescription: testuxykdkfksdflakdflajdsfajdsf;ljasdlkfja;lksdfj;klajdf;lkajdflkjadsl;kfja;ldfadfasdfs\ncover:\n---\n\n<!-- 简介 -->\n\n每一行代码，都是美丽的诗句。\n\n<!-- more -->\n\n# 名称\n\njava 虚拟的优化\n\n# 原因\n\njava 虚拟机的不好\n","slug":"yuque/java的虚拟机","published":1,"updated":"2021-11-18T05:47:25.083Z","_id":"ckw4j4bgz00053m3kdb6z2ccm","comments":1,"layout":"post","photos":[],"link":"","content":"<!-- 简介 -->\n\n<p>每一行代码，都是美丽的诗句。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"名称\"><a href=\"#名称\" class=\"headerlink\" title=\"名称\"></a>名称</h1><p>java 虚拟的优化</p>\n<h1 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h1><p>java 虚拟机的不好</p>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"excerpt":"<!-- 简介 -->\n\n<p>每一行代码，都是美丽的诗句。</p>","more":"<h1 id=\"名称\"><a href=\"#名称\" class=\"headerlink\" title=\"名称\"></a>名称</h1><p>java 虚拟的优化</p>\n<h1 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h1><p>java 虚拟机的不好</p>"},{"title":"三大难","urlname":"gcsgvr","date":"2021-11-08T08:45:12.000Z","_content":"\n重构\n​\n\n改造和优化\n迁移\n","source":"_posts/yuque/三大难.md","raw":"---\ntitle: 三大难\nurlname: gcsgvr\ndate: '2021-11-08 16:45:12 +0800'\ntags: []\ncategories: []\n---\n\n重构\n​\n\n改造和优化\n迁移\n","slug":"yuque/三大难","published":1,"updated":"2021-11-18T05:44:27.029Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckw4j4bh100073m3k3twqcc55","content":"<p>重构<br>​</p>\n<p>改造和优化<br>迁移</p>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/img/default.jpg","excerpt":"","more":"<p>重构<br>​</p>\n<p>改造和优化<br>迁移</p>\n"},{"title":"微服务","urlname":"fg1q5y","date":"2021-09-12T10:42:53.000Z","_content":"\n不能把系统问题（用微服务解决系统可用性）。 带给业务\n","source":"_posts/yuque/微服务.md","raw":"---\ntitle: 微服务\nurlname: fg1q5y\ndate: '2021-09-12 18:42:53 +0800'\ntags: []\ncategories: []\n---\n\n不能把系统问题（用微服务解决系统可用性）。 带给业务\n","slug":"yuque/微服务","published":1,"updated":"2021-11-18T05:44:27.489Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckw4j4bh6000b3m3khn0zf6m8","content":"<p>不能把系统问题（用微服务解决系统可用性）。 带给业务</p>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/img/default.jpg","excerpt":"","more":"<p>不能把系统问题（用微服务解决系统可用性）。 带给业务</p>\n"},{"title":"技术","urlname":"oxs3xw","date":"2021-11-12T11:38:39.000Z","_content":"\n![](https://cdn.nlark.com/yuque/0/2021/jpeg/86384/1637128365460-352ce440-eea4-4092-8090-65c63c71bd6d.jpeg#id=dD1Co&originHeight=5750&originWidth=3648&originalType=binary∶=1&status=done&style=none)\n","source":"_posts/yuque/技术.md","raw":"---\ntitle: 技术\nurlname: oxs3xw\ndate: '2021-11-12 19:38:39 +0800'\ntags: []\ncategories: []\n---\n\n![](https://cdn.nlark.com/yuque/0/2021/jpeg/86384/1637128365460-352ce440-eea4-4092-8090-65c63c71bd6d.jpeg#id=dD1Co&originHeight=5750&originWidth=3648&originalType=binary∶=1&status=done&style=none)\n","slug":"yuque/技术","published":1,"updated":"2021-11-18T05:44:27.023Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckw4j4bh9000d3m3kgwnd2yt4","content":"<p><img src=\"https://cdn.nlark.com/yuque/0/2021/jpeg/86384/1637128365460-352ce440-eea4-4092-8090-65c63c71bd6d.jpeg#id=dD1Co&originHeight=5750&originWidth=3648&originalType=binary%E2%88%B6=1&status=done&style=none\"></p>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/img/default.jpg","excerpt":"","more":"<p><img src=\"https://cdn.nlark.com/yuque/0/2021/jpeg/86384/1637128365460-352ce440-eea4-4092-8090-65c63c71bd6d.jpeg#id=dD1Co&originHeight=5750&originWidth=3648&originalType=binary%E2%88%B6=1&status=done&style=none\"></p>\n"},{"title":"稳定性","urlname":"iphtyg","date":"2021-09-16T10:45:05.000Z","_content":"\n扩展性 （架构与业务能力）\n​\n\n可运营&高性能  \n​\n\n​\n","source":"_posts/yuque/稳定性.md","raw":"---\ntitle: 稳定性\nurlname: iphtyg\ndate: '2021-09-16 18:45:05 +0800'\ntags: []\ncategories: []\n---\n\n扩展性 （架构与业务能力）\n​\n\n可运营&高性能  \n​\n\n​\n","slug":"yuque/稳定性","published":1,"updated":"2021-11-18T05:44:27.480Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckw4j4bhb000f3m3kghg02ckl","content":"<p>扩展性 （架构与业务能力）<br>​</p>\n<p>可运营&amp;高性能<br>​</p>\n<p>​</p>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/img/default.jpg","excerpt":"","more":"<p>扩展性 （架构与业务能力）<br>​</p>\n<p>可运营&amp;高性能<br>​</p>\n<p>​</p>\n"},{"title":"前端","urlname":"bbmzgk","date":"2021-11-08T08:44:52.000Z","_content":"\n[https://mp.weixin.qq.com/s/5Ir7EoHLo37bs6W5WNa-Tw](https://mp.weixin.qq.com/s/5Ir7EoHLo37bs6W5WNa-Tw)\n[https://www.thoughtworks.com/zh-cn/radar/techniques/jamstack](https://www.thoughtworks.com/zh-cn/radar/techniques/jamstack)\n[https://www.yuque.com/mdh/weekly/fq162w](https://www.yuque.com/mdh/weekly/fq162w)\n[https://modernjs.dev/](https://modernjs.dev/)\n[https://ourai.ws/](https://ourai.ws/)\n[https://mp.weixin.qq.com/s/K4r31sDS2cUUoZ8gMy5KKw](https://mp.weixin.qq.com/s/K4r31sDS2cUUoZ8gMy5KKw)\n[https://mp.weixin.qq.com/s/BRKla_vnZi9YCsFNo2H97w](https://mp.weixin.qq.com/s/BRKla_vnZi9YCsFNo2H97w)\n[https://mp.weixin.qq.com/s/M9zdo0xKf4WjOZ-2EehM2A](https://mp.weixin.qq.com/s/M9zdo0xKf4WjOZ-2EehM2A)\n[https://mp.weixin.qq.com/s?\\_\\_biz=Mzg2NDAwMjM1NQ==∣=2247484566&idx=1&sn=9dcd1d99df1aeef9e14b8fc8315c08dd&chksm=ce714ccaf906c5dc143e9301acdbeab1a8c3c8867066f64a0606cd7511f317b2b02d7e49a22a&token=678376780⟨=zh_CN#rd](https://mp.weixin.qq.com/s?__biz=Mzg2NDAwMjM1NQ==∣=2247484566&idx=1&sn=9dcd1d99df1aeef9e14b8fc8315c08dd&chksm=ce714ccaf906c5dc143e9301acdbeab1a8c3c8867066f64a0606cd7511f317b2b02d7e49a22a&token=678376780⟨=zh_CN#rd)\n​\n\n[https://zhuanlan.zhihu.com/p/426707646?hmsr=toutiao.io&utm_campaign=toutiao.io&utm_medium=toutiao.io&utm_source=toutiao.io](https://zhuanlan.zhihu.com/p/426707646?hmsr=toutiao.io&utm_campaign=toutiao.io&utm_medium=toutiao.io&utm_source=toutiao.io)\n​\n","source":"_posts/yuque/前端.md","raw":"---\ntitle: 前端\nurlname: bbmzgk\ndate: '2021-11-08 16:44:52 +0800'\ntags: []\ncategories: []\n---\n\n[https://mp.weixin.qq.com/s/5Ir7EoHLo37bs6W5WNa-Tw](https://mp.weixin.qq.com/s/5Ir7EoHLo37bs6W5WNa-Tw)\n[https://www.thoughtworks.com/zh-cn/radar/techniques/jamstack](https://www.thoughtworks.com/zh-cn/radar/techniques/jamstack)\n[https://www.yuque.com/mdh/weekly/fq162w](https://www.yuque.com/mdh/weekly/fq162w)\n[https://modernjs.dev/](https://modernjs.dev/)\n[https://ourai.ws/](https://ourai.ws/)\n[https://mp.weixin.qq.com/s/K4r31sDS2cUUoZ8gMy5KKw](https://mp.weixin.qq.com/s/K4r31sDS2cUUoZ8gMy5KKw)\n[https://mp.weixin.qq.com/s/BRKla_vnZi9YCsFNo2H97w](https://mp.weixin.qq.com/s/BRKla_vnZi9YCsFNo2H97w)\n[https://mp.weixin.qq.com/s/M9zdo0xKf4WjOZ-2EehM2A](https://mp.weixin.qq.com/s/M9zdo0xKf4WjOZ-2EehM2A)\n[https://mp.weixin.qq.com/s?\\_\\_biz=Mzg2NDAwMjM1NQ==∣=2247484566&idx=1&sn=9dcd1d99df1aeef9e14b8fc8315c08dd&chksm=ce714ccaf906c5dc143e9301acdbeab1a8c3c8867066f64a0606cd7511f317b2b02d7e49a22a&token=678376780⟨=zh_CN#rd](https://mp.weixin.qq.com/s?__biz=Mzg2NDAwMjM1NQ==∣=2247484566&idx=1&sn=9dcd1d99df1aeef9e14b8fc8315c08dd&chksm=ce714ccaf906c5dc143e9301acdbeab1a8c3c8867066f64a0606cd7511f317b2b02d7e49a22a&token=678376780⟨=zh_CN#rd)\n​\n\n[https://zhuanlan.zhihu.com/p/426707646?hmsr=toutiao.io&utm_campaign=toutiao.io&utm_medium=toutiao.io&utm_source=toutiao.io](https://zhuanlan.zhihu.com/p/426707646?hmsr=toutiao.io&utm_campaign=toutiao.io&utm_medium=toutiao.io&utm_source=toutiao.io)\n​\n","slug":"yuque/前端","published":1,"updated":"2021-11-18T05:44:27.038Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckw4j4bhe000k3m3kh1krh91x","content":"<p><a href=\"https://mp.weixin.qq.com/s/5Ir7EoHLo37bs6W5WNa-Tw\">https://mp.weixin.qq.com/s/5Ir7EoHLo37bs6W5WNa-Tw</a><br><a href=\"https://www.thoughtworks.com/zh-cn/radar/techniques/jamstack\">https://www.thoughtworks.com/zh-cn/radar/techniques/jamstack</a><br><a href=\"https://www.yuque.com/mdh/weekly/fq162w\">https://www.yuque.com/mdh/weekly/fq162w</a><br><a href=\"https://modernjs.dev/\">https://modernjs.dev/</a><br><a href=\"https://ourai.ws/\">https://ourai.ws/</a><br><a href=\"https://mp.weixin.qq.com/s/K4r31sDS2cUUoZ8gMy5KKw\">https://mp.weixin.qq.com/s/K4r31sDS2cUUoZ8gMy5KKw</a><br><a href=\"https://mp.weixin.qq.com/s/BRKla_vnZi9YCsFNo2H97w\">https://mp.weixin.qq.com/s/BRKla_vnZi9YCsFNo2H97w</a><br><a href=\"https://mp.weixin.qq.com/s/M9zdo0xKf4WjOZ-2EehM2A\">https://mp.weixin.qq.com/s/M9zdo0xKf4WjOZ-2EehM2A</a><br><a href=\"https://mp.weixin.qq.com/s?__biz=Mzg2NDAwMjM1NQ==%E2%88%A3=2247484566&idx=1&sn=9dcd1d99df1aeef9e14b8fc8315c08dd&chksm=ce714ccaf906c5dc143e9301acdbeab1a8c3c8867066f64a0606cd7511f317b2b02d7e49a22a&token=678376780%E2%9F%A8=zh_CN#rd\">https://mp.weixin.qq.com/s?__biz=Mzg2NDAwMjM1NQ==∣=2247484566&amp;idx=1&amp;sn=9dcd1d99df1aeef9e14b8fc8315c08dd&amp;chksm=ce714ccaf906c5dc143e9301acdbeab1a8c3c8867066f64a0606cd7511f317b2b02d7e49a22a&amp;token=678376780⟨=zh_CN#rd</a><br>​</p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/426707646?hmsr=toutiao.io&utm_campaign=toutiao.io&utm_medium=toutiao.io&utm_source=toutiao.io\">https://zhuanlan.zhihu.com/p/426707646?hmsr=toutiao.io&amp;utm_campaign=toutiao.io&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io</a><br>​</p>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/img/default.jpg","excerpt":"","more":"<p><a href=\"https://mp.weixin.qq.com/s/5Ir7EoHLo37bs6W5WNa-Tw\">https://mp.weixin.qq.com/s/5Ir7EoHLo37bs6W5WNa-Tw</a><br><a href=\"https://www.thoughtworks.com/zh-cn/radar/techniques/jamstack\">https://www.thoughtworks.com/zh-cn/radar/techniques/jamstack</a><br><a href=\"https://www.yuque.com/mdh/weekly/fq162w\">https://www.yuque.com/mdh/weekly/fq162w</a><br><a href=\"https://modernjs.dev/\">https://modernjs.dev/</a><br><a href=\"https://ourai.ws/\">https://ourai.ws/</a><br><a href=\"https://mp.weixin.qq.com/s/K4r31sDS2cUUoZ8gMy5KKw\">https://mp.weixin.qq.com/s/K4r31sDS2cUUoZ8gMy5KKw</a><br><a href=\"https://mp.weixin.qq.com/s/BRKla_vnZi9YCsFNo2H97w\">https://mp.weixin.qq.com/s/BRKla_vnZi9YCsFNo2H97w</a><br><a href=\"https://mp.weixin.qq.com/s/M9zdo0xKf4WjOZ-2EehM2A\">https://mp.weixin.qq.com/s/M9zdo0xKf4WjOZ-2EehM2A</a><br><a href=\"https://mp.weixin.qq.com/s?__biz=Mzg2NDAwMjM1NQ==%E2%88%A3=2247484566&idx=1&sn=9dcd1d99df1aeef9e14b8fc8315c08dd&chksm=ce714ccaf906c5dc143e9301acdbeab1a8c3c8867066f64a0606cd7511f317b2b02d7e49a22a&token=678376780%E2%9F%A8=zh_CN#rd\">https://mp.weixin.qq.com/s?__biz=Mzg2NDAwMjM1NQ==∣=2247484566&amp;idx=1&amp;sn=9dcd1d99df1aeef9e14b8fc8315c08dd&amp;chksm=ce714ccaf906c5dc143e9301acdbeab1a8c3c8867066f64a0606cd7511f317b2b02d7e49a22a&amp;token=678376780⟨=zh_CN#rd</a><br>​</p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/426707646?hmsr=toutiao.io&utm_campaign=toutiao.io&utm_medium=toutiao.io&utm_source=toutiao.io\">https://zhuanlan.zhihu.com/p/426707646?hmsr=toutiao.io&amp;utm_campaign=toutiao.io&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io</a><br>​</p>\n"},{"title":"GitHub 提交代码时 emoji 表情的使用","author":"风渡巛","top":false,"cover":"https://b3logfile.com/siyuan/1610205759005/assets/image-20211004232022-yqx105q.png","toc":true,"abbrlink":"b8c8","swiper_index":1,"date":"2021-08-11T14:01:46.000Z","description":"执行 `git commit` 时使用 emoji 为本次提交打上一个 “标签”， 使得此次 commit 的主要工作得到凸现，提高阅读体验，同时也能够当作标签功能使得其在整个提交历史中易于区分与查找。","_content":"\n> 🌏Reference\n>\n> * [gitmoji | An emoji guide for your commit messages](https://gitmoji.dev/?utm_source=ld246.com)\n> * [🔨 [git]: Write better commits with Gitmoji - DEV Community](https://dev.to/javidjms/git-write-better-commits-with-gitmoji-3193)\n> * [用 emoji 表情提交代码指南 · Issue #71 · Kimi-Gao/Program-Blog (github.com)](https://github.com/Kimi-Gao/Program-Blog/issues/71)\n>\n![](https://b3logfile.com/siyuan/1610205759005/assets/image-20210921211205-remwfyi.png)\n\n一条标准的 git commit 应该为\n\n```bash\n<type> [scope]: \"Message\"\n```\n\n**type** must be one of the following mentioned below :\n\n* <build>: Build related changes (eg: npm related/ adding external dependencies)\n* <chore>: A code change that external user won't see (eg: change to .gitignore)\n* <docs>: Documentation related changes\n* <feat>: Introduction of a new feature\n* <fix>: Resolve an issue directly linked to development (bugfixes)\n* <hotfix>: Resolve an issue directly linked to production (patches)\n* <test>: Add/Update test cases\n* <performance>: Add code that improves performance\n* <refactor>: Update for code for maintainability (clean code)\n\n**scope** is optional and must be a noun that represents the section of the codebase\n\n**Message** should be imperative and should describe the commit with a clear message/keywords.\n\nsuch as\n\n```markdown\nfeat(home, components): Add login button\nfeat(home, components): Add login modal\nfix(home, components): Resolve issue with modal collapses\nchore(home): Move icons folder\nfeat(newsletter): Add Newsletter component\nfeat(navbar): Add navbar container\n```\n\nNow we can replace the <type/> with an emoji :\n\n🎨 Improve structure / format of the code.\n\n⚡️ Improve performance.\n\n🔥 Remove code or files.\n\n🐛 Fix a bug.\n\n✨ Introduce new features.\n\n📝 Add or update documentation.\n\n🚀 Deploy stuff.\n\n💚 Fix CI Build.\n\n👷 Add or update CI build system.\n\n🔧 Add or update configuration files.\n\n🔨 Add or update development scripts.\n\n⚰️ Remove dead code.\n\nExample of commits :\n\n```markdown\n✨ (home, components): Add login button\n✨ (home, components): Add login modal\n🐛 (home, components): Resolve issue with modal collapses\n🚚 (home): Move icons folder\n✨ (newsletter): Add Newsletter component\n✨ (navbar): Add navbar container\n🔥 (navbar): Remove old navbar file\n✅ (home): Add login test case\n🎨 (home, component): Improve login modal\n📦️ (npm): Add react-table\n🔨 Update script start-server.js\n```\n\n比较专业的 github repo 都会使用 gitmoji 进行管理 commit：执行 `git commit` 时使用 emoji 为本次提交打上一个 “标签”， 使得此次 commit 的主要工作得到凸现，提高阅读体验，同时也能够当作标签功能使得其在整个提交历史中易于区分与查找。\n\n| emoji | emoji 代码                    | commit 说明                                                   |\n| :---- | :---------------------------- | :------------------------------------------------------------ |\n| 🔖    | `:bookmark:`                  | **Release / Version tags.**                                   |\n| 📝    | `:memo:`                      | **Add or update documentation.**                              |\n| ✏️  | `:pencil2:`                   | Fix typos.                                                    |\n| 📄    | `:page_facing_up:`            | Add or update license                                         |\n| ✨    | `:sparkles:`                  | Introduce new features.                                       |\n| 🎉    | `:tada:`                      | Begin a project.                                              |\n| 💥    | `:boom:`                      | Introduce breaking changes.                                   |\n| 🎨    | `:art:`                       | **Improve structure / format of the code.**                   |\n| ⚡️  | `:zap:`                       | Improve performance.                                          |\n| 🐛    | `:bug:`                       | **Fix a bug.**                                                |\n| 🚑    | `:ambulance:`                 | Critical hotfix.                                              |\n| 💡    | `:bulb:`                      | Add or update comments in source code                         |\n| 🔥    | `:fire:`                      | **Remove code or files.**                                     |\n| 🗑️  | `:wastebasket:`               | Deprecate code that needs to be cleaned up.。                 |\n| 🚚    | `:truck:`                     | Move or rename resources (e.g.: files, paths, routes).        |\n| 💩    | `:poop:`                      | Write bad code that needs to be improved.                     |\n| ⚰️  | `:coffin:`<br />                    | Remove dead code.                                             |\n| 📸    | `:camera_flash:`<br />              | Add or update snapshots.                                      |\n| 💄    | `:lipstick:`                  | Add or update the UI and style files.                         |\n| 💫    | `:dizzy:`                     | Add or update animations and transitions.                     |\n| 🍱    | `:bento:`                     | Add or update assets.                                         |\n| 🙈    | `:see_no_evil:`               | Add or update a .gitignore file.                              |\n| ⏪️  | `:rewind:`                    | Revert changes                                                |\n| 🔀    | `:twisted_rightwards_arrows:` | Merge branches.                                               |\n| 🔧    | `:wrench:`                    | **Add or update configuration files.**                        |\n| 🚀    | `:rocket:`                    | Deploy stuff.                                                 |\n| 🚨    | `:rotating_light:`            | Fix compiler / linter warnings.                               |\n| 🚧    | `:construction:`              | Work in progress.                                             |\n| ✅    | `:white_check_mark:`          | Add, update, or pass tests.                                   |\n| 💬    | `:speech_balloon:`            | Add or update text and literals.                              |\n| 🍻    | `:beers:`                     | Write code drunkenly.                                         |\n| 👽️  | `:alien:`                     | Update code due to external API changes.                      |\n| 🔨    | `:hammer:`                    | Add or update development scripts.                            |\n| 🔒    | `:lock:`                      | Fix security issues.                                          |\n| 🏁    | `:checked_flag:`              | 修复 Windows 下的问题                                         |\n| 🍎    | `:apple:`                     | 修复 macOS 下的问题                                           |\n| 🐧    | `:penguin:`                   | 修复 Linux 下的问题                                           |\n| 🐳    | `:whale:`                     | Docker 相关工作                                               |\n| ♻️  | `:recycle:`                   | Refactor code                                                 |\n| 👷    | `:construction_worker:`       | Add or update CI build system.                                |\n| 💚    | `:green_heart:`               | fix CI Build.                                                 |\n| 📈    | `:chart_with_upwards_trend:`  | Add or update analytics or track code                         |\n| ⬆️  | `:arrow_up:`                  | 升级依赖                                                      |\n| ⬇️  | `:arrow_down:`                | 降级依赖                                                      |\n| ➕    | `:heavy_plug_sign:`           | Add a dependency.                                             |\n| ➖    | `:heavy_minus_sign:`          | Remove a dependency.                                          |\n| 📌    | `:pushpin:`                   | Pin dependencies to specific versions                         |\n| 🌐    | `:globe_with_meridians:`      | Internationalization and localization.                        |\n| 🧪    | `:test_tube:`                 | Add a failing test.                                           |\n| 👔    | `:necktie:`<br />                   | Add or update business logic                                  |\n| 🧐    | `:monocle_face:`<br />              | Data exploration/inspection.                                  |\n| 🩹    | `:adhesive_bandage:`          | Simple fix for a non-critical issue.                          |\n| 🛂    | `:passport_control:`          | Work on code related to authorization, roles and permissions. |\n| 🥅    | `:goal_net:`                  | Catch errors.                                                 |\n| 🚩    | `:triangular_flag_on_post:`   | Add, update, or remove feature flags.                         |\n| 🌱    | `:seedling:`                  | Add or update seed files.                                     |\n| 🏷️  | `:label:`                     | Add or update types.                                          |\n| 🔍️  | `:mag:`                       | Improve SEO.                                                  |\n| ⚗️  | `:alembic:`                   | Perform experiments.                                          |\n| 🥚    | `:egg:`                       | Add or update an easter egg.                                  |\n| 🤡    | `:clown_face:`                | Mock things.                                                  |\n| 📱    | `:iphone:`                    | Work on responsive design                                     |\n| 🏗️  | `:building_construction:`     | Make architectural changes.                                   |\n| 🚸    | `:children_crossing:`         | Improve user experience / usability.                          |\n| 👥    | `:busts_in_silhouette:`       | Add or update contributor(s).                                 |\n| 🔇    | `:mute:`                      | Remove logs.                                                  |\n| 🔊    | `:loud_sound:`                | Add or update logs.                                           |\n| 🗃️  | `:card_file_box:`             | Perform database related changes.                             |\n| ♿️  | `:wheelchair:`                | Improve accessibility.                                        |\n| 📦️  | `:package:`                   | Add or update compiled files or packages.                     |\n\n一些工具\n\n","source":"_posts/yuque/缓存的方案.md","raw":"---\ntitle: GitHub 提交代码时 emoji 表情的使用\nauthor: 风渡巛\ntop: false\ncover: https://b3logfile.com/siyuan/1610205759005/assets/image-20211004232022-yqx105q.png\ntoc: true\ncategories: 折腾致死\nabbrlink: b8c8\nswiper_index: 1\ndate: 2021-08-11 22:01:46\ndescription: 执行 `git commit` 时使用 emoji 为本次提交打上一个 “标签”， 使得此次 commit 的主要工作得到凸现，提高阅读体验，同时也能够当作标签功能使得其在整个提交历史中易于区分与查找。\ntags: Github\n---\n\n> 🌏Reference\n>\n> * [gitmoji | An emoji guide for your commit messages](https://gitmoji.dev/?utm_source=ld246.com)\n> * [🔨 [git]: Write better commits with Gitmoji - DEV Community](https://dev.to/javidjms/git-write-better-commits-with-gitmoji-3193)\n> * [用 emoji 表情提交代码指南 · Issue #71 · Kimi-Gao/Program-Blog (github.com)](https://github.com/Kimi-Gao/Program-Blog/issues/71)\n>\n![](https://b3logfile.com/siyuan/1610205759005/assets/image-20210921211205-remwfyi.png)\n\n一条标准的 git commit 应该为\n\n```bash\n<type> [scope]: \"Message\"\n```\n\n**type** must be one of the following mentioned below :\n\n* <build>: Build related changes (eg: npm related/ adding external dependencies)\n* <chore>: A code change that external user won't see (eg: change to .gitignore)\n* <docs>: Documentation related changes\n* <feat>: Introduction of a new feature\n* <fix>: Resolve an issue directly linked to development (bugfixes)\n* <hotfix>: Resolve an issue directly linked to production (patches)\n* <test>: Add/Update test cases\n* <performance>: Add code that improves performance\n* <refactor>: Update for code for maintainability (clean code)\n\n**scope** is optional and must be a noun that represents the section of the codebase\n\n**Message** should be imperative and should describe the commit with a clear message/keywords.\n\nsuch as\n\n```markdown\nfeat(home, components): Add login button\nfeat(home, components): Add login modal\nfix(home, components): Resolve issue with modal collapses\nchore(home): Move icons folder\nfeat(newsletter): Add Newsletter component\nfeat(navbar): Add navbar container\n```\n\nNow we can replace the <type/> with an emoji :\n\n🎨 Improve structure / format of the code.\n\n⚡️ Improve performance.\n\n🔥 Remove code or files.\n\n🐛 Fix a bug.\n\n✨ Introduce new features.\n\n📝 Add or update documentation.\n\n🚀 Deploy stuff.\n\n💚 Fix CI Build.\n\n👷 Add or update CI build system.\n\n🔧 Add or update configuration files.\n\n🔨 Add or update development scripts.\n\n⚰️ Remove dead code.\n\nExample of commits :\n\n```markdown\n✨ (home, components): Add login button\n✨ (home, components): Add login modal\n🐛 (home, components): Resolve issue with modal collapses\n🚚 (home): Move icons folder\n✨ (newsletter): Add Newsletter component\n✨ (navbar): Add navbar container\n🔥 (navbar): Remove old navbar file\n✅ (home): Add login test case\n🎨 (home, component): Improve login modal\n📦️ (npm): Add react-table\n🔨 Update script start-server.js\n```\n\n比较专业的 github repo 都会使用 gitmoji 进行管理 commit：执行 `git commit` 时使用 emoji 为本次提交打上一个 “标签”， 使得此次 commit 的主要工作得到凸现，提高阅读体验，同时也能够当作标签功能使得其在整个提交历史中易于区分与查找。\n\n| emoji | emoji 代码                    | commit 说明                                                   |\n| :---- | :---------------------------- | :------------------------------------------------------------ |\n| 🔖    | `:bookmark:`                  | **Release / Version tags.**                                   |\n| 📝    | `:memo:`                      | **Add or update documentation.**                              |\n| ✏️  | `:pencil2:`                   | Fix typos.                                                    |\n| 📄    | `:page_facing_up:`            | Add or update license                                         |\n| ✨    | `:sparkles:`                  | Introduce new features.                                       |\n| 🎉    | `:tada:`                      | Begin a project.                                              |\n| 💥    | `:boom:`                      | Introduce breaking changes.                                   |\n| 🎨    | `:art:`                       | **Improve structure / format of the code.**                   |\n| ⚡️  | `:zap:`                       | Improve performance.                                          |\n| 🐛    | `:bug:`                       | **Fix a bug.**                                                |\n| 🚑    | `:ambulance:`                 | Critical hotfix.                                              |\n| 💡    | `:bulb:`                      | Add or update comments in source code                         |\n| 🔥    | `:fire:`                      | **Remove code or files.**                                     |\n| 🗑️  | `:wastebasket:`               | Deprecate code that needs to be cleaned up.。                 |\n| 🚚    | `:truck:`                     | Move or rename resources (e.g.: files, paths, routes).        |\n| 💩    | `:poop:`                      | Write bad code that needs to be improved.                     |\n| ⚰️  | `:coffin:`<br />                    | Remove dead code.                                             |\n| 📸    | `:camera_flash:`<br />              | Add or update snapshots.                                      |\n| 💄    | `:lipstick:`                  | Add or update the UI and style files.                         |\n| 💫    | `:dizzy:`                     | Add or update animations and transitions.                     |\n| 🍱    | `:bento:`                     | Add or update assets.                                         |\n| 🙈    | `:see_no_evil:`               | Add or update a .gitignore file.                              |\n| ⏪️  | `:rewind:`                    | Revert changes                                                |\n| 🔀    | `:twisted_rightwards_arrows:` | Merge branches.                                               |\n| 🔧    | `:wrench:`                    | **Add or update configuration files.**                        |\n| 🚀    | `:rocket:`                    | Deploy stuff.                                                 |\n| 🚨    | `:rotating_light:`            | Fix compiler / linter warnings.                               |\n| 🚧    | `:construction:`              | Work in progress.                                             |\n| ✅    | `:white_check_mark:`          | Add, update, or pass tests.                                   |\n| 💬    | `:speech_balloon:`            | Add or update text and literals.                              |\n| 🍻    | `:beers:`                     | Write code drunkenly.                                         |\n| 👽️  | `:alien:`                     | Update code due to external API changes.                      |\n| 🔨    | `:hammer:`                    | Add or update development scripts.                            |\n| 🔒    | `:lock:`                      | Fix security issues.                                          |\n| 🏁    | `:checked_flag:`              | 修复 Windows 下的问题                                         |\n| 🍎    | `:apple:`                     | 修复 macOS 下的问题                                           |\n| 🐧    | `:penguin:`                   | 修复 Linux 下的问题                                           |\n| 🐳    | `:whale:`                     | Docker 相关工作                                               |\n| ♻️  | `:recycle:`                   | Refactor code                                                 |\n| 👷    | `:construction_worker:`       | Add or update CI build system.                                |\n| 💚    | `:green_heart:`               | fix CI Build.                                                 |\n| 📈    | `:chart_with_upwards_trend:`  | Add or update analytics or track code                         |\n| ⬆️  | `:arrow_up:`                  | 升级依赖                                                      |\n| ⬇️  | `:arrow_down:`                | 降级依赖                                                      |\n| ➕    | `:heavy_plug_sign:`           | Add a dependency.                                             |\n| ➖    | `:heavy_minus_sign:`          | Remove a dependency.                                          |\n| 📌    | `:pushpin:`                   | Pin dependencies to specific versions                         |\n| 🌐    | `:globe_with_meridians:`      | Internationalization and localization.                        |\n| 🧪    | `:test_tube:`                 | Add a failing test.                                           |\n| 👔    | `:necktie:`<br />                   | Add or update business logic                                  |\n| 🧐    | `:monocle_face:`<br />              | Data exploration/inspection.                                  |\n| 🩹    | `:adhesive_bandage:`          | Simple fix for a non-critical issue.                          |\n| 🛂    | `:passport_control:`          | Work on code related to authorization, roles and permissions. |\n| 🥅    | `:goal_net:`                  | Catch errors.                                                 |\n| 🚩    | `:triangular_flag_on_post:`   | Add, update, or remove feature flags.                         |\n| 🌱    | `:seedling:`                  | Add or update seed files.                                     |\n| 🏷️  | `:label:`                     | Add or update types.                                          |\n| 🔍️  | `:mag:`                       | Improve SEO.                                                  |\n| ⚗️  | `:alembic:`                   | Perform experiments.                                          |\n| 🥚    | `:egg:`                       | Add or update an easter egg.                                  |\n| 🤡    | `:clown_face:`                | Mock things.                                                  |\n| 📱    | `:iphone:`                    | Work on responsive design                                     |\n| 🏗️  | `:building_construction:`     | Make architectural changes.                                   |\n| 🚸    | `:children_crossing:`         | Improve user experience / usability.                          |\n| 👥    | `:busts_in_silhouette:`       | Add or update contributor(s).                                 |\n| 🔇    | `:mute:`                      | Remove logs.                                                  |\n| 🔊    | `:loud_sound:`                | Add or update logs.                                           |\n| 🗃️  | `:card_file_box:`             | Perform database related changes.                             |\n| ♿️  | `:wheelchair:`                | Improve accessibility.                                        |\n| 📦️  | `:package:`                   | Add or update compiled files or packages.                     |\n\n一些工具\n\n","slug":"yuque/缓存的方案","published":1,"updated":"2021-11-18T05:54:10.181Z","_id":"ckw4j4bhf000l3m3k0zn6egzg","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>🌏Reference</p>\n<ul>\n<li><a href=\"https://gitmoji.dev/?utm_source=ld246.com\">gitmoji | An emoji guide for your commit messages</a></li>\n<li><a href=\"https://dev.to/javidjms/git-write-better-commits-with-gitmoji-3193\">🔨 [git]: Write better commits with Gitmoji - DEV Community</a></li>\n<li><a href=\"https://github.com/Kimi-Gao/Program-Blog/issues/71\">用 emoji 表情提交代码指南 · Issue #71 · Kimi-Gao/Program-Blog (github.com)</a></li>\n</ul>\n</blockquote>\n<p><img src=\"https://b3logfile.com/siyuan/1610205759005/assets/image-20210921211205-remwfyi.png\"></p>\n<p>一条标准的 git commit 应该为</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"built_in\">type</span>&gt; [scope]: <span class=\"string\">&quot;Message&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>type</strong> must be one of the following mentioned below :</p>\n<ul>\n<li><build>: Build related changes (eg: npm related/ adding external dependencies)</li>\n<li><chore>: A code change that external user won’t see (eg: change to .gitignore)</li>\n<li><docs>: Documentation related changes</li>\n<li><feat>: Introduction of a new feature</li>\n<li><fix>: Resolve an issue directly linked to development (bugfixes)</li>\n<li><hotfix>: Resolve an issue directly linked to production (patches)</li>\n<li><test>: Add/Update test cases</li>\n<li><performance>: Add code that improves performance</li>\n<li><refactor>: Update for code for maintainability (clean code)</li>\n</ul>\n<p><strong>scope</strong> is optional and must be a noun that represents the section of the codebase</p>\n<p><strong>Message</strong> should be imperative and should describe the commit with a clear message/keywords.</p>\n<p>such as</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">feat(home, components): Add login button</span><br><span class=\"line\">feat(home, components): Add login modal</span><br><span class=\"line\">fix(home, components): Resolve issue with modal collapses</span><br><span class=\"line\">chore(home): Move icons folder</span><br><span class=\"line\">feat(newsletter): Add Newsletter component</span><br><span class=\"line\">feat(navbar): Add navbar container</span><br></pre></td></tr></table></figure>\n\n<p>Now we can replace the <type/> with an emoji :</p>\n<p>🎨 Improve structure / format of the code.</p>\n<p>⚡️ Improve performance.</p>\n<p>🔥 Remove code or files.</p>\n<p>🐛 Fix a bug.</p>\n<p>✨ Introduce new features.</p>\n<p>📝 Add or update documentation.</p>\n<p>🚀 Deploy stuff.</p>\n<p>💚 Fix CI Build.</p>\n<p>👷 Add or update CI build system.</p>\n<p>🔧 Add or update configuration files.</p>\n<p>🔨 Add or update development scripts.</p>\n<p>⚰️ Remove dead code.</p>\n<p>Example of commits :</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">✨ (home, components): Add login button</span><br><span class=\"line\">✨ (home, components): Add login modal</span><br><span class=\"line\">🐛 (home, components): Resolve issue with modal collapses</span><br><span class=\"line\">🚚 (home): Move icons folder</span><br><span class=\"line\">✨ (newsletter): Add Newsletter component</span><br><span class=\"line\">✨ (navbar): Add navbar container</span><br><span class=\"line\">🔥 (navbar): Remove old navbar file</span><br><span class=\"line\">✅ (home): Add login test case</span><br><span class=\"line\">🎨 (home, component): Improve login modal</span><br><span class=\"line\">📦️ (npm): Add react-table</span><br><span class=\"line\">🔨 Update script start-server.js</span><br></pre></td></tr></table></figure>\n\n<p>比较专业的 github repo 都会使用 gitmoji 进行管理 commit：执行 <code>git commit</code> 时使用 emoji 为本次提交打上一个 “标签”， 使得此次 commit 的主要工作得到凸现，提高阅读体验，同时也能够当作标签功能使得其在整个提交历史中易于区分与查找。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">emoji</th>\n<th align=\"left\">emoji 代码</th>\n<th align=\"left\">commit 说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">🔖</td>\n<td align=\"left\"><code>:bookmark:</code></td>\n<td align=\"left\"><strong>Release / Version tags.</strong></td>\n</tr>\n<tr>\n<td align=\"left\">📝</td>\n<td align=\"left\"><code>:memo:</code></td>\n<td align=\"left\"><strong>Add or update documentation.</strong></td>\n</tr>\n<tr>\n<td align=\"left\">✏️</td>\n<td align=\"left\"><code>:pencil2:</code></td>\n<td align=\"left\">Fix typos.</td>\n</tr>\n<tr>\n<td align=\"left\">📄</td>\n<td align=\"left\"><code>:page_facing_up:</code></td>\n<td align=\"left\">Add or update license</td>\n</tr>\n<tr>\n<td align=\"left\">✨</td>\n<td align=\"left\"><code>:sparkles:</code></td>\n<td align=\"left\">Introduce new features.</td>\n</tr>\n<tr>\n<td align=\"left\">🎉</td>\n<td align=\"left\"><code>:tada:</code></td>\n<td align=\"left\">Begin a project.</td>\n</tr>\n<tr>\n<td align=\"left\">💥</td>\n<td align=\"left\"><code>:boom:</code></td>\n<td align=\"left\">Introduce breaking changes.</td>\n</tr>\n<tr>\n<td align=\"left\">🎨</td>\n<td align=\"left\"><code>:art:</code></td>\n<td align=\"left\"><strong>Improve structure / format of the code.</strong></td>\n</tr>\n<tr>\n<td align=\"left\">⚡️</td>\n<td align=\"left\"><code>:zap:</code></td>\n<td align=\"left\">Improve performance.</td>\n</tr>\n<tr>\n<td align=\"left\">🐛</td>\n<td align=\"left\"><code>:bug:</code></td>\n<td align=\"left\"><strong>Fix a bug.</strong></td>\n</tr>\n<tr>\n<td align=\"left\">🚑</td>\n<td align=\"left\"><code>:ambulance:</code></td>\n<td align=\"left\">Critical hotfix.</td>\n</tr>\n<tr>\n<td align=\"left\">💡</td>\n<td align=\"left\"><code>:bulb:</code></td>\n<td align=\"left\">Add or update comments in source code</td>\n</tr>\n<tr>\n<td align=\"left\">🔥</td>\n<td align=\"left\"><code>:fire:</code></td>\n<td align=\"left\"><strong>Remove code or files.</strong></td>\n</tr>\n<tr>\n<td align=\"left\">🗑️</td>\n<td align=\"left\"><code>:wastebasket:</code></td>\n<td align=\"left\">Deprecate code that needs to be cleaned up.。</td>\n</tr>\n<tr>\n<td align=\"left\">🚚</td>\n<td align=\"left\"><code>:truck:</code></td>\n<td align=\"left\">Move or rename resources (e.g.: files, paths, routes).</td>\n</tr>\n<tr>\n<td align=\"left\">💩</td>\n<td align=\"left\"><code>:poop:</code></td>\n<td align=\"left\">Write bad code that needs to be improved.</td>\n</tr>\n<tr>\n<td align=\"left\">⚰️</td>\n<td align=\"left\"><code>:coffin:</code><br /></td>\n<td align=\"left\">Remove dead code.</td>\n</tr>\n<tr>\n<td align=\"left\">📸</td>\n<td align=\"left\"><code>:camera_flash:</code><br /></td>\n<td align=\"left\">Add or update snapshots.</td>\n</tr>\n<tr>\n<td align=\"left\">💄</td>\n<td align=\"left\"><code>:lipstick:</code></td>\n<td align=\"left\">Add or update the UI and style files.</td>\n</tr>\n<tr>\n<td align=\"left\">💫</td>\n<td align=\"left\"><code>:dizzy:</code></td>\n<td align=\"left\">Add or update animations and transitions.</td>\n</tr>\n<tr>\n<td align=\"left\">🍱</td>\n<td align=\"left\"><code>:bento:</code></td>\n<td align=\"left\">Add or update assets.</td>\n</tr>\n<tr>\n<td align=\"left\">🙈</td>\n<td align=\"left\"><code>:see_no_evil:</code></td>\n<td align=\"left\">Add or update a .gitignore file.</td>\n</tr>\n<tr>\n<td align=\"left\">⏪️</td>\n<td align=\"left\"><code>:rewind:</code></td>\n<td align=\"left\">Revert changes</td>\n</tr>\n<tr>\n<td align=\"left\">🔀</td>\n<td align=\"left\"><code>:twisted_rightwards_arrows:</code></td>\n<td align=\"left\">Merge branches.</td>\n</tr>\n<tr>\n<td align=\"left\">🔧</td>\n<td align=\"left\"><code>:wrench:</code></td>\n<td align=\"left\"><strong>Add or update configuration files.</strong></td>\n</tr>\n<tr>\n<td align=\"left\">🚀</td>\n<td align=\"left\"><code>:rocket:</code></td>\n<td align=\"left\">Deploy stuff.</td>\n</tr>\n<tr>\n<td align=\"left\">🚨</td>\n<td align=\"left\"><code>:rotating_light:</code></td>\n<td align=\"left\">Fix compiler / linter warnings.</td>\n</tr>\n<tr>\n<td align=\"left\">🚧</td>\n<td align=\"left\"><code>:construction:</code></td>\n<td align=\"left\">Work in progress.</td>\n</tr>\n<tr>\n<td align=\"left\">✅</td>\n<td align=\"left\"><code>:white_check_mark:</code></td>\n<td align=\"left\">Add, update, or pass tests.</td>\n</tr>\n<tr>\n<td align=\"left\">💬</td>\n<td align=\"left\"><code>:speech_balloon:</code></td>\n<td align=\"left\">Add or update text and literals.</td>\n</tr>\n<tr>\n<td align=\"left\">🍻</td>\n<td align=\"left\"><code>:beers:</code></td>\n<td align=\"left\">Write code drunkenly.</td>\n</tr>\n<tr>\n<td align=\"left\">👽️</td>\n<td align=\"left\"><code>:alien:</code></td>\n<td align=\"left\">Update code due to external API changes.</td>\n</tr>\n<tr>\n<td align=\"left\">🔨</td>\n<td align=\"left\"><code>:hammer:</code></td>\n<td align=\"left\">Add or update development scripts.</td>\n</tr>\n<tr>\n<td align=\"left\">🔒</td>\n<td align=\"left\"><code>:lock:</code></td>\n<td align=\"left\">Fix security issues.</td>\n</tr>\n<tr>\n<td align=\"left\">🏁</td>\n<td align=\"left\"><code>:checked_flag:</code></td>\n<td align=\"left\">修复 Windows 下的问题</td>\n</tr>\n<tr>\n<td align=\"left\">🍎</td>\n<td align=\"left\"><code>:apple:</code></td>\n<td align=\"left\">修复 macOS 下的问题</td>\n</tr>\n<tr>\n<td align=\"left\">🐧</td>\n<td align=\"left\"><code>:penguin:</code></td>\n<td align=\"left\">修复 Linux 下的问题</td>\n</tr>\n<tr>\n<td align=\"left\">🐳</td>\n<td align=\"left\"><code>:whale:</code></td>\n<td align=\"left\">Docker 相关工作</td>\n</tr>\n<tr>\n<td align=\"left\">♻️</td>\n<td align=\"left\"><code>:recycle:</code></td>\n<td align=\"left\">Refactor code</td>\n</tr>\n<tr>\n<td align=\"left\">👷</td>\n<td align=\"left\"><code>:construction_worker:</code></td>\n<td align=\"left\">Add or update CI build system.</td>\n</tr>\n<tr>\n<td align=\"left\">💚</td>\n<td align=\"left\"><code>:green_heart:</code></td>\n<td align=\"left\">fix CI Build.</td>\n</tr>\n<tr>\n<td align=\"left\">📈</td>\n<td align=\"left\"><code>:chart_with_upwards_trend:</code></td>\n<td align=\"left\">Add or update analytics or track code</td>\n</tr>\n<tr>\n<td align=\"left\">⬆️</td>\n<td align=\"left\"><code>:arrow_up:</code></td>\n<td align=\"left\">升级依赖</td>\n</tr>\n<tr>\n<td align=\"left\">⬇️</td>\n<td align=\"left\"><code>:arrow_down:</code></td>\n<td align=\"left\">降级依赖</td>\n</tr>\n<tr>\n<td align=\"left\">➕</td>\n<td align=\"left\"><code>:heavy_plug_sign:</code></td>\n<td align=\"left\">Add a dependency.</td>\n</tr>\n<tr>\n<td align=\"left\">➖</td>\n<td align=\"left\"><code>:heavy_minus_sign:</code></td>\n<td align=\"left\">Remove a dependency.</td>\n</tr>\n<tr>\n<td align=\"left\">📌</td>\n<td align=\"left\"><code>:pushpin:</code></td>\n<td align=\"left\">Pin dependencies to specific versions</td>\n</tr>\n<tr>\n<td align=\"left\">🌐</td>\n<td align=\"left\"><code>:globe_with_meridians:</code></td>\n<td align=\"left\">Internationalization and localization.</td>\n</tr>\n<tr>\n<td align=\"left\">🧪</td>\n<td align=\"left\"><code>:test_tube:</code></td>\n<td align=\"left\">Add a failing test.</td>\n</tr>\n<tr>\n<td align=\"left\">👔</td>\n<td align=\"left\"><code>:necktie:</code><br /></td>\n<td align=\"left\">Add or update business logic</td>\n</tr>\n<tr>\n<td align=\"left\">🧐</td>\n<td align=\"left\"><code>:monocle_face:</code><br /></td>\n<td align=\"left\">Data exploration/inspection.</td>\n</tr>\n<tr>\n<td align=\"left\">🩹</td>\n<td align=\"left\"><code>:adhesive_bandage:</code></td>\n<td align=\"left\">Simple fix for a non-critical issue.</td>\n</tr>\n<tr>\n<td align=\"left\">🛂</td>\n<td align=\"left\"><code>:passport_control:</code></td>\n<td align=\"left\">Work on code related to authorization, roles and permissions.</td>\n</tr>\n<tr>\n<td align=\"left\">🥅</td>\n<td align=\"left\"><code>:goal_net:</code></td>\n<td align=\"left\">Catch errors.</td>\n</tr>\n<tr>\n<td align=\"left\">🚩</td>\n<td align=\"left\"><code>:triangular_flag_on_post:</code></td>\n<td align=\"left\">Add, update, or remove feature flags.</td>\n</tr>\n<tr>\n<td align=\"left\">🌱</td>\n<td align=\"left\"><code>:seedling:</code></td>\n<td align=\"left\">Add or update seed files.</td>\n</tr>\n<tr>\n<td align=\"left\">🏷️</td>\n<td align=\"left\"><code>:label:</code></td>\n<td align=\"left\">Add or update types.</td>\n</tr>\n<tr>\n<td align=\"left\">🔍️</td>\n<td align=\"left\"><code>:mag:</code></td>\n<td align=\"left\">Improve SEO.</td>\n</tr>\n<tr>\n<td align=\"left\">⚗️</td>\n<td align=\"left\"><code>:alembic:</code></td>\n<td align=\"left\">Perform experiments.</td>\n</tr>\n<tr>\n<td align=\"left\">🥚</td>\n<td align=\"left\"><code>:egg:</code></td>\n<td align=\"left\">Add or update an easter egg.</td>\n</tr>\n<tr>\n<td align=\"left\">🤡</td>\n<td align=\"left\"><code>:clown_face:</code></td>\n<td align=\"left\">Mock things.</td>\n</tr>\n<tr>\n<td align=\"left\">📱</td>\n<td align=\"left\"><code>:iphone:</code></td>\n<td align=\"left\">Work on responsive design</td>\n</tr>\n<tr>\n<td align=\"left\">🏗️</td>\n<td align=\"left\"><code>:building_construction:</code></td>\n<td align=\"left\">Make architectural changes.</td>\n</tr>\n<tr>\n<td align=\"left\">🚸</td>\n<td align=\"left\"><code>:children_crossing:</code></td>\n<td align=\"left\">Improve user experience / usability.</td>\n</tr>\n<tr>\n<td align=\"left\">👥</td>\n<td align=\"left\"><code>:busts_in_silhouette:</code></td>\n<td align=\"left\">Add or update contributor(s).</td>\n</tr>\n<tr>\n<td align=\"left\">🔇</td>\n<td align=\"left\"><code>:mute:</code></td>\n<td align=\"left\">Remove logs.</td>\n</tr>\n<tr>\n<td align=\"left\">🔊</td>\n<td align=\"left\"><code>:loud_sound:</code></td>\n<td align=\"left\">Add or update logs.</td>\n</tr>\n<tr>\n<td align=\"left\">🗃️</td>\n<td align=\"left\"><code>:card_file_box:</code></td>\n<td align=\"left\">Perform database related changes.</td>\n</tr>\n<tr>\n<td align=\"left\">♿️</td>\n<td align=\"left\"><code>:wheelchair:</code></td>\n<td align=\"left\">Improve accessibility.</td>\n</tr>\n<tr>\n<td align=\"left\">📦️</td>\n<td align=\"left\"><code>:package:</code></td>\n<td align=\"left\">Add or update compiled files or packages.</td>\n</tr>\n</tbody></table>\n<p>一些工具</p>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"excerpt":"","more":"<blockquote>\n<p>🌏Reference</p>\n<ul>\n<li><a href=\"https://gitmoji.dev/?utm_source=ld246.com\">gitmoji | An emoji guide for your commit messages</a></li>\n<li><a href=\"https://dev.to/javidjms/git-write-better-commits-with-gitmoji-3193\">🔨 [git]: Write better commits with Gitmoji - DEV Community</a></li>\n<li><a href=\"https://github.com/Kimi-Gao/Program-Blog/issues/71\">用 emoji 表情提交代码指南 · Issue #71 · Kimi-Gao/Program-Blog (github.com)</a></li>\n</ul>\n</blockquote>\n<p><img src=\"https://b3logfile.com/siyuan/1610205759005/assets/image-20210921211205-remwfyi.png\"></p>\n<p>一条标准的 git commit 应该为</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"built_in\">type</span>&gt; [scope]: <span class=\"string\">&quot;Message&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>type</strong> must be one of the following mentioned below :</p>\n<ul>\n<li><build>: Build related changes (eg: npm related/ adding external dependencies)</li>\n<li><chore>: A code change that external user won’t see (eg: change to .gitignore)</li>\n<li><docs>: Documentation related changes</li>\n<li><feat>: Introduction of a new feature</li>\n<li><fix>: Resolve an issue directly linked to development (bugfixes)</li>\n<li><hotfix>: Resolve an issue directly linked to production (patches)</li>\n<li><test>: Add/Update test cases</li>\n<li><performance>: Add code that improves performance</li>\n<li><refactor>: Update for code for maintainability (clean code)</li>\n</ul>\n<p><strong>scope</strong> is optional and must be a noun that represents the section of the codebase</p>\n<p><strong>Message</strong> should be imperative and should describe the commit with a clear message/keywords.</p>\n<p>such as</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">feat(home, components): Add login button</span><br><span class=\"line\">feat(home, components): Add login modal</span><br><span class=\"line\">fix(home, components): Resolve issue with modal collapses</span><br><span class=\"line\">chore(home): Move icons folder</span><br><span class=\"line\">feat(newsletter): Add Newsletter component</span><br><span class=\"line\">feat(navbar): Add navbar container</span><br></pre></td></tr></table></figure>\n\n<p>Now we can replace the <type/> with an emoji :</p>\n<p>🎨 Improve structure / format of the code.</p>\n<p>⚡️ Improve performance.</p>\n<p>🔥 Remove code or files.</p>\n<p>🐛 Fix a bug.</p>\n<p>✨ Introduce new features.</p>\n<p>📝 Add or update documentation.</p>\n<p>🚀 Deploy stuff.</p>\n<p>💚 Fix CI Build.</p>\n<p>👷 Add or update CI build system.</p>\n<p>🔧 Add or update configuration files.</p>\n<p>🔨 Add or update development scripts.</p>\n<p>⚰️ Remove dead code.</p>\n<p>Example of commits :</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">✨ (home, components): Add login button</span><br><span class=\"line\">✨ (home, components): Add login modal</span><br><span class=\"line\">🐛 (home, components): Resolve issue with modal collapses</span><br><span class=\"line\">🚚 (home): Move icons folder</span><br><span class=\"line\">✨ (newsletter): Add Newsletter component</span><br><span class=\"line\">✨ (navbar): Add navbar container</span><br><span class=\"line\">🔥 (navbar): Remove old navbar file</span><br><span class=\"line\">✅ (home): Add login test case</span><br><span class=\"line\">🎨 (home, component): Improve login modal</span><br><span class=\"line\">📦️ (npm): Add react-table</span><br><span class=\"line\">🔨 Update script start-server.js</span><br></pre></td></tr></table></figure>\n\n<p>比较专业的 github repo 都会使用 gitmoji 进行管理 commit：执行 <code>git commit</code> 时使用 emoji 为本次提交打上一个 “标签”， 使得此次 commit 的主要工作得到凸现，提高阅读体验，同时也能够当作标签功能使得其在整个提交历史中易于区分与查找。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">emoji</th>\n<th align=\"left\">emoji 代码</th>\n<th align=\"left\">commit 说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">🔖</td>\n<td align=\"left\"><code>:bookmark:</code></td>\n<td align=\"left\"><strong>Release / Version tags.</strong></td>\n</tr>\n<tr>\n<td align=\"left\">📝</td>\n<td align=\"left\"><code>:memo:</code></td>\n<td align=\"left\"><strong>Add or update documentation.</strong></td>\n</tr>\n<tr>\n<td align=\"left\">✏️</td>\n<td align=\"left\"><code>:pencil2:</code></td>\n<td align=\"left\">Fix typos.</td>\n</tr>\n<tr>\n<td align=\"left\">📄</td>\n<td align=\"left\"><code>:page_facing_up:</code></td>\n<td align=\"left\">Add or update license</td>\n</tr>\n<tr>\n<td align=\"left\">✨</td>\n<td align=\"left\"><code>:sparkles:</code></td>\n<td align=\"left\">Introduce new features.</td>\n</tr>\n<tr>\n<td align=\"left\">🎉</td>\n<td align=\"left\"><code>:tada:</code></td>\n<td align=\"left\">Begin a project.</td>\n</tr>\n<tr>\n<td align=\"left\">💥</td>\n<td align=\"left\"><code>:boom:</code></td>\n<td align=\"left\">Introduce breaking changes.</td>\n</tr>\n<tr>\n<td align=\"left\">🎨</td>\n<td align=\"left\"><code>:art:</code></td>\n<td align=\"left\"><strong>Improve structure / format of the code.</strong></td>\n</tr>\n<tr>\n<td align=\"left\">⚡️</td>\n<td align=\"left\"><code>:zap:</code></td>\n<td align=\"left\">Improve performance.</td>\n</tr>\n<tr>\n<td align=\"left\">🐛</td>\n<td align=\"left\"><code>:bug:</code></td>\n<td align=\"left\"><strong>Fix a bug.</strong></td>\n</tr>\n<tr>\n<td align=\"left\">🚑</td>\n<td align=\"left\"><code>:ambulance:</code></td>\n<td align=\"left\">Critical hotfix.</td>\n</tr>\n<tr>\n<td align=\"left\">💡</td>\n<td align=\"left\"><code>:bulb:</code></td>\n<td align=\"left\">Add or update comments in source code</td>\n</tr>\n<tr>\n<td align=\"left\">🔥</td>\n<td align=\"left\"><code>:fire:</code></td>\n<td align=\"left\"><strong>Remove code or files.</strong></td>\n</tr>\n<tr>\n<td align=\"left\">🗑️</td>\n<td align=\"left\"><code>:wastebasket:</code></td>\n<td align=\"left\">Deprecate code that needs to be cleaned up.。</td>\n</tr>\n<tr>\n<td align=\"left\">🚚</td>\n<td align=\"left\"><code>:truck:</code></td>\n<td align=\"left\">Move or rename resources (e.g.: files, paths, routes).</td>\n</tr>\n<tr>\n<td align=\"left\">💩</td>\n<td align=\"left\"><code>:poop:</code></td>\n<td align=\"left\">Write bad code that needs to be improved.</td>\n</tr>\n<tr>\n<td align=\"left\">⚰️</td>\n<td align=\"left\"><code>:coffin:</code><br /></td>\n<td align=\"left\">Remove dead code.</td>\n</tr>\n<tr>\n<td align=\"left\">📸</td>\n<td align=\"left\"><code>:camera_flash:</code><br /></td>\n<td align=\"left\">Add or update snapshots.</td>\n</tr>\n<tr>\n<td align=\"left\">💄</td>\n<td align=\"left\"><code>:lipstick:</code></td>\n<td align=\"left\">Add or update the UI and style files.</td>\n</tr>\n<tr>\n<td align=\"left\">💫</td>\n<td align=\"left\"><code>:dizzy:</code></td>\n<td align=\"left\">Add or update animations and transitions.</td>\n</tr>\n<tr>\n<td align=\"left\">🍱</td>\n<td align=\"left\"><code>:bento:</code></td>\n<td align=\"left\">Add or update assets.</td>\n</tr>\n<tr>\n<td align=\"left\">🙈</td>\n<td align=\"left\"><code>:see_no_evil:</code></td>\n<td align=\"left\">Add or update a .gitignore file.</td>\n</tr>\n<tr>\n<td align=\"left\">⏪️</td>\n<td align=\"left\"><code>:rewind:</code></td>\n<td align=\"left\">Revert changes</td>\n</tr>\n<tr>\n<td align=\"left\">🔀</td>\n<td align=\"left\"><code>:twisted_rightwards_arrows:</code></td>\n<td align=\"left\">Merge branches.</td>\n</tr>\n<tr>\n<td align=\"left\">🔧</td>\n<td align=\"left\"><code>:wrench:</code></td>\n<td align=\"left\"><strong>Add or update configuration files.</strong></td>\n</tr>\n<tr>\n<td align=\"left\">🚀</td>\n<td align=\"left\"><code>:rocket:</code></td>\n<td align=\"left\">Deploy stuff.</td>\n</tr>\n<tr>\n<td align=\"left\">🚨</td>\n<td align=\"left\"><code>:rotating_light:</code></td>\n<td align=\"left\">Fix compiler / linter warnings.</td>\n</tr>\n<tr>\n<td align=\"left\">🚧</td>\n<td align=\"left\"><code>:construction:</code></td>\n<td align=\"left\">Work in progress.</td>\n</tr>\n<tr>\n<td align=\"left\">✅</td>\n<td align=\"left\"><code>:white_check_mark:</code></td>\n<td align=\"left\">Add, update, or pass tests.</td>\n</tr>\n<tr>\n<td align=\"left\">💬</td>\n<td align=\"left\"><code>:speech_balloon:</code></td>\n<td align=\"left\">Add or update text and literals.</td>\n</tr>\n<tr>\n<td align=\"left\">🍻</td>\n<td align=\"left\"><code>:beers:</code></td>\n<td align=\"left\">Write code drunkenly.</td>\n</tr>\n<tr>\n<td align=\"left\">👽️</td>\n<td align=\"left\"><code>:alien:</code></td>\n<td align=\"left\">Update code due to external API changes.</td>\n</tr>\n<tr>\n<td align=\"left\">🔨</td>\n<td align=\"left\"><code>:hammer:</code></td>\n<td align=\"left\">Add or update development scripts.</td>\n</tr>\n<tr>\n<td align=\"left\">🔒</td>\n<td align=\"left\"><code>:lock:</code></td>\n<td align=\"left\">Fix security issues.</td>\n</tr>\n<tr>\n<td align=\"left\">🏁</td>\n<td align=\"left\"><code>:checked_flag:</code></td>\n<td align=\"left\">修复 Windows 下的问题</td>\n</tr>\n<tr>\n<td align=\"left\">🍎</td>\n<td align=\"left\"><code>:apple:</code></td>\n<td align=\"left\">修复 macOS 下的问题</td>\n</tr>\n<tr>\n<td align=\"left\">🐧</td>\n<td align=\"left\"><code>:penguin:</code></td>\n<td align=\"left\">修复 Linux 下的问题</td>\n</tr>\n<tr>\n<td align=\"left\">🐳</td>\n<td align=\"left\"><code>:whale:</code></td>\n<td align=\"left\">Docker 相关工作</td>\n</tr>\n<tr>\n<td align=\"left\">♻️</td>\n<td align=\"left\"><code>:recycle:</code></td>\n<td align=\"left\">Refactor code</td>\n</tr>\n<tr>\n<td align=\"left\">👷</td>\n<td align=\"left\"><code>:construction_worker:</code></td>\n<td align=\"left\">Add or update CI build system.</td>\n</tr>\n<tr>\n<td align=\"left\">💚</td>\n<td align=\"left\"><code>:green_heart:</code></td>\n<td align=\"left\">fix CI Build.</td>\n</tr>\n<tr>\n<td align=\"left\">📈</td>\n<td align=\"left\"><code>:chart_with_upwards_trend:</code></td>\n<td align=\"left\">Add or update analytics or track code</td>\n</tr>\n<tr>\n<td align=\"left\">⬆️</td>\n<td align=\"left\"><code>:arrow_up:</code></td>\n<td align=\"left\">升级依赖</td>\n</tr>\n<tr>\n<td align=\"left\">⬇️</td>\n<td align=\"left\"><code>:arrow_down:</code></td>\n<td align=\"left\">降级依赖</td>\n</tr>\n<tr>\n<td align=\"left\">➕</td>\n<td align=\"left\"><code>:heavy_plug_sign:</code></td>\n<td align=\"left\">Add a dependency.</td>\n</tr>\n<tr>\n<td align=\"left\">➖</td>\n<td align=\"left\"><code>:heavy_minus_sign:</code></td>\n<td align=\"left\">Remove a dependency.</td>\n</tr>\n<tr>\n<td align=\"left\">📌</td>\n<td align=\"left\"><code>:pushpin:</code></td>\n<td align=\"left\">Pin dependencies to specific versions</td>\n</tr>\n<tr>\n<td align=\"left\">🌐</td>\n<td align=\"left\"><code>:globe_with_meridians:</code></td>\n<td align=\"left\">Internationalization and localization.</td>\n</tr>\n<tr>\n<td align=\"left\">🧪</td>\n<td align=\"left\"><code>:test_tube:</code></td>\n<td align=\"left\">Add a failing test.</td>\n</tr>\n<tr>\n<td align=\"left\">👔</td>\n<td align=\"left\"><code>:necktie:</code><br /></td>\n<td align=\"left\">Add or update business logic</td>\n</tr>\n<tr>\n<td align=\"left\">🧐</td>\n<td align=\"left\"><code>:monocle_face:</code><br /></td>\n<td align=\"left\">Data exploration/inspection.</td>\n</tr>\n<tr>\n<td align=\"left\">🩹</td>\n<td align=\"left\"><code>:adhesive_bandage:</code></td>\n<td align=\"left\">Simple fix for a non-critical issue.</td>\n</tr>\n<tr>\n<td align=\"left\">🛂</td>\n<td align=\"left\"><code>:passport_control:</code></td>\n<td align=\"left\">Work on code related to authorization, roles and permissions.</td>\n</tr>\n<tr>\n<td align=\"left\">🥅</td>\n<td align=\"left\"><code>:goal_net:</code></td>\n<td align=\"left\">Catch errors.</td>\n</tr>\n<tr>\n<td align=\"left\">🚩</td>\n<td align=\"left\"><code>:triangular_flag_on_post:</code></td>\n<td align=\"left\">Add, update, or remove feature flags.</td>\n</tr>\n<tr>\n<td align=\"left\">🌱</td>\n<td align=\"left\"><code>:seedling:</code></td>\n<td align=\"left\">Add or update seed files.</td>\n</tr>\n<tr>\n<td align=\"left\">🏷️</td>\n<td align=\"left\"><code>:label:</code></td>\n<td align=\"left\">Add or update types.</td>\n</tr>\n<tr>\n<td align=\"left\">🔍️</td>\n<td align=\"left\"><code>:mag:</code></td>\n<td align=\"left\">Improve SEO.</td>\n</tr>\n<tr>\n<td align=\"left\">⚗️</td>\n<td align=\"left\"><code>:alembic:</code></td>\n<td align=\"left\">Perform experiments.</td>\n</tr>\n<tr>\n<td align=\"left\">🥚</td>\n<td align=\"left\"><code>:egg:</code></td>\n<td align=\"left\">Add or update an easter egg.</td>\n</tr>\n<tr>\n<td align=\"left\">🤡</td>\n<td align=\"left\"><code>:clown_face:</code></td>\n<td align=\"left\">Mock things.</td>\n</tr>\n<tr>\n<td align=\"left\">📱</td>\n<td align=\"left\"><code>:iphone:</code></td>\n<td align=\"left\">Work on responsive design</td>\n</tr>\n<tr>\n<td align=\"left\">🏗️</td>\n<td align=\"left\"><code>:building_construction:</code></td>\n<td align=\"left\">Make architectural changes.</td>\n</tr>\n<tr>\n<td align=\"left\">🚸</td>\n<td align=\"left\"><code>:children_crossing:</code></td>\n<td align=\"left\">Improve user experience / usability.</td>\n</tr>\n<tr>\n<td align=\"left\">👥</td>\n<td align=\"left\"><code>:busts_in_silhouette:</code></td>\n<td align=\"left\">Add or update contributor(s).</td>\n</tr>\n<tr>\n<td align=\"left\">🔇</td>\n<td align=\"left\"><code>:mute:</code></td>\n<td align=\"left\">Remove logs.</td>\n</tr>\n<tr>\n<td align=\"left\">🔊</td>\n<td align=\"left\"><code>:loud_sound:</code></td>\n<td align=\"left\">Add or update logs.</td>\n</tr>\n<tr>\n<td align=\"left\">🗃️</td>\n<td align=\"left\"><code>:card_file_box:</code></td>\n<td align=\"left\">Perform database related changes.</td>\n</tr>\n<tr>\n<td align=\"left\">♿️</td>\n<td align=\"left\"><code>:wheelchair:</code></td>\n<td align=\"left\">Improve accessibility.</td>\n</tr>\n<tr>\n<td align=\"left\">📦️</td>\n<td align=\"left\"><code>:package:</code></td>\n<td align=\"left\">Add or update compiled files or packages.</td>\n</tr>\n</tbody></table>\n<p>一些工具</p>\n"},{"title":"Java即时编译器原理解析及实践","urlname":"ecpwax","date":"2021-09-26T03:40:38.000Z","_content":"\n## 一、导读\n\n常见的编译型语言如 C++，通常会把代码直接编译成 CPU 所能理解的机器码来运行。而 Java 为了实现“一次编译，处处运行”的特性，把编译的过程分成两部分，首先它会先由 javac 编译成通用的中间形式——字节码，然后再由解释器逐条将字节码解释为机器码来执行。所以在性能上，Java 通常不如 C++这类编译型语言。\n为了优化 Java 的性能 ，JVM 在解释器之外引入了即时（Just In Time）编译器：当程序运行时，解释器首先发挥作用，代码可以直接执行。随着时间推移，即时编译器逐渐发挥作用，把越来越多的代码编译优化成本地代码，来获取更高的执行效率。解释器这时可以作为编译运行的降级手段，在一些不可靠的编译优化出现问题时，再切换回解释执行，保证程序可以正常运行。\n即时编译器极大地提高了 Java 程序的运行速度，而且跟静态编译相比，即时编译器可以选择性地编译热点代码，省去了很多编译时间，也节省很多的空间。目前，即时编译器已经非常成熟了，在性能层面甚至可以和编译型语言相比。不过在这个领域，大家依然在不断探索如何结合不同的编译方式，使用更加智能的手段来提升程序的运行速度。\n\n## 二、Java 的执行过程\n\nJava 的执行过程整体可以分为两个部分，第一步由 javac 将源码编译成字节码，在这个过程中会进行词法分析、语法分析、语义分析，编译原理中这部分的编译称为前端编译。接下来无需编译直接逐条将字节码解释执行，在解释执行的过程中，虚拟机同时对程序运行的信息进行收集，在这些信息的基础上，编译器会逐渐发挥作用，它会进行后端编译——把字节码编译成机器码，但不是所有的代码都会被编译，只有被 JVM 认定为的热点代码，才可能被编译。\n怎么样才会被认为是热点代码呢？JVM 中会设置一个阈值，当方法或者代码块的在一定时间内的调用次数超过这个阈值时就会被编译，存入 codeCache 中。当下次执行时，再遇到这段代码，就会从 codeCache 中读取机器码，直接执行，以此来提升程序运行的性能。整体的执行过程大致如下图所示：\n\n### 1. JVM 中的编译器\n\nJVM 中集成了两种编译器，Client Compiler 和 Server Compiler，它们的作用也不同。Client Compiler 注重启动速度和局部的优化，Server Compiler 则更加关注全局的优化，性能会更好，但由于会进行更多的全局分析，所以启动速度会变慢。两种编译器有着不同的应用场景，在虚拟机中同时发挥作用。\n**Client Compiler**\nHotSpot VM 带有一个 Client Compiler C1 编译器。这种编译器启动速度快，但是性能比较 Server Compiler 来说会差一些。C1 会做三件事：\n\n- 局部简单可靠的优化，比如字节码上进行的一些基础优化，方法内联、常量传播等，放弃许多耗时较长的全局优化。\n- 将字节码构造成高级中间表示（High-level Intermediate Representation，以下称为 HIR），HIR 与平台无关，通常采用图结构，更适合 JVM 对程序进行优化。\n- 最后将 HIR 转换成低级中间表示（Low-level Intermediate Representation，以下称为 LIR），在 LIR 的基础上会进行寄存器分配、窥孔优化（局部的优化方式，编译器在一个基本块或者多个基本块中，针对已经生成的代码，结合 CPU 自己指令的特点，通过一些认为可能带来性能提升的转换规则或者通过整体的分析，进行指令转换，来提升代码性能）等操作，最终生成机器码。\n\n**Server Compiler**\nServer Compiler 主要关注一些编译耗时较长的全局优化，甚至会还会根据程序运行的信息进行一些不可靠的激进优化。这种编译器的启动时间长，适用于长时间运行的后台程序，它的性能通常比 Client Compiler 高 30%以上。目前，Hotspot 虚拟机中使用的 Server Compiler 有两种：C2 和 Graal。\n**C2 Compiler**\n在 Hotspot VM 中，默认的 Server Compiler 是 C2 编译器。\nC2 编译器在进行编译优化时，会使用一种控制流与数据流结合的图数据结构，称为 Ideal Graph。 Ideal Graph 表示当前程序的数据流向和指令间的依赖关系，依靠这种图结构，某些优化步骤（尤其是涉及浮动代码块的那些优化步骤）变得不那么复杂。\nIdeal Graph 的构建是在解析字节码的时候，根据字节码中的指令向一个空的 Graph 中添加节点，Graph 中的节点通常对应一个指令块，每个指令块包含多条相关联的指令，JVM 会利用一些优化技术对这些指令进行优化，比如 Global Value Numbering、常量折叠等，解析结束后，还会进行一些死代码剔除的操作。生成 Ideal Graph 后，会在这个基础上结合收集的程序运行信息来进行一些全局的优化，这个阶段如果 JVM 判断此时没有全局优化的必要，就会跳过这部分优化。\n无论是否进行全局优化，Ideal Graph 都会被转化为一种更接近机器层面的 MachNode Graph，最后编译的机器码就是从 MachNode Graph 中得的，生成机器码前还会有一些包括寄存器分配、窥孔优化等操作。关于 Ideal Graph 和各种全局的优化手段会在后面的章节详细介绍。Server Compiler 编译优化的过程如下图所示：\n\n**Graal Compiler**\n从 JDK 9 开始，Hotspot VM 中集成了一种新的 Server Compiler，Graal 编译器。相比 C2 编译器，Graal 有这样几种关键特性：\n\n- 前文有提到，JVM 会在解释执行的时候收集程序运行的各种信息，然后编译器会根据这些信息进行一些基于预测的激进优化，比如分支预测，根据程序不同分支的运行概率，选择性地编译一些概率较大的分支。Graal 比 C2 更加青睐这种优化，所以 Graal 的峰值性能通常要比 C2 更好。\n- 使用 Java 编写，对于 Java 语言，尤其是新特性，比如 Lambda、Stream 等更加友好。\n- 更深层次的优化，比如虚函数的内联、部分逃逸分析等。\n\nGraal 编译器可以通过 Java 虚拟机参数-XX:+UnlockExperimentalVMOptions -XX:+UseJVMCICompiler 启用。当启用时，它将替换掉 HotSpot 中的 C2 编译器，并响应原本由 C2 负责的编译请求。\n\n### 2. 分层编译\n\n在 Java 7 以前，需要研发人员根据服务的性质去选择编译器。对于需要快速启动的，或者一些不会长期运行的服务，可以采用编译效率较高的 C1，对应参数-client。长期运行的服务，或者对峰值性能有要求的后台服务，可以采用峰值性能更好的 C2，对应参数-server。Java 7 开始引入了分层编译的概念，它结合了 C1 和 C2 的优势，追求启动速度和峰值性能的一个平衡。分层编译将 JVM 的执行状态分为了五个层次。五个层级分别是：\n\n1. 解释执行。\n1. 执行不带 profiling 的 C1 代码。\n1. 执行仅带方法调用次数以及循环回边执行次数 profiling 的 C1 代码。\n1. 执行带所有 profiling 的 C1 代码。\n1. 执行 C2 代码。\n\nprofiling 就是收集能够反映程序执行状态的数据。其中最基本的统计数据就是方法的调用次数，以及循环回边的执行次数。\n通常情况下，C2 代码的执行效率要比 C1 代码的高出 30%以上。C1 层执行的代码，按执行效率排序从高至低则是 1 层>2 层>3 层。这 5 个层次中，1 层和 4 层都是终止状态，当一个方法到达终止状态后，只要编译后的代码并没有失效，那么 JVM 就不会再次发出该方法的编译请求的。服务实际运行时，JVM 会根据服务运行情况，从解释执行开始，选择不同的编译路径，直到到达终止状态。下图中就列举了几种常见的编译路径：\n\n- 图中第 ① 条路径，代表编译的一般情况，热点方法从解释执行到被 3 层的 C1 编译，最后被 4 层的 C2 编译。\n- 如果方法比较小（比如 Java 服务中常见的 getter/setter 方法），3 层的 profiling 没有收集到有价值的数据，JVM 就会断定该方法对于 C1 代码和 C2 代码的执行效率相同，就会执行图中第 ② 条路径。在这种情况下，JVM 会在 3 层编译之后，放弃进入 C2 编译，直接选择用 1 层的 C1 编译运行。\n- 在 C1 忙碌的情况下，执行图中第 ③ 条路径，在解释执行过程中对程序进行 profiling ，根据信息直接由第 4 层的 C2 编译。\n- 前文提到 C1 中的执行效率是 1 层>2 层>3 层，第 3 层一般要比第 2 层慢 35%以上，所以在 C2 忙碌的情况下，执行图中第 ④ 条路径。这时方法会被 2 层的 C1 编译，然后再被 3 层的 C1 编译，以减少方法在 3 层的执行时间。\n- 如果编译器做了一些比较激进的优化，比如分支预测，在实际运行时发现预测出错，这时就会进行反优化，重新进入解释执行，图中第 ⑤ 条执行路径代表的就是反优化。\n\n总的来说，C1 的编译速度更快，C2 的编译质量更高，分层编译的不同编译路径，也就是 JVM 根据当前服务的运行情况来寻找当前服务的最佳平衡点的一个过程。从 JDK 8 开始，JVM 默认开启分层编译。\n\n### 3. 即时编译的触发\n\nJava 虚拟机根据方法的调用次数以及循环回边的执行次数来触发即时编译。循环回边是一个控制流图中的概念，程序中可以简单理解为往回跳转的指令，比如下面这段代码：\n循环回边\n**public** **void** **nlp**(Object obj) { **int** sum = 0; **for** (**int** i = 0; i < 200; i++) { sum += i; } }\n上面这段代码经过编译生成下面的字节码。其中，偏移量为 18 的字节码将往回跳至偏移量为 4 的字节码中。在解释执行时，每当运行一次该指令，Java 虚拟机便会将该方法的循环回边计数器加 1。\n字节码\npublic void nlp(java.lang.Object); Code: 0: iconst_0 1: istore_1 2: iconst_0 3: istore_2 4: iload_2 5: sipush 200 8: if_icmpge 21 11: iload_1 12: iload_2 13: iadd 14: istore_1 15: iinc 2, 1 18: goto 4 21: return\n在即时编译过程中，编译器会识别循环的头部和尾部。上面这段字节码中，循环体的头部和尾部分别为偏移量为 11 的字节码和偏移量为 15 的字节码。编译器将在循环体结尾增加循环回边计数器的代码，来对循环进行计数。\n当方法的调用次数和循环回边的次数的和，超过由参数-XX:CompileThreshold 指定的阈值时（使用 C1 时，默认值为 1500；使用 C2 时，默认值为 10000），就会触发即时编译。\n开启分层编译的情况下，-XX:CompileThreshold 参数设置的阈值将会失效，触发编译会由以下的条件来判断：\n\n- 方法调用次数大于由参数-XX:TierXInvocationThreshold 指定的阈值乘以系数。\n- 方法调用次数大于由参数-XX:TierXMINInvocationThreshold 指定的阈值乘以系数，并且方法调用次数和循环回边次数之和大于由参数-XX:TierXCompileThreshold 指定的阈值乘以系数时。\n\n分层编译触发条件公式\ni > TierXInvocationThreshold _ s **||** (i > TierXMinInvocationThreshold _ s && i + **b **> TierXCompileThreshold \\* s) i 为调用次数，**b 是循环回边次数 **\n上述满足其中一个条件就会触发即时编译，并且 JVM 会根据当前的编译方法数以及编译线程数动态调整系数 s。\n\n## 三、编译优化\n\n即时编译器会对正在运行的服务进行一系列的优化，包括字节码解析过程中的分析，根据编译过程中代码的一些中间形式来做局部优化，还会根据程序依赖图进行全局优化，最后才会生成机器码。\n\n### 1. 中间表达形式（Intermediate Representation）\n\n在编译原理中，通常把编译器分为前端和后端，前端编译经过词法分析、语法分析、语义分析生成中间表达形式（Intermediate Representation，以下称为 IR），后端会对 IR 进行优化，生成目标代码。\nJava 字节码就是一种 IR，但是字节码的结构复杂，字节码这样代码形式的 IR 也不适合做全局的分析优化。现代编译器一般采用图结构的 IR，静态单赋值（Static Single Assignment，SSA）IR 是目前比较常用的一种。这种 IR 的特点是每个变量只能被赋值一次，而且只有当变量被赋值之后才能使用。举个例子：\nSSA IR\nPlain Text { a = 1; a = 2; b = a; }\n上述代码中我们可以轻易地发现 a = 1 的赋值是冗余的，但是编译器不能。传统的编译器需要借助数据流分析，从后至前依次确认哪些变量的值被覆盖掉。不过，如果借助了 SSA IR，编译器则可以很容易识别冗余赋值。\n上面代码的 SSA IR 形式的伪代码可以表示为：\nSSA IR\nPlain Text { a_1 = 1; a_2 = 2; b_1 = a_2; }\n由于 SSA IR 中每个变量只能赋值一次，所以代码中的 a 在 SSA IR 中会分成 a_1、a_2 两个变量来赋值，这样编译器就可以很容易通过扫描这些变量来发现 a_1 的赋值后并没有使用，赋值是冗余的。\n除此之外，SSA IR 对其他优化方式也有很大的帮助，例如下面这个死代码删除（Dead Code Elimination）的例子：\nDeadCodeElimination\n**public** **void** DeadCodeElimination{ **int** a = 2; **int** b = 0 **if**(2 > 1){ a = 1; } **else**{ b = 2; } **add**(a,b) }\n可以得到 SSA IR 伪代码：\nDeadCodeElimination\na_1 = 2; b_1 = 0 if true: a_2 = 1; else b_2 = 2; add(a,b)\n编译器通过执行字节码可以发现 b_2 赋值后不会被使用，else 分支不会被执行。经过死代码删除后就可以得到代码：\nDeadCodeElimination\n**public** **void** DeadCodeElimination{ **int** a = 1; **int** b = 0; **add**(a,b) }\n我们可以将编译器的每一种优化看成一个图优化算法，它接收一个 IR 图，并输出经过转换后的 IR 图。编译器优化的过程就是一个个图节点的优化串联起来的。\n**C1 中的中间表达形式**\n前文提及 C1 编译器内部使用高级中间表达形式 HIR，低级中间表达形式 LIR 来进行各种优化，这两种 IR 都是 SSA 形式的。\nHIR 是由很多基本块（Basic Block）组成的控制流图结构，每个块包含很多 SSA 形式的指令。基本块的结构如下图所示：\n\n其中，predecessors 表示前驱基本块（由于前驱可能是多个，所以是 BlockList 结构，是多个 BlockBegin 组成的可扩容数组）。同样，successors 表示多个后继基本块 BlockEnd。除了这两部分就是主体块，里面包含程序执行的指令和一个 next 指针，指向下一个执行的主体块。\n从字节码到 HIR 的构造最终调用的是 GraphBuilder，GraphBuilder 会遍历字节码构造所有代码基本块储存为一个链表结构，但是这个时候的基本块只有 BlockBegin，不包括具体的指令。第二步 GraphBuilder 会用一个 ValueStack 作为操作数栈和局部变量表，模拟执行字节码，构造出对应的 HIR，填充之前空的基本块，这里给出简单字节码块构造 HIR 的过程示例，如下所示：\n字节码构造 HIR\n字节码 **Local** **Value** **operand** **stack** **HIR** **5**: **iload_1** [i1,i2] [i1] **6**: **iload_2** [i1,i2] [i1,i2] ................................................ **i3**: **i1** _ **i2** **7**: **imul** **8**: **istore_3** [i1,i2，i3] [i3]\n可以看出，当执行 iload_1 时，操作数栈压入变量 i1，执行 iload_2 时，操作数栈压入变量 i2，执行相乘指令 imul 时弹出栈顶两个值，构造出 HIR i3 : i1 _ i2，生成的 i3 入栈。\nC1 编译器优化大部分都是在 HIR 之上完成的。当优化完成之后它会将 HIR 转化为 LIR，LIR 和 HIR 类似，也是一种编译器内部用到的 IR，HIR 通过优化消除一些中间节点就可以生成 LIR，形式上更加简化。\n**Sea-of-Nodes IR**\nC2 编译器中的 Ideal Graph 采用的是一种名为 Sea-of-Nodes 中间表达形式，同样也是 SSA 形式的。它最大特点是去除了变量的概念，直接采用值来进行运算。为了方便理解，可以利用 IR 可视化工具 Ideal Graph Visualizer（IGV），来展示具体的 IR 图。比如下面这段代码：\nexample\n**public** **static** **int** **foo**(**int** count) { **int** sum = 0; **for** (**int** i = 0; i < count; i++) { sum += i; } **return** sum; }\n对应的 IR 图如下所示：\n\n图中若干个顺序执行的节点将被包含在同一个基本块之中，如图中的 B0、B1 等。B0 基本块中 0 号 Start 节点是方法入口，B3 中 21 号 Return 节点是方法出口。红色加粗线条为控制流，蓝色线条为数据流，而其他颜色的线条则是特殊的控制流或数据流。被控制流边所连接的是固定节点，其他的则是浮动节点（浮动节点指只要能满足数据依赖关系，可以放在不同位置的节点，浮动节点变动的这个过程称为 Schedule）。\n这种图具有轻量级的边结构。 图中的边仅由指向另一个节点的指针表示。节点是 Node 子类的实例，带有指定输入边的指针数组。这种表示的优点是改变节点的输入边很快，如果想要改变输入边，只要将指针指向 Node，然后存入 Node 的指针数组就可以了。\n依赖于这种图结构，通过收集程序运行的信息，JVM 可以通过 Schedule 那些浮动节点，从而获得最好的编译效果。\n**Phi And Region Nodes**\nIdeal Graph 是 SSA IR。 由于没有变量的概念，这会带来一个问题，就是不同执行路径可能会对同一变量设置不同的值。例如下面这段代码 if 语句的两个分支中，分别返回 5 和 6。此时，根据不同的执行路径，所读取到的值很有可能不同。\nexample\n**int** **test**(**int** x) { **int** a = 0; **if**(x == 1) { a = 5; } **else** { a = 6; } **return** a; }\n为了解决这个问题，就引入一个 Phi Nodes 的概念，能够根据不同的执行路径选择不同的值。于是，上面这段代码可以表示为下面这张图：\n\nPhi Nodes 中保存不同路径上包含的所有值，Region Nodes 根据不同路径的判断条件，从 Phi Nodes 取得当前执行路径中变量应该赋予的值，带有 Phi 节点的 SSA 形式的伪代码如下：\nPhi Nodes\nint test(int x) { a_1 = 0; if(x == 1){ a_2 = 5; }else { a_3 = 6; } a_4 = Phi(a_2,a_3); return a_4; }\n**Global Value Numbering**\nGlobal Value Numbering（GVN） 是一种因为 Sea-of-Nodes 变得非常容易的优化技术 。\nGVN 是指为每一个计算得到的值分配一个独一无二的编号，然后遍历指令寻找优化的机会，它可以发现并消除等价计算的优化技术。如果一段程序中出现了多次操作数相同的乘法，那么即时编译器可以将这些乘法合并为一个，从而降低输出机器码的大小。如果这些乘法出现在同一执行路径上，那么 GVN 还将省下冗余的乘法操作。在 Sea-of-Nodes 中，由于只存在值的概念，因此 GVN 算法将非常简单：即时编译器只需判断该浮动节点是否与已存在的浮动节点的编号相同，所输入的 IR 节点是否一致，便可以将这两个浮动节点归并成一个。比如下面这段代码：\nGVN\na = 1; b = 2; c = a + b; d = a + b; e = d;\nGVN 会利用 Hash 算法编号，计算 a = 1 时，得到编号 1，计算 b = 2 时得到编号 2，计算 c = a + b 时得到编号 3，这些编号都会放入 Hash 表中保存，在计算 d = a + b 时，会发现 a + b 已经存在 Hash 表中，就不会再进行计算，直接从 Hash 表中取出计算过的值。最后的 e = d 也可以由 Hash 表中查到而进行复用。\n可以将 GVN 理解为在 IR 图上的公共子表达式消除（Common Subexpression Elimination，CSE）。两者区别在于，GVN 直接比较值的相同与否，而 CSE 是借助词法分析器来判断两个表达式相同与否。\n\n### 2.方法内联\n\n方法内联，是指在编译过程中遇到方法调用时，将目标方法的方法体纳入编译范围之中，并取代原方法调用的优化手段。JIT 大部分的优化都是在内联的基础上进行的，方法内联是即时编译器中非常重要的一环。\nJava 服务中存在大量 getter/setter 方法，如果没有方法内联，在调用 getter/setter 时，程序执行时需要保存当前方法的执行位置，创建并压入用于 getter/setter 的栈帧、访问字段、弹出栈帧，最后再恢复当前方法的执行。内联了对 getter/setter 的方法调用后，上述操作仅剩字段访问。在 C2 编译器 中，方法内联在解析字节码的过程中完成。当遇到方法调用字节码时，编译器将根据一些阈值参数决定是否需要内联当前方法的调用。如果需要内联，则开始解析目标方法的字节码。比如下面这个示例（来源于网络）：\n方法内联的过程\n**public** **static** **boolean** flag = **true**; **public** **static** **int** value0 = 0; **public** **static** **int** value1 = 1; **public** **static** **int** **foo**(**int** value) { **int** result = bar(flag); **if** (result != 0) { **return** result; } **else** { **return** value; } } **public** **static** **int** **bar**(**boolean** flag) { **return** flag ? value0 : value1; }\nbar 方法的 IR 图：\n\n内联后的 IR 图：\n\n内联不仅将被调用方法的 IR 图节点复制到调用者方法的 IR 图中，还要完成其他操作。\n被调用方法的参数替换为调用者方法进行方法调用时所传入参数。上面例子中，将 bar 方法中的 1 号 P(0)节点替换为 foo 方法 3 号 LoadField 节点。\n调用者方法的 IR 图中，方法调用节点的数据依赖会变成被调用方法的返回。如果存在多个返回节点，会生成一个 Phi 节点，将这些返回值聚合起来，并作为原方法调用节点的替换对象。图中就是将 8 号==节点，以及 12 号 Return 节点连接到原 5 号 Invoke 节点的边，然后指向新生成的 24 号 Phi 节点中。\n如果被调用方法将抛出某种类型的异常，而调用者方法恰好有该异常类型的处理器，并且该异常处理器覆盖这一方法调用，那么即时编译器需要将被调用方法抛出异常的路径，与调用者方法的异常处理器相连接。\n**方法内联的条件**\n编译器的大部分优化都是在方法内联的基础上。所以一般来说，内联的方法越多，生成代码的执行效率越高。但是对于即时编译器来说，内联的方法越多，编译时间也就越长，程序达到峰值性能的时刻也就比较晚。\n可以通过虚拟机参数-XX:MaxInlineLevel 调整内联的层数，以及 1 层的直接递归调用（可以通过虚拟机参数-XX:MaxRecursiveInlineLevel 调整）。一些常见的内联相关的参数如下表所示：\n\n**虚函数内联**\n内联是 JIT 提升性能的主要手段，但是虚函数使得内联是很难的，因为在内联阶段并不知道他们会调用哪个方法。例如，我们有一个数据处理的接口，这个接口中的一个方法有三种实现 add、sub 和 multi，JVM 是通过保存虚函数表 Virtual Method Table（以下称为 VMT）存储 class 对象中所有的虚函数，class 的实例对象保存着一个 VMT 的指针，程序运行时首先加载实例对象，然后通过实例对象找到 VMT，通过 VMT 找到对应方法的地址，所以虚函数的调用比直接指向方法地址的 classic call 性能上会差一些。很不幸的是，Java 中所有非私有的成员函数的调用都是虚调用。\nC2 编译器已经足够智能，能够检测这种情况并会对虚调用进行优化。比如下面这段代码例子：\nvirtual call\n**public** **class** **SimpleInliningTest** { **public** **static** **void** **main**(String[] args) **throws** InterruptedException { VirtualInvokeTest obj = **new** VirtualInvokeTest(); VirtualInvoke1 obj1 = **new** VirtualInvoke1(); **for** (**int** i = 0; i < 100000; i++) { invokeMethod(obj); invokeMethod(obj1); } Thread.sleep(1000); } **public** **static** **void** **invokeMethod**(VirtualInvokeTest obj) { obj.methodCall(); } **private** **static** **class** **VirtualInvokeTest** { **public** **void** **methodCall**() { System.out.println(\"virtual call\"); } } **private** **static** **class** **VirtualInvoke1** **extends** **VirtualInvokeTest** { @Override **public** **void** **methodCall**() { **super**.methodCall(); } } }\n经过 JIT 编译器优化后，进行反汇编得到下面这段汇编代码：\n0x0000000113369d37: callq 0x00000001132950a0 ; OopMap{off=476} ;*invokevirtual methodCall *//代表虚调用* ; - SimpleInliningTest::invokeMethod@1 (line 18) ; {optimized virtual*call} *//虚调用已经被优化\\_\n可以看到 JIT 对 methodCall 方法进行了虚调用优化 optimized virtual_call。经过优化后的方法可以被内联。但是 C2 编译器的能力有限，对于多个实现方法的虚调用就“无能为力”了。\n比如下面这段代码，我们增加一个实现：\n多实现的虚调用\n**public** **class** **SimpleInliningTest** { **public** **static** **void** **main**(String[] args) **throws** InterruptedException { VirtualInvokeTest obj = **new** VirtualInvokeTest(); VirtualInvoke1 obj1 = **new** VirtualInvoke1(); VirtualInvoke2 obj2 = **new** VirtualInvoke2(); **for** (**int** i = 0; i < 100000; i++) { invokeMethod(obj); invokeMethod(obj1); invokeMethod(obj2); } Thread.sleep(1000); } **public** **static** **void** **invokeMethod**(VirtualInvokeTest obj) { obj.methodCall(); } **private** **static** **class** **VirtualInvokeTest** { **public** **void** **methodCall**() { System.out.println(\"virtual call\"); } } **private** **static** **class** **VirtualInvoke1** **extends** **VirtualInvokeTest** { @Override **public** **void** **methodCall**() { **super**.methodCall(); } } **private** **static** **class** **VirtualInvoke2** **extends** **VirtualInvokeTest** { @Override **public** **void** **methodCall**() { **super**.methodCall(); } } }\n经过反编译得到下面的汇编代码：\n代码块\n0x000000011f5f0a37: callq 0x000000011f4fd2e0 ; OopMap{off=28} ;*invokevirtual methodCall _//代表虚调用_ ; - SimpleInliningTest::invokeMethod@1 (line 20) ; {virtual*call} *//虚调用未被优化\\_\n可以看到多个实现的虚调用未被优化，依然是 virtual_call。\nGraal 编译器针对这种情况，会去收集这部分执行的信息，比如在一段时间，发现前面的接口方法的调用 add 和 sub 是各占 50%的几率，那么 JVM 就会在每次运行时，遇到 add 就把 add 内联进来，遇到 sub 的情况再把 sub 函数内联进来，这样这两个路径的执行效率就会提升。在后续如果遇到其他不常见的情况，JVM 就会进行去优化的操作，在那个位置做标记，再遇到这种情况时切换回解释执行。\n\n### 3. 逃逸分析\n\n逃逸分析是“一种确定指针动态范围的静态分析，它可以分析在程序的哪些地方可以访问到指针”。Java 虚拟机的即时编译器会对新建的对象进行逃逸分析，判断对象是否逃逸出线程或者方法。即时编译器判断对象是否逃逸的依据有两种：\n\n1. 对象是否被存入堆中（静态字段或者堆中对象的实例字段），一旦对象被存入堆中，其他线程便能获得该对象的引用，即时编译器就无法追踪所有使用该对象的代码位置。\n1. 对象是否被传入未知代码中，即时编译器会将未被内联的代码当成未知代码，因为它无法确认该方法调用会不会将调用者或所传入的参数存储至堆中，这种情况，可以直接认为方法调用的调用者以及参数是逃逸的。\n\n逃逸分析通常是在方法内联的基础上进行的，即时编译器可以根据逃逸分析的结果进行诸如锁消除、栈上分配以及标量替换的优化。下面这段代码的就是对象未逃逸的例子：\npulbic **class** **Example**{ **public** **static** **void** **main**(String[] args) { example(); } **public** **static** **void** **example**() { Foo foo = **new** Foo(); Bar bar = **new** Bar(); bar.setFoo(foo); } } **class** **Foo** {} **class** **Bar** { **private** Foo foo; **public** **void** **setFoo**(Foo foo) { **this**.foo = foo; } } }\n在这个例子中，创建了两个对象 foo 和 bar，其中一个作为另一个方法的参数提供。该方法 setFoo()存储对收到的 Foo 对象的引用。如果 Bar 对象在堆上，则对 Foo 的引用将逃逸。但是在这种情况下，编译器可以通过逃逸分析确定 Bar 对象本身不会对逃逸出 example()的调用。这意味着对 Foo 的引用也不能逃逸。因此，编译器可以安全地在栈上分配两个对象。\n**锁消除**\n在学习 Java 并发编程时会了解锁消除，而锁消除就是在逃逸分析的基础上进行的。\n如果即时编译器能够证明锁对象不逃逸，那么对该锁对象的加锁、解锁操作没就有意义。因为线程并不能获得该锁对象。在这种情况下，即时编译器会消除对该不逃逸锁对象的加锁、解锁操作。实际上，编译器仅需证明锁对象不逃逸出线程，便可以进行锁消除。由于 Java 虚拟机即时编译的限制，上述条件被强化为证明锁对象不逃逸出当前编译的方法。不过，基于逃逸分析的锁消除实际上并不多见。\n**栈上分配**\n我们都知道 Java 的对象是在堆上分配的，而堆是对所有对象可见的。同时，JVM 需要对所分配的堆内存进行管理，并且在对象不再被引用时回收其所占据的内存。如果逃逸分析能够证明某些新建的对象不逃逸，那么 JVM 完全可以将其分配至栈上，并且在 new 语句所在的方法退出时，通过弹出当前方法的栈桢来自动回收所分配的内存空间。这样一来，我们便无须借助垃圾回收器来处理不再被引用的对象。不过 Hotspot 虚拟机，并没有进行实际的栈上分配，而是使用了标量替换这一技术。所谓的标量，就是仅能存储一个值的变量，比如 Java 代码中的基本类型。与之相反，聚合量则可能同时存储多个值，其中一个典型的例子便是 Java 的对象。编译器会在方法内将未逃逸的聚合量分解成多个标量，以此来减少堆上分配。下面是一个标量替换的例子：\n标量替换\n**public** **class** **Example**{ @AllArgsConstructor **class** **Cat**{ **int** age; **int** weight; } **public** **static** **void** **example**(){ Cat cat = **new** Cat(1,10); addAgeAndWeight(cat.age,Cat.weight); } }\n经过逃逸分析，cat 对象未逃逸出 example()的调用，因此可以对聚合量 cat 进行分解，得到两个标量 age 和 weight，进行标量替换后的伪代码：\n**public** **class** **Example**{ @AllArgsConstructor **class** **Cat**{ **int** age; **int** weight; } **public** **static** **void** **example**(){ **int** age = 1; **int** weight = 10; addAgeAndWeight(age,weight); } }\n**部分逃逸分析**\n部分逃逸分析也是 Graal 对于概率预测的应用。通常来说，如果发现一个对象逃逸出了方法或者线程，JVM 就不会去进行优化，但是 Graal 编译器依然会去分析当前程序的执行路径，它会在逃逸分析基础上收集、判断哪些路径上对象会逃逸，哪些不会。然后根据这些信息，在不会逃逸的路径上进行锁消除、栈上分配这些优化手段。\n\n### 4. Loop Transformations\n\n在文章中介绍 C2 编译器的部分有提及到，C2 编译器在构建 Ideal Graph 后会进行很多的全局优化，其中就包括对循环的转换，最重要的两种转换就是循环展开和循环分离。\n**循环展开**\n循环展开是一种循环转换技术，它试图以牺牲程序二进制码大小为代价来优化程序的执行速度，是一种用空间换时间的优化手段。\n循环展开通过减少或消除控制程序循环的指令，来减少计算开销，这种开销包括增加指向数组中下一个索引或者指令的指针算数等。如果编译器可以提前计算这些索引，并且构建到机器代码指令中，那么程序运行时就可以不必进行这种计算。也就是说有些循环可以写成一些重复独立的代码。比如下面这个循环：\n循环展开\n**public** **void** **loopRolling**(){ **for**(**int** i = 0;i<200;i++){ **delete**(i); } }\n上面的代码需要循环删除 200 次，通过循环展开可以得到下面这段代码：\n循环展开\n**public** **void** **loopRolling**(){ **for**(**int** i = 0;i<200;i+=5){ **delete**(i); **delete**(i+1); **delete**(i+2); **delete**(i+3); **delete**(i+4); } }\n这样展开就可以减少循环的次数，每次循环内的计算也可以利用 CPU 的流水线提升效率。当然这只是一个示例，实际进行展开时，JVM 会去评估展开带来的收益，再决定是否进行展开。\n**循环分离**\n循环分离也是循环转换的一种手段。它把循环中一次或多次的特殊迭代分离出来，在循环外执行。举个例子，下面这段代码：\n循环分离\n**int** a = 10; **for**(**int** i = 0;i<10;i++){ b[i] = **x**[i] + **x**[a]; a = i; }\n可以看出这段代码除了第一次循环 a = 10 以外，其他的情况 a 都等于 i-1。所以可以把特殊情况分离出去，变成下面这段代码：\n循环分离\nb[0] = x[0] + 10; for(int i = 1;i<10;i++){ b[i] = x[i] + x[i-1]; }\n这种等效的转换消除了在循环中对 a 变量的需求，从而减少了开销。\n\n### 5. 窥孔优化与寄存器分配\n\n前文提到的窥孔优化是优化的最后一步，这之后就会程序就会转换成机器码，窥孔优化就是将编译器所生成的中间代码（或目标代码）中相邻指令，将其中的某些组合替换为效率更高的指令组，常见的比如强度削减、常数合并等，看下面这个例子就是一个强度削减的例子：\n强度削减\ny1=x1\\*3 经过强度削减后得到 y1=(x1<<1)+x1\n编译器使用移位和加法削减乘法的强度，使用更高效率的指令组。\n寄存器分配也是一种编译的优化手段，在 C2 编译器中普遍的使用。它是通过把频繁使用的变量保存在寄存器中，CPU 访问寄存器的速度比内存快得多，可以提升程序的运行速度。\n寄存器分配和窥孔优化是程序优化的最后一步。经过寄存器分配和窥孔优化之后，程序就会被转换成机器码保存在 codeCache 中。\n\n## 四、实践\n\n即时编译器情况复杂，同时网络上也很少有实战经验，以下是我们团队的一些调整经验。\n\n### 1. 编译相关的重\\* 要参数\n\n- -XX:+TieredCompilation：开启分层编译，JDK8 之后默认开启\n- -XX:+CICompilerCount=N：编译线程数，设置数量后，JVM 会自动分配线程数，C1:C2 = 1:2\n- -XX:TierXBackEdgeThreshold：OSR 编译的阈值\n- -XX:TierXMinInvocationThreshold：开启分层编译后各层调用的阈值\n- -XX:TierXCompileThreshold：开启分层编译后的编译阈值\n- -XX:ReservedCodeCacheSize：codeCache 最大大小\n- -XX:InitialCodeCacheSize：codeCache 初始大小\n\n-XX:TierXMinInvocationThreshold 是开启分层编译的情况下，触发编译的阈值参数，当方法调用次数大于由参数-XX:TierXInvocationThreshold 指定的阈值乘以系数，或者当方法调用次数大于由参数-XX:TierXMINInvocationThreshold 指定的阈值乘以系数，并且方法调用次数和循环回边次数之和大于由参数-XX:TierXCompileThreshold 指定的阈值乘以系数时，便会触发 X 层即时编译。分层编译开启下会乘以一个系数，系数根据当前编译的方法和编译线程数确定，降低阈值可以提升编译方法数，一些常用但是不能编译的方法可以编译优化提升性能。\n由于编译情况复杂，JVM 也会动态调整相关的阈值来保证 JVM 的性能，所以不建议手动调整编译相关的参数。除非一些特定的 Case，比如 codeCache 满了停止了编译，可以适当增加 codeCache 大小，或者一些非常常用的方法，未被内联到，拖累了性能，可以调整内敛层数或者内联方法的大小来解决。\n\n### 2. 通过 JITwatch 分析编译日志\n\n通过增加-XX:+UnlockDiagnosticVMOptions -XX:+PrintCompilation -XX:+PrintInlining -XX:+PrintCodeCache -XX:+PrintCodeCacheOnCompilation -XX:+TraceClassLoading -XX:+LogCompilation -XX:LogFile=LogPath 参数可以输出编译、内联、codeCache 信息到文件。但是打印的编译日志多且复杂很难直接从其中得到信息，可以使用 JITwatch 的工具来分析编译日志。JITwatch 首页的 Open Log 选中日志文件，点击 Start 就可以开始分析日志。\n\n如上图所示，区域 1 中是整个项目 Java Class 包括引入的第三方依赖；区域 2 是功能区 Timeline 以图形的形式展示 JIT 编译的时间轴，Histo 是直方图展示一些信息，TopList 里面是编译中产生的一些对象和数据的排序，Cache 是空闲 codeCache 空间，NMethod 是 Native 方法，Threads 是 JIT 编译的线程；区域 3 是 JITwatch 对日志分析结果的展示，其中 Suggestions 中会给出一些代码优化的建议，举个例子，如下图中：\n\n我们可以看到在调用 ZipInputStream 的 read 方法时，因为该方法没有被标记为热点方法，同时又“太大了”，导致无法被内联到。使用-XX:CompileCommand 中 inline 指令可以强制方法进行内联，不过还是建议谨慎使用，除非确定某个方法内联会带来不少的性能提升，否则不建议使用，并且过多使用对编译线程和 codeCache 都会带来不小的压力。\n区域 3 中的-Allocs 和-Locks 逃逸分析后 JVM 对代码做的优化，包括栈上分配、锁消除等。\n\n### 3. 使用 Graal 编译器\n\n由于 JVM 会去根据当前的编译方法数和编译线程数对编译阈值进行动态的调整，所以实际服务中对这一部分的调整空间是不大的，JVM 做的已经足够多了。\n为了提升性能，在服务中尝试了最新的 Graal 编译器。只需要使用-XX:+UnlockExperimentalVMOptions -XX:+UseJVMCICompiler 就可以启动 Graal 编译器来代替 C2 编译器，并且响应 C2 的编译请求，不过要注意的是，Graal 编译器与 ZGC 不兼容，只能与 G1 搭配使用。\n前文有提到过，Graal 是一个用 Java 写的即时编译器，它从 Java 9 开始便被集成自 JDK 中，作为实验性质的即时编译器。Graal 编译器就是脱身于 GraalVM，GraalVM 是一个高性能的、支持多种编程语言的执行环境。它既可以在传统的 OpenJDK 上运行，也可以通过 AOT（Ahead-Of-Time）编译成可执行文件单独运行，甚至可以集成至数据库中运行。\n前文提到过数次，Graal 的优化都基于某种假设（Assumption）。当假设出错的情况下，Java 虚拟机会借助去优化（Deoptimization）这项机制，从执行即时编译器生成的机器码切换回解释执行，在必要情况下，它甚至会废弃这份机器码，并在重新收集程序 profile 之后，再进行编译。\n这些中激进的手段使得 Graal 的峰值性能要好于 C2，而且在 Scale、Ruby 这种语言 Graal 表现更加出色，Twitter 目前已经在服务中大量的使用 Graal 来提升性能，企业版的 GraalVM 使得 Twitter 服务性能提升了 22%。\n**使用 Graal 编译器后性能表现**\n在我们的线上服务中，启用 Graal 编译后，TP9999 从 60ms -> 50ms ，下降 10ms，下降幅度达 16.7%。\n运行过程中的峰值性能会更高。可以看出对于该服务，Graal 编译器带来了一定的性能提升。\n**Graal 编译器的问题**\nGraal 编译器的优化方式更加激进，因此在启动时会进行更多的编译，Graal 编译器本身也需要被即时编译，所以服务刚启动时性能会比较差。\n考虑的解决办法：JDK 9 开始提供工具 jaotc，同时 GraalVM 的 Native Image 都是可以通过静态编译，极大地提升服务的启动速度的方式，但是 GraalVM 会使用自己的垃圾回收，这是一种很原始的基于复制算法的垃圾回收，相比 G1、ZGC 这些优秀的新型垃圾回收器，它的性能并不好。同时 GraalVM 对 Java 的一些特性支持也不够，比如基于配置的支持，比如反射就需要把所有需要反射的类配置一个 JSON 文件，在大量使用反射的服务，这样的配置会是很大的工作量。我们也在做这方面的调研。\n\n## 五、总结\n\n本文主要介绍了 JIT 即时编译的原理以及在美团一些实践的经验，还有最前沿的即时编译器的使用效果。作为一项解释型语言中提升性能的技术，JIT 已经比较成熟了，在很多语言中都有使用。对于 Java 服务，JVM 本身已经做了足够多，但是我们还应该不断深入了解 JIT 的优化原理和最新的编译技术，从而弥补 JIT 的劣势，提升 Java 服务的性能，不断追求卓越。\n","source":"_posts/yuque/Java即时编译器原理解析及实践.md","raw":"---\ntitle: Java即时编译器原理解析及实践\nurlname: ecpwax\ndate: '2021-09-26 11:40:38 +0800'\ntags: []\ncategories: []\n---\n\n## 一、导读\n\n常见的编译型语言如 C++，通常会把代码直接编译成 CPU 所能理解的机器码来运行。而 Java 为了实现“一次编译，处处运行”的特性，把编译的过程分成两部分，首先它会先由 javac 编译成通用的中间形式——字节码，然后再由解释器逐条将字节码解释为机器码来执行。所以在性能上，Java 通常不如 C++这类编译型语言。\n为了优化 Java 的性能 ，JVM 在解释器之外引入了即时（Just In Time）编译器：当程序运行时，解释器首先发挥作用，代码可以直接执行。随着时间推移，即时编译器逐渐发挥作用，把越来越多的代码编译优化成本地代码，来获取更高的执行效率。解释器这时可以作为编译运行的降级手段，在一些不可靠的编译优化出现问题时，再切换回解释执行，保证程序可以正常运行。\n即时编译器极大地提高了 Java 程序的运行速度，而且跟静态编译相比，即时编译器可以选择性地编译热点代码，省去了很多编译时间，也节省很多的空间。目前，即时编译器已经非常成熟了，在性能层面甚至可以和编译型语言相比。不过在这个领域，大家依然在不断探索如何结合不同的编译方式，使用更加智能的手段来提升程序的运行速度。\n\n## 二、Java 的执行过程\n\nJava 的执行过程整体可以分为两个部分，第一步由 javac 将源码编译成字节码，在这个过程中会进行词法分析、语法分析、语义分析，编译原理中这部分的编译称为前端编译。接下来无需编译直接逐条将字节码解释执行，在解释执行的过程中，虚拟机同时对程序运行的信息进行收集，在这些信息的基础上，编译器会逐渐发挥作用，它会进行后端编译——把字节码编译成机器码，但不是所有的代码都会被编译，只有被 JVM 认定为的热点代码，才可能被编译。\n怎么样才会被认为是热点代码呢？JVM 中会设置一个阈值，当方法或者代码块的在一定时间内的调用次数超过这个阈值时就会被编译，存入 codeCache 中。当下次执行时，再遇到这段代码，就会从 codeCache 中读取机器码，直接执行，以此来提升程序运行的性能。整体的执行过程大致如下图所示：\n\n### 1. JVM 中的编译器\n\nJVM 中集成了两种编译器，Client Compiler 和 Server Compiler，它们的作用也不同。Client Compiler 注重启动速度和局部的优化，Server Compiler 则更加关注全局的优化，性能会更好，但由于会进行更多的全局分析，所以启动速度会变慢。两种编译器有着不同的应用场景，在虚拟机中同时发挥作用。\n**Client Compiler**\nHotSpot VM 带有一个 Client Compiler C1 编译器。这种编译器启动速度快，但是性能比较 Server Compiler 来说会差一些。C1 会做三件事：\n\n- 局部简单可靠的优化，比如字节码上进行的一些基础优化，方法内联、常量传播等，放弃许多耗时较长的全局优化。\n- 将字节码构造成高级中间表示（High-level Intermediate Representation，以下称为 HIR），HIR 与平台无关，通常采用图结构，更适合 JVM 对程序进行优化。\n- 最后将 HIR 转换成低级中间表示（Low-level Intermediate Representation，以下称为 LIR），在 LIR 的基础上会进行寄存器分配、窥孔优化（局部的优化方式，编译器在一个基本块或者多个基本块中，针对已经生成的代码，结合 CPU 自己指令的特点，通过一些认为可能带来性能提升的转换规则或者通过整体的分析，进行指令转换，来提升代码性能）等操作，最终生成机器码。\n\n**Server Compiler**\nServer Compiler 主要关注一些编译耗时较长的全局优化，甚至会还会根据程序运行的信息进行一些不可靠的激进优化。这种编译器的启动时间长，适用于长时间运行的后台程序，它的性能通常比 Client Compiler 高 30%以上。目前，Hotspot 虚拟机中使用的 Server Compiler 有两种：C2 和 Graal。\n**C2 Compiler**\n在 Hotspot VM 中，默认的 Server Compiler 是 C2 编译器。\nC2 编译器在进行编译优化时，会使用一种控制流与数据流结合的图数据结构，称为 Ideal Graph。 Ideal Graph 表示当前程序的数据流向和指令间的依赖关系，依靠这种图结构，某些优化步骤（尤其是涉及浮动代码块的那些优化步骤）变得不那么复杂。\nIdeal Graph 的构建是在解析字节码的时候，根据字节码中的指令向一个空的 Graph 中添加节点，Graph 中的节点通常对应一个指令块，每个指令块包含多条相关联的指令，JVM 会利用一些优化技术对这些指令进行优化，比如 Global Value Numbering、常量折叠等，解析结束后，还会进行一些死代码剔除的操作。生成 Ideal Graph 后，会在这个基础上结合收集的程序运行信息来进行一些全局的优化，这个阶段如果 JVM 判断此时没有全局优化的必要，就会跳过这部分优化。\n无论是否进行全局优化，Ideal Graph 都会被转化为一种更接近机器层面的 MachNode Graph，最后编译的机器码就是从 MachNode Graph 中得的，生成机器码前还会有一些包括寄存器分配、窥孔优化等操作。关于 Ideal Graph 和各种全局的优化手段会在后面的章节详细介绍。Server Compiler 编译优化的过程如下图所示：\n\n**Graal Compiler**\n从 JDK 9 开始，Hotspot VM 中集成了一种新的 Server Compiler，Graal 编译器。相比 C2 编译器，Graal 有这样几种关键特性：\n\n- 前文有提到，JVM 会在解释执行的时候收集程序运行的各种信息，然后编译器会根据这些信息进行一些基于预测的激进优化，比如分支预测，根据程序不同分支的运行概率，选择性地编译一些概率较大的分支。Graal 比 C2 更加青睐这种优化，所以 Graal 的峰值性能通常要比 C2 更好。\n- 使用 Java 编写，对于 Java 语言，尤其是新特性，比如 Lambda、Stream 等更加友好。\n- 更深层次的优化，比如虚函数的内联、部分逃逸分析等。\n\nGraal 编译器可以通过 Java 虚拟机参数-XX:+UnlockExperimentalVMOptions -XX:+UseJVMCICompiler 启用。当启用时，它将替换掉 HotSpot 中的 C2 编译器，并响应原本由 C2 负责的编译请求。\n\n### 2. 分层编译\n\n在 Java 7 以前，需要研发人员根据服务的性质去选择编译器。对于需要快速启动的，或者一些不会长期运行的服务，可以采用编译效率较高的 C1，对应参数-client。长期运行的服务，或者对峰值性能有要求的后台服务，可以采用峰值性能更好的 C2，对应参数-server。Java 7 开始引入了分层编译的概念，它结合了 C1 和 C2 的优势，追求启动速度和峰值性能的一个平衡。分层编译将 JVM 的执行状态分为了五个层次。五个层级分别是：\n\n1. 解释执行。\n1. 执行不带 profiling 的 C1 代码。\n1. 执行仅带方法调用次数以及循环回边执行次数 profiling 的 C1 代码。\n1. 执行带所有 profiling 的 C1 代码。\n1. 执行 C2 代码。\n\nprofiling 就是收集能够反映程序执行状态的数据。其中最基本的统计数据就是方法的调用次数，以及循环回边的执行次数。\n通常情况下，C2 代码的执行效率要比 C1 代码的高出 30%以上。C1 层执行的代码，按执行效率排序从高至低则是 1 层>2 层>3 层。这 5 个层次中，1 层和 4 层都是终止状态，当一个方法到达终止状态后，只要编译后的代码并没有失效，那么 JVM 就不会再次发出该方法的编译请求的。服务实际运行时，JVM 会根据服务运行情况，从解释执行开始，选择不同的编译路径，直到到达终止状态。下图中就列举了几种常见的编译路径：\n\n- 图中第 ① 条路径，代表编译的一般情况，热点方法从解释执行到被 3 层的 C1 编译，最后被 4 层的 C2 编译。\n- 如果方法比较小（比如 Java 服务中常见的 getter/setter 方法），3 层的 profiling 没有收集到有价值的数据，JVM 就会断定该方法对于 C1 代码和 C2 代码的执行效率相同，就会执行图中第 ② 条路径。在这种情况下，JVM 会在 3 层编译之后，放弃进入 C2 编译，直接选择用 1 层的 C1 编译运行。\n- 在 C1 忙碌的情况下，执行图中第 ③ 条路径，在解释执行过程中对程序进行 profiling ，根据信息直接由第 4 层的 C2 编译。\n- 前文提到 C1 中的执行效率是 1 层>2 层>3 层，第 3 层一般要比第 2 层慢 35%以上，所以在 C2 忙碌的情况下，执行图中第 ④ 条路径。这时方法会被 2 层的 C1 编译，然后再被 3 层的 C1 编译，以减少方法在 3 层的执行时间。\n- 如果编译器做了一些比较激进的优化，比如分支预测，在实际运行时发现预测出错，这时就会进行反优化，重新进入解释执行，图中第 ⑤ 条执行路径代表的就是反优化。\n\n总的来说，C1 的编译速度更快，C2 的编译质量更高，分层编译的不同编译路径，也就是 JVM 根据当前服务的运行情况来寻找当前服务的最佳平衡点的一个过程。从 JDK 8 开始，JVM 默认开启分层编译。\n\n### 3. 即时编译的触发\n\nJava 虚拟机根据方法的调用次数以及循环回边的执行次数来触发即时编译。循环回边是一个控制流图中的概念，程序中可以简单理解为往回跳转的指令，比如下面这段代码：\n循环回边\n**public** **void** **nlp**(Object obj) { **int** sum = 0; **for** (**int** i = 0; i < 200; i++) { sum += i; } }\n上面这段代码经过编译生成下面的字节码。其中，偏移量为 18 的字节码将往回跳至偏移量为 4 的字节码中。在解释执行时，每当运行一次该指令，Java 虚拟机便会将该方法的循环回边计数器加 1。\n字节码\npublic void nlp(java.lang.Object); Code: 0: iconst_0 1: istore_1 2: iconst_0 3: istore_2 4: iload_2 5: sipush 200 8: if_icmpge 21 11: iload_1 12: iload_2 13: iadd 14: istore_1 15: iinc 2, 1 18: goto 4 21: return\n在即时编译过程中，编译器会识别循环的头部和尾部。上面这段字节码中，循环体的头部和尾部分别为偏移量为 11 的字节码和偏移量为 15 的字节码。编译器将在循环体结尾增加循环回边计数器的代码，来对循环进行计数。\n当方法的调用次数和循环回边的次数的和，超过由参数-XX:CompileThreshold 指定的阈值时（使用 C1 时，默认值为 1500；使用 C2 时，默认值为 10000），就会触发即时编译。\n开启分层编译的情况下，-XX:CompileThreshold 参数设置的阈值将会失效，触发编译会由以下的条件来判断：\n\n- 方法调用次数大于由参数-XX:TierXInvocationThreshold 指定的阈值乘以系数。\n- 方法调用次数大于由参数-XX:TierXMINInvocationThreshold 指定的阈值乘以系数，并且方法调用次数和循环回边次数之和大于由参数-XX:TierXCompileThreshold 指定的阈值乘以系数时。\n\n分层编译触发条件公式\ni > TierXInvocationThreshold _ s **||** (i > TierXMinInvocationThreshold _ s && i + **b **> TierXCompileThreshold \\* s) i 为调用次数，**b 是循环回边次数 **\n上述满足其中一个条件就会触发即时编译，并且 JVM 会根据当前的编译方法数以及编译线程数动态调整系数 s。\n\n## 三、编译优化\n\n即时编译器会对正在运行的服务进行一系列的优化，包括字节码解析过程中的分析，根据编译过程中代码的一些中间形式来做局部优化，还会根据程序依赖图进行全局优化，最后才会生成机器码。\n\n### 1. 中间表达形式（Intermediate Representation）\n\n在编译原理中，通常把编译器分为前端和后端，前端编译经过词法分析、语法分析、语义分析生成中间表达形式（Intermediate Representation，以下称为 IR），后端会对 IR 进行优化，生成目标代码。\nJava 字节码就是一种 IR，但是字节码的结构复杂，字节码这样代码形式的 IR 也不适合做全局的分析优化。现代编译器一般采用图结构的 IR，静态单赋值（Static Single Assignment，SSA）IR 是目前比较常用的一种。这种 IR 的特点是每个变量只能被赋值一次，而且只有当变量被赋值之后才能使用。举个例子：\nSSA IR\nPlain Text { a = 1; a = 2; b = a; }\n上述代码中我们可以轻易地发现 a = 1 的赋值是冗余的，但是编译器不能。传统的编译器需要借助数据流分析，从后至前依次确认哪些变量的值被覆盖掉。不过，如果借助了 SSA IR，编译器则可以很容易识别冗余赋值。\n上面代码的 SSA IR 形式的伪代码可以表示为：\nSSA IR\nPlain Text { a_1 = 1; a_2 = 2; b_1 = a_2; }\n由于 SSA IR 中每个变量只能赋值一次，所以代码中的 a 在 SSA IR 中会分成 a_1、a_2 两个变量来赋值，这样编译器就可以很容易通过扫描这些变量来发现 a_1 的赋值后并没有使用，赋值是冗余的。\n除此之外，SSA IR 对其他优化方式也有很大的帮助，例如下面这个死代码删除（Dead Code Elimination）的例子：\nDeadCodeElimination\n**public** **void** DeadCodeElimination{ **int** a = 2; **int** b = 0 **if**(2 > 1){ a = 1; } **else**{ b = 2; } **add**(a,b) }\n可以得到 SSA IR 伪代码：\nDeadCodeElimination\na_1 = 2; b_1 = 0 if true: a_2 = 1; else b_2 = 2; add(a,b)\n编译器通过执行字节码可以发现 b_2 赋值后不会被使用，else 分支不会被执行。经过死代码删除后就可以得到代码：\nDeadCodeElimination\n**public** **void** DeadCodeElimination{ **int** a = 1; **int** b = 0; **add**(a,b) }\n我们可以将编译器的每一种优化看成一个图优化算法，它接收一个 IR 图，并输出经过转换后的 IR 图。编译器优化的过程就是一个个图节点的优化串联起来的。\n**C1 中的中间表达形式**\n前文提及 C1 编译器内部使用高级中间表达形式 HIR，低级中间表达形式 LIR 来进行各种优化，这两种 IR 都是 SSA 形式的。\nHIR 是由很多基本块（Basic Block）组成的控制流图结构，每个块包含很多 SSA 形式的指令。基本块的结构如下图所示：\n\n其中，predecessors 表示前驱基本块（由于前驱可能是多个，所以是 BlockList 结构，是多个 BlockBegin 组成的可扩容数组）。同样，successors 表示多个后继基本块 BlockEnd。除了这两部分就是主体块，里面包含程序执行的指令和一个 next 指针，指向下一个执行的主体块。\n从字节码到 HIR 的构造最终调用的是 GraphBuilder，GraphBuilder 会遍历字节码构造所有代码基本块储存为一个链表结构，但是这个时候的基本块只有 BlockBegin，不包括具体的指令。第二步 GraphBuilder 会用一个 ValueStack 作为操作数栈和局部变量表，模拟执行字节码，构造出对应的 HIR，填充之前空的基本块，这里给出简单字节码块构造 HIR 的过程示例，如下所示：\n字节码构造 HIR\n字节码 **Local** **Value** **operand** **stack** **HIR** **5**: **iload_1** [i1,i2] [i1] **6**: **iload_2** [i1,i2] [i1,i2] ................................................ **i3**: **i1** _ **i2** **7**: **imul** **8**: **istore_3** [i1,i2，i3] [i3]\n可以看出，当执行 iload_1 时，操作数栈压入变量 i1，执行 iload_2 时，操作数栈压入变量 i2，执行相乘指令 imul 时弹出栈顶两个值，构造出 HIR i3 : i1 _ i2，生成的 i3 入栈。\nC1 编译器优化大部分都是在 HIR 之上完成的。当优化完成之后它会将 HIR 转化为 LIR，LIR 和 HIR 类似，也是一种编译器内部用到的 IR，HIR 通过优化消除一些中间节点就可以生成 LIR，形式上更加简化。\n**Sea-of-Nodes IR**\nC2 编译器中的 Ideal Graph 采用的是一种名为 Sea-of-Nodes 中间表达形式，同样也是 SSA 形式的。它最大特点是去除了变量的概念，直接采用值来进行运算。为了方便理解，可以利用 IR 可视化工具 Ideal Graph Visualizer（IGV），来展示具体的 IR 图。比如下面这段代码：\nexample\n**public** **static** **int** **foo**(**int** count) { **int** sum = 0; **for** (**int** i = 0; i < count; i++) { sum += i; } **return** sum; }\n对应的 IR 图如下所示：\n\n图中若干个顺序执行的节点将被包含在同一个基本块之中，如图中的 B0、B1 等。B0 基本块中 0 号 Start 节点是方法入口，B3 中 21 号 Return 节点是方法出口。红色加粗线条为控制流，蓝色线条为数据流，而其他颜色的线条则是特殊的控制流或数据流。被控制流边所连接的是固定节点，其他的则是浮动节点（浮动节点指只要能满足数据依赖关系，可以放在不同位置的节点，浮动节点变动的这个过程称为 Schedule）。\n这种图具有轻量级的边结构。 图中的边仅由指向另一个节点的指针表示。节点是 Node 子类的实例，带有指定输入边的指针数组。这种表示的优点是改变节点的输入边很快，如果想要改变输入边，只要将指针指向 Node，然后存入 Node 的指针数组就可以了。\n依赖于这种图结构，通过收集程序运行的信息，JVM 可以通过 Schedule 那些浮动节点，从而获得最好的编译效果。\n**Phi And Region Nodes**\nIdeal Graph 是 SSA IR。 由于没有变量的概念，这会带来一个问题，就是不同执行路径可能会对同一变量设置不同的值。例如下面这段代码 if 语句的两个分支中，分别返回 5 和 6。此时，根据不同的执行路径，所读取到的值很有可能不同。\nexample\n**int** **test**(**int** x) { **int** a = 0; **if**(x == 1) { a = 5; } **else** { a = 6; } **return** a; }\n为了解决这个问题，就引入一个 Phi Nodes 的概念，能够根据不同的执行路径选择不同的值。于是，上面这段代码可以表示为下面这张图：\n\nPhi Nodes 中保存不同路径上包含的所有值，Region Nodes 根据不同路径的判断条件，从 Phi Nodes 取得当前执行路径中变量应该赋予的值，带有 Phi 节点的 SSA 形式的伪代码如下：\nPhi Nodes\nint test(int x) { a_1 = 0; if(x == 1){ a_2 = 5; }else { a_3 = 6; } a_4 = Phi(a_2,a_3); return a_4; }\n**Global Value Numbering**\nGlobal Value Numbering（GVN） 是一种因为 Sea-of-Nodes 变得非常容易的优化技术 。\nGVN 是指为每一个计算得到的值分配一个独一无二的编号，然后遍历指令寻找优化的机会，它可以发现并消除等价计算的优化技术。如果一段程序中出现了多次操作数相同的乘法，那么即时编译器可以将这些乘法合并为一个，从而降低输出机器码的大小。如果这些乘法出现在同一执行路径上，那么 GVN 还将省下冗余的乘法操作。在 Sea-of-Nodes 中，由于只存在值的概念，因此 GVN 算法将非常简单：即时编译器只需判断该浮动节点是否与已存在的浮动节点的编号相同，所输入的 IR 节点是否一致，便可以将这两个浮动节点归并成一个。比如下面这段代码：\nGVN\na = 1; b = 2; c = a + b; d = a + b; e = d;\nGVN 会利用 Hash 算法编号，计算 a = 1 时，得到编号 1，计算 b = 2 时得到编号 2，计算 c = a + b 时得到编号 3，这些编号都会放入 Hash 表中保存，在计算 d = a + b 时，会发现 a + b 已经存在 Hash 表中，就不会再进行计算，直接从 Hash 表中取出计算过的值。最后的 e = d 也可以由 Hash 表中查到而进行复用。\n可以将 GVN 理解为在 IR 图上的公共子表达式消除（Common Subexpression Elimination，CSE）。两者区别在于，GVN 直接比较值的相同与否，而 CSE 是借助词法分析器来判断两个表达式相同与否。\n\n### 2.方法内联\n\n方法内联，是指在编译过程中遇到方法调用时，将目标方法的方法体纳入编译范围之中，并取代原方法调用的优化手段。JIT 大部分的优化都是在内联的基础上进行的，方法内联是即时编译器中非常重要的一环。\nJava 服务中存在大量 getter/setter 方法，如果没有方法内联，在调用 getter/setter 时，程序执行时需要保存当前方法的执行位置，创建并压入用于 getter/setter 的栈帧、访问字段、弹出栈帧，最后再恢复当前方法的执行。内联了对 getter/setter 的方法调用后，上述操作仅剩字段访问。在 C2 编译器 中，方法内联在解析字节码的过程中完成。当遇到方法调用字节码时，编译器将根据一些阈值参数决定是否需要内联当前方法的调用。如果需要内联，则开始解析目标方法的字节码。比如下面这个示例（来源于网络）：\n方法内联的过程\n**public** **static** **boolean** flag = **true**; **public** **static** **int** value0 = 0; **public** **static** **int** value1 = 1; **public** **static** **int** **foo**(**int** value) { **int** result = bar(flag); **if** (result != 0) { **return** result; } **else** { **return** value; } } **public** **static** **int** **bar**(**boolean** flag) { **return** flag ? value0 : value1; }\nbar 方法的 IR 图：\n\n内联后的 IR 图：\n\n内联不仅将被调用方法的 IR 图节点复制到调用者方法的 IR 图中，还要完成其他操作。\n被调用方法的参数替换为调用者方法进行方法调用时所传入参数。上面例子中，将 bar 方法中的 1 号 P(0)节点替换为 foo 方法 3 号 LoadField 节点。\n调用者方法的 IR 图中，方法调用节点的数据依赖会变成被调用方法的返回。如果存在多个返回节点，会生成一个 Phi 节点，将这些返回值聚合起来，并作为原方法调用节点的替换对象。图中就是将 8 号==节点，以及 12 号 Return 节点连接到原 5 号 Invoke 节点的边，然后指向新生成的 24 号 Phi 节点中。\n如果被调用方法将抛出某种类型的异常，而调用者方法恰好有该异常类型的处理器，并且该异常处理器覆盖这一方法调用，那么即时编译器需要将被调用方法抛出异常的路径，与调用者方法的异常处理器相连接。\n**方法内联的条件**\n编译器的大部分优化都是在方法内联的基础上。所以一般来说，内联的方法越多，生成代码的执行效率越高。但是对于即时编译器来说，内联的方法越多，编译时间也就越长，程序达到峰值性能的时刻也就比较晚。\n可以通过虚拟机参数-XX:MaxInlineLevel 调整内联的层数，以及 1 层的直接递归调用（可以通过虚拟机参数-XX:MaxRecursiveInlineLevel 调整）。一些常见的内联相关的参数如下表所示：\n\n**虚函数内联**\n内联是 JIT 提升性能的主要手段，但是虚函数使得内联是很难的，因为在内联阶段并不知道他们会调用哪个方法。例如，我们有一个数据处理的接口，这个接口中的一个方法有三种实现 add、sub 和 multi，JVM 是通过保存虚函数表 Virtual Method Table（以下称为 VMT）存储 class 对象中所有的虚函数，class 的实例对象保存着一个 VMT 的指针，程序运行时首先加载实例对象，然后通过实例对象找到 VMT，通过 VMT 找到对应方法的地址，所以虚函数的调用比直接指向方法地址的 classic call 性能上会差一些。很不幸的是，Java 中所有非私有的成员函数的调用都是虚调用。\nC2 编译器已经足够智能，能够检测这种情况并会对虚调用进行优化。比如下面这段代码例子：\nvirtual call\n**public** **class** **SimpleInliningTest** { **public** **static** **void** **main**(String[] args) **throws** InterruptedException { VirtualInvokeTest obj = **new** VirtualInvokeTest(); VirtualInvoke1 obj1 = **new** VirtualInvoke1(); **for** (**int** i = 0; i < 100000; i++) { invokeMethod(obj); invokeMethod(obj1); } Thread.sleep(1000); } **public** **static** **void** **invokeMethod**(VirtualInvokeTest obj) { obj.methodCall(); } **private** **static** **class** **VirtualInvokeTest** { **public** **void** **methodCall**() { System.out.println(\"virtual call\"); } } **private** **static** **class** **VirtualInvoke1** **extends** **VirtualInvokeTest** { @Override **public** **void** **methodCall**() { **super**.methodCall(); } } }\n经过 JIT 编译器优化后，进行反汇编得到下面这段汇编代码：\n0x0000000113369d37: callq 0x00000001132950a0 ; OopMap{off=476} ;*invokevirtual methodCall *//代表虚调用* ; - SimpleInliningTest::invokeMethod@1 (line 18) ; {optimized virtual*call} *//虚调用已经被优化\\_\n可以看到 JIT 对 methodCall 方法进行了虚调用优化 optimized virtual_call。经过优化后的方法可以被内联。但是 C2 编译器的能力有限，对于多个实现方法的虚调用就“无能为力”了。\n比如下面这段代码，我们增加一个实现：\n多实现的虚调用\n**public** **class** **SimpleInliningTest** { **public** **static** **void** **main**(String[] args) **throws** InterruptedException { VirtualInvokeTest obj = **new** VirtualInvokeTest(); VirtualInvoke1 obj1 = **new** VirtualInvoke1(); VirtualInvoke2 obj2 = **new** VirtualInvoke2(); **for** (**int** i = 0; i < 100000; i++) { invokeMethod(obj); invokeMethod(obj1); invokeMethod(obj2); } Thread.sleep(1000); } **public** **static** **void** **invokeMethod**(VirtualInvokeTest obj) { obj.methodCall(); } **private** **static** **class** **VirtualInvokeTest** { **public** **void** **methodCall**() { System.out.println(\"virtual call\"); } } **private** **static** **class** **VirtualInvoke1** **extends** **VirtualInvokeTest** { @Override **public** **void** **methodCall**() { **super**.methodCall(); } } **private** **static** **class** **VirtualInvoke2** **extends** **VirtualInvokeTest** { @Override **public** **void** **methodCall**() { **super**.methodCall(); } } }\n经过反编译得到下面的汇编代码：\n代码块\n0x000000011f5f0a37: callq 0x000000011f4fd2e0 ; OopMap{off=28} ;*invokevirtual methodCall _//代表虚调用_ ; - SimpleInliningTest::invokeMethod@1 (line 20) ; {virtual*call} *//虚调用未被优化\\_\n可以看到多个实现的虚调用未被优化，依然是 virtual_call。\nGraal 编译器针对这种情况，会去收集这部分执行的信息，比如在一段时间，发现前面的接口方法的调用 add 和 sub 是各占 50%的几率，那么 JVM 就会在每次运行时，遇到 add 就把 add 内联进来，遇到 sub 的情况再把 sub 函数内联进来，这样这两个路径的执行效率就会提升。在后续如果遇到其他不常见的情况，JVM 就会进行去优化的操作，在那个位置做标记，再遇到这种情况时切换回解释执行。\n\n### 3. 逃逸分析\n\n逃逸分析是“一种确定指针动态范围的静态分析，它可以分析在程序的哪些地方可以访问到指针”。Java 虚拟机的即时编译器会对新建的对象进行逃逸分析，判断对象是否逃逸出线程或者方法。即时编译器判断对象是否逃逸的依据有两种：\n\n1. 对象是否被存入堆中（静态字段或者堆中对象的实例字段），一旦对象被存入堆中，其他线程便能获得该对象的引用，即时编译器就无法追踪所有使用该对象的代码位置。\n1. 对象是否被传入未知代码中，即时编译器会将未被内联的代码当成未知代码，因为它无法确认该方法调用会不会将调用者或所传入的参数存储至堆中，这种情况，可以直接认为方法调用的调用者以及参数是逃逸的。\n\n逃逸分析通常是在方法内联的基础上进行的，即时编译器可以根据逃逸分析的结果进行诸如锁消除、栈上分配以及标量替换的优化。下面这段代码的就是对象未逃逸的例子：\npulbic **class** **Example**{ **public** **static** **void** **main**(String[] args) { example(); } **public** **static** **void** **example**() { Foo foo = **new** Foo(); Bar bar = **new** Bar(); bar.setFoo(foo); } } **class** **Foo** {} **class** **Bar** { **private** Foo foo; **public** **void** **setFoo**(Foo foo) { **this**.foo = foo; } } }\n在这个例子中，创建了两个对象 foo 和 bar，其中一个作为另一个方法的参数提供。该方法 setFoo()存储对收到的 Foo 对象的引用。如果 Bar 对象在堆上，则对 Foo 的引用将逃逸。但是在这种情况下，编译器可以通过逃逸分析确定 Bar 对象本身不会对逃逸出 example()的调用。这意味着对 Foo 的引用也不能逃逸。因此，编译器可以安全地在栈上分配两个对象。\n**锁消除**\n在学习 Java 并发编程时会了解锁消除，而锁消除就是在逃逸分析的基础上进行的。\n如果即时编译器能够证明锁对象不逃逸，那么对该锁对象的加锁、解锁操作没就有意义。因为线程并不能获得该锁对象。在这种情况下，即时编译器会消除对该不逃逸锁对象的加锁、解锁操作。实际上，编译器仅需证明锁对象不逃逸出线程，便可以进行锁消除。由于 Java 虚拟机即时编译的限制，上述条件被强化为证明锁对象不逃逸出当前编译的方法。不过，基于逃逸分析的锁消除实际上并不多见。\n**栈上分配**\n我们都知道 Java 的对象是在堆上分配的，而堆是对所有对象可见的。同时，JVM 需要对所分配的堆内存进行管理，并且在对象不再被引用时回收其所占据的内存。如果逃逸分析能够证明某些新建的对象不逃逸，那么 JVM 完全可以将其分配至栈上，并且在 new 语句所在的方法退出时，通过弹出当前方法的栈桢来自动回收所分配的内存空间。这样一来，我们便无须借助垃圾回收器来处理不再被引用的对象。不过 Hotspot 虚拟机，并没有进行实际的栈上分配，而是使用了标量替换这一技术。所谓的标量，就是仅能存储一个值的变量，比如 Java 代码中的基本类型。与之相反，聚合量则可能同时存储多个值，其中一个典型的例子便是 Java 的对象。编译器会在方法内将未逃逸的聚合量分解成多个标量，以此来减少堆上分配。下面是一个标量替换的例子：\n标量替换\n**public** **class** **Example**{ @AllArgsConstructor **class** **Cat**{ **int** age; **int** weight; } **public** **static** **void** **example**(){ Cat cat = **new** Cat(1,10); addAgeAndWeight(cat.age,Cat.weight); } }\n经过逃逸分析，cat 对象未逃逸出 example()的调用，因此可以对聚合量 cat 进行分解，得到两个标量 age 和 weight，进行标量替换后的伪代码：\n**public** **class** **Example**{ @AllArgsConstructor **class** **Cat**{ **int** age; **int** weight; } **public** **static** **void** **example**(){ **int** age = 1; **int** weight = 10; addAgeAndWeight(age,weight); } }\n**部分逃逸分析**\n部分逃逸分析也是 Graal 对于概率预测的应用。通常来说，如果发现一个对象逃逸出了方法或者线程，JVM 就不会去进行优化，但是 Graal 编译器依然会去分析当前程序的执行路径，它会在逃逸分析基础上收集、判断哪些路径上对象会逃逸，哪些不会。然后根据这些信息，在不会逃逸的路径上进行锁消除、栈上分配这些优化手段。\n\n### 4. Loop Transformations\n\n在文章中介绍 C2 编译器的部分有提及到，C2 编译器在构建 Ideal Graph 后会进行很多的全局优化，其中就包括对循环的转换，最重要的两种转换就是循环展开和循环分离。\n**循环展开**\n循环展开是一种循环转换技术，它试图以牺牲程序二进制码大小为代价来优化程序的执行速度，是一种用空间换时间的优化手段。\n循环展开通过减少或消除控制程序循环的指令，来减少计算开销，这种开销包括增加指向数组中下一个索引或者指令的指针算数等。如果编译器可以提前计算这些索引，并且构建到机器代码指令中，那么程序运行时就可以不必进行这种计算。也就是说有些循环可以写成一些重复独立的代码。比如下面这个循环：\n循环展开\n**public** **void** **loopRolling**(){ **for**(**int** i = 0;i<200;i++){ **delete**(i); } }\n上面的代码需要循环删除 200 次，通过循环展开可以得到下面这段代码：\n循环展开\n**public** **void** **loopRolling**(){ **for**(**int** i = 0;i<200;i+=5){ **delete**(i); **delete**(i+1); **delete**(i+2); **delete**(i+3); **delete**(i+4); } }\n这样展开就可以减少循环的次数，每次循环内的计算也可以利用 CPU 的流水线提升效率。当然这只是一个示例，实际进行展开时，JVM 会去评估展开带来的收益，再决定是否进行展开。\n**循环分离**\n循环分离也是循环转换的一种手段。它把循环中一次或多次的特殊迭代分离出来，在循环外执行。举个例子，下面这段代码：\n循环分离\n**int** a = 10; **for**(**int** i = 0;i<10;i++){ b[i] = **x**[i] + **x**[a]; a = i; }\n可以看出这段代码除了第一次循环 a = 10 以外，其他的情况 a 都等于 i-1。所以可以把特殊情况分离出去，变成下面这段代码：\n循环分离\nb[0] = x[0] + 10; for(int i = 1;i<10;i++){ b[i] = x[i] + x[i-1]; }\n这种等效的转换消除了在循环中对 a 变量的需求，从而减少了开销。\n\n### 5. 窥孔优化与寄存器分配\n\n前文提到的窥孔优化是优化的最后一步，这之后就会程序就会转换成机器码，窥孔优化就是将编译器所生成的中间代码（或目标代码）中相邻指令，将其中的某些组合替换为效率更高的指令组，常见的比如强度削减、常数合并等，看下面这个例子就是一个强度削减的例子：\n强度削减\ny1=x1\\*3 经过强度削减后得到 y1=(x1<<1)+x1\n编译器使用移位和加法削减乘法的强度，使用更高效率的指令组。\n寄存器分配也是一种编译的优化手段，在 C2 编译器中普遍的使用。它是通过把频繁使用的变量保存在寄存器中，CPU 访问寄存器的速度比内存快得多，可以提升程序的运行速度。\n寄存器分配和窥孔优化是程序优化的最后一步。经过寄存器分配和窥孔优化之后，程序就会被转换成机器码保存在 codeCache 中。\n\n## 四、实践\n\n即时编译器情况复杂，同时网络上也很少有实战经验，以下是我们团队的一些调整经验。\n\n### 1. 编译相关的重\\* 要参数\n\n- -XX:+TieredCompilation：开启分层编译，JDK8 之后默认开启\n- -XX:+CICompilerCount=N：编译线程数，设置数量后，JVM 会自动分配线程数，C1:C2 = 1:2\n- -XX:TierXBackEdgeThreshold：OSR 编译的阈值\n- -XX:TierXMinInvocationThreshold：开启分层编译后各层调用的阈值\n- -XX:TierXCompileThreshold：开启分层编译后的编译阈值\n- -XX:ReservedCodeCacheSize：codeCache 最大大小\n- -XX:InitialCodeCacheSize：codeCache 初始大小\n\n-XX:TierXMinInvocationThreshold 是开启分层编译的情况下，触发编译的阈值参数，当方法调用次数大于由参数-XX:TierXInvocationThreshold 指定的阈值乘以系数，或者当方法调用次数大于由参数-XX:TierXMINInvocationThreshold 指定的阈值乘以系数，并且方法调用次数和循环回边次数之和大于由参数-XX:TierXCompileThreshold 指定的阈值乘以系数时，便会触发 X 层即时编译。分层编译开启下会乘以一个系数，系数根据当前编译的方法和编译线程数确定，降低阈值可以提升编译方法数，一些常用但是不能编译的方法可以编译优化提升性能。\n由于编译情况复杂，JVM 也会动态调整相关的阈值来保证 JVM 的性能，所以不建议手动调整编译相关的参数。除非一些特定的 Case，比如 codeCache 满了停止了编译，可以适当增加 codeCache 大小，或者一些非常常用的方法，未被内联到，拖累了性能，可以调整内敛层数或者内联方法的大小来解决。\n\n### 2. 通过 JITwatch 分析编译日志\n\n通过增加-XX:+UnlockDiagnosticVMOptions -XX:+PrintCompilation -XX:+PrintInlining -XX:+PrintCodeCache -XX:+PrintCodeCacheOnCompilation -XX:+TraceClassLoading -XX:+LogCompilation -XX:LogFile=LogPath 参数可以输出编译、内联、codeCache 信息到文件。但是打印的编译日志多且复杂很难直接从其中得到信息，可以使用 JITwatch 的工具来分析编译日志。JITwatch 首页的 Open Log 选中日志文件，点击 Start 就可以开始分析日志。\n\n如上图所示，区域 1 中是整个项目 Java Class 包括引入的第三方依赖；区域 2 是功能区 Timeline 以图形的形式展示 JIT 编译的时间轴，Histo 是直方图展示一些信息，TopList 里面是编译中产生的一些对象和数据的排序，Cache 是空闲 codeCache 空间，NMethod 是 Native 方法，Threads 是 JIT 编译的线程；区域 3 是 JITwatch 对日志分析结果的展示，其中 Suggestions 中会给出一些代码优化的建议，举个例子，如下图中：\n\n我们可以看到在调用 ZipInputStream 的 read 方法时，因为该方法没有被标记为热点方法，同时又“太大了”，导致无法被内联到。使用-XX:CompileCommand 中 inline 指令可以强制方法进行内联，不过还是建议谨慎使用，除非确定某个方法内联会带来不少的性能提升，否则不建议使用，并且过多使用对编译线程和 codeCache 都会带来不小的压力。\n区域 3 中的-Allocs 和-Locks 逃逸分析后 JVM 对代码做的优化，包括栈上分配、锁消除等。\n\n### 3. 使用 Graal 编译器\n\n由于 JVM 会去根据当前的编译方法数和编译线程数对编译阈值进行动态的调整，所以实际服务中对这一部分的调整空间是不大的，JVM 做的已经足够多了。\n为了提升性能，在服务中尝试了最新的 Graal 编译器。只需要使用-XX:+UnlockExperimentalVMOptions -XX:+UseJVMCICompiler 就可以启动 Graal 编译器来代替 C2 编译器，并且响应 C2 的编译请求，不过要注意的是，Graal 编译器与 ZGC 不兼容，只能与 G1 搭配使用。\n前文有提到过，Graal 是一个用 Java 写的即时编译器，它从 Java 9 开始便被集成自 JDK 中，作为实验性质的即时编译器。Graal 编译器就是脱身于 GraalVM，GraalVM 是一个高性能的、支持多种编程语言的执行环境。它既可以在传统的 OpenJDK 上运行，也可以通过 AOT（Ahead-Of-Time）编译成可执行文件单独运行，甚至可以集成至数据库中运行。\n前文提到过数次，Graal 的优化都基于某种假设（Assumption）。当假设出错的情况下，Java 虚拟机会借助去优化（Deoptimization）这项机制，从执行即时编译器生成的机器码切换回解释执行，在必要情况下，它甚至会废弃这份机器码，并在重新收集程序 profile 之后，再进行编译。\n这些中激进的手段使得 Graal 的峰值性能要好于 C2，而且在 Scale、Ruby 这种语言 Graal 表现更加出色，Twitter 目前已经在服务中大量的使用 Graal 来提升性能，企业版的 GraalVM 使得 Twitter 服务性能提升了 22%。\n**使用 Graal 编译器后性能表现**\n在我们的线上服务中，启用 Graal 编译后，TP9999 从 60ms -> 50ms ，下降 10ms，下降幅度达 16.7%。\n运行过程中的峰值性能会更高。可以看出对于该服务，Graal 编译器带来了一定的性能提升。\n**Graal 编译器的问题**\nGraal 编译器的优化方式更加激进，因此在启动时会进行更多的编译，Graal 编译器本身也需要被即时编译，所以服务刚启动时性能会比较差。\n考虑的解决办法：JDK 9 开始提供工具 jaotc，同时 GraalVM 的 Native Image 都是可以通过静态编译，极大地提升服务的启动速度的方式，但是 GraalVM 会使用自己的垃圾回收，这是一种很原始的基于复制算法的垃圾回收，相比 G1、ZGC 这些优秀的新型垃圾回收器，它的性能并不好。同时 GraalVM 对 Java 的一些特性支持也不够，比如基于配置的支持，比如反射就需要把所有需要反射的类配置一个 JSON 文件，在大量使用反射的服务，这样的配置会是很大的工作量。我们也在做这方面的调研。\n\n## 五、总结\n\n本文主要介绍了 JIT 即时编译的原理以及在美团一些实践的经验，还有最前沿的即时编译器的使用效果。作为一项解释型语言中提升性能的技术，JIT 已经比较成熟了，在很多语言中都有使用。对于 Java 服务，JVM 本身已经做了足够多，但是我们还应该不断深入了解 JIT 的优化原理和最新的编译技术，从而弥补 JIT 的劣势，提升 Java 服务的性能，不断追求卓越。\n","slug":"yuque/Java即时编译器原理解析及实践","published":1,"updated":"2021-11-18T05:44:27.430Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckw4j4bhi000m3m3khudb79sm","content":"<h2 id=\"一、导读\"><a href=\"#一、导读\" class=\"headerlink\" title=\"一、导读\"></a>一、导读</h2><p>常见的编译型语言如 C++，通常会把代码直接编译成 CPU 所能理解的机器码来运行。而 Java 为了实现“一次编译，处处运行”的特性，把编译的过程分成两部分，首先它会先由 javac 编译成通用的中间形式——字节码，然后再由解释器逐条将字节码解释为机器码来执行。所以在性能上，Java 通常不如 C++这类编译型语言。<br>为了优化 Java 的性能 ，JVM 在解释器之外引入了即时（Just In Time）编译器：当程序运行时，解释器首先发挥作用，代码可以直接执行。随着时间推移，即时编译器逐渐发挥作用，把越来越多的代码编译优化成本地代码，来获取更高的执行效率。解释器这时可以作为编译运行的降级手段，在一些不可靠的编译优化出现问题时，再切换回解释执行，保证程序可以正常运行。<br>即时编译器极大地提高了 Java 程序的运行速度，而且跟静态编译相比，即时编译器可以选择性地编译热点代码，省去了很多编译时间，也节省很多的空间。目前，即时编译器已经非常成熟了，在性能层面甚至可以和编译型语言相比。不过在这个领域，大家依然在不断探索如何结合不同的编译方式，使用更加智能的手段来提升程序的运行速度。</p>\n<h2 id=\"二、Java-的执行过程\"><a href=\"#二、Java-的执行过程\" class=\"headerlink\" title=\"二、Java 的执行过程\"></a>二、Java 的执行过程</h2><p>Java 的执行过程整体可以分为两个部分，第一步由 javac 将源码编译成字节码，在这个过程中会进行词法分析、语法分析、语义分析，编译原理中这部分的编译称为前端编译。接下来无需编译直接逐条将字节码解释执行，在解释执行的过程中，虚拟机同时对程序运行的信息进行收集，在这些信息的基础上，编译器会逐渐发挥作用，它会进行后端编译——把字节码编译成机器码，但不是所有的代码都会被编译，只有被 JVM 认定为的热点代码，才可能被编译。<br>怎么样才会被认为是热点代码呢？JVM 中会设置一个阈值，当方法或者代码块的在一定时间内的调用次数超过这个阈值时就会被编译，存入 codeCache 中。当下次执行时，再遇到这段代码，就会从 codeCache 中读取机器码，直接执行，以此来提升程序运行的性能。整体的执行过程大致如下图所示：</p>\n<h3 id=\"1-JVM-中的编译器\"><a href=\"#1-JVM-中的编译器\" class=\"headerlink\" title=\"1. JVM 中的编译器\"></a>1. JVM 中的编译器</h3><p>JVM 中集成了两种编译器，Client Compiler 和 Server Compiler，它们的作用也不同。Client Compiler 注重启动速度和局部的优化，Server Compiler 则更加关注全局的优化，性能会更好，但由于会进行更多的全局分析，所以启动速度会变慢。两种编译器有着不同的应用场景，在虚拟机中同时发挥作用。<br><strong>Client Compiler</strong><br>HotSpot VM 带有一个 Client Compiler C1 编译器。这种编译器启动速度快，但是性能比较 Server Compiler 来说会差一些。C1 会做三件事：</p>\n<ul>\n<li>局部简单可靠的优化，比如字节码上进行的一些基础优化，方法内联、常量传播等，放弃许多耗时较长的全局优化。</li>\n<li>将字节码构造成高级中间表示（High-level Intermediate Representation，以下称为 HIR），HIR 与平台无关，通常采用图结构，更适合 JVM 对程序进行优化。</li>\n<li>最后将 HIR 转换成低级中间表示（Low-level Intermediate Representation，以下称为 LIR），在 LIR 的基础上会进行寄存器分配、窥孔优化（局部的优化方式，编译器在一个基本块或者多个基本块中，针对已经生成的代码，结合 CPU 自己指令的特点，通过一些认为可能带来性能提升的转换规则或者通过整体的分析，进行指令转换，来提升代码性能）等操作，最终生成机器码。</li>\n</ul>\n<p><strong>Server Compiler</strong><br>Server Compiler 主要关注一些编译耗时较长的全局优化，甚至会还会根据程序运行的信息进行一些不可靠的激进优化。这种编译器的启动时间长，适用于长时间运行的后台程序，它的性能通常比 Client Compiler 高 30%以上。目前，Hotspot 虚拟机中使用的 Server Compiler 有两种：C2 和 Graal。<br><strong>C2 Compiler</strong><br>在 Hotspot VM 中，默认的 Server Compiler 是 C2 编译器。<br>C2 编译器在进行编译优化时，会使用一种控制流与数据流结合的图数据结构，称为 Ideal Graph。 Ideal Graph 表示当前程序的数据流向和指令间的依赖关系，依靠这种图结构，某些优化步骤（尤其是涉及浮动代码块的那些优化步骤）变得不那么复杂。<br>Ideal Graph 的构建是在解析字节码的时候，根据字节码中的指令向一个空的 Graph 中添加节点，Graph 中的节点通常对应一个指令块，每个指令块包含多条相关联的指令，JVM 会利用一些优化技术对这些指令进行优化，比如 Global Value Numbering、常量折叠等，解析结束后，还会进行一些死代码剔除的操作。生成 Ideal Graph 后，会在这个基础上结合收集的程序运行信息来进行一些全局的优化，这个阶段如果 JVM 判断此时没有全局优化的必要，就会跳过这部分优化。<br>无论是否进行全局优化，Ideal Graph 都会被转化为一种更接近机器层面的 MachNode Graph，最后编译的机器码就是从 MachNode Graph 中得的，生成机器码前还会有一些包括寄存器分配、窥孔优化等操作。关于 Ideal Graph 和各种全局的优化手段会在后面的章节详细介绍。Server Compiler 编译优化的过程如下图所示：</p>\n<p><strong>Graal Compiler</strong><br>从 JDK 9 开始，Hotspot VM 中集成了一种新的 Server Compiler，Graal 编译器。相比 C2 编译器，Graal 有这样几种关键特性：</p>\n<ul>\n<li>前文有提到，JVM 会在解释执行的时候收集程序运行的各种信息，然后编译器会根据这些信息进行一些基于预测的激进优化，比如分支预测，根据程序不同分支的运行概率，选择性地编译一些概率较大的分支。Graal 比 C2 更加青睐这种优化，所以 Graal 的峰值性能通常要比 C2 更好。</li>\n<li>使用 Java 编写，对于 Java 语言，尤其是新特性，比如 Lambda、Stream 等更加友好。</li>\n<li>更深层次的优化，比如虚函数的内联、部分逃逸分析等。</li>\n</ul>\n<p>Graal 编译器可以通过 Java 虚拟机参数-XX:+UnlockExperimentalVMOptions -XX:+UseJVMCICompiler 启用。当启用时，它将替换掉 HotSpot 中的 C2 编译器，并响应原本由 C2 负责的编译请求。</p>\n<h3 id=\"2-分层编译\"><a href=\"#2-分层编译\" class=\"headerlink\" title=\"2. 分层编译\"></a>2. 分层编译</h3><p>在 Java 7 以前，需要研发人员根据服务的性质去选择编译器。对于需要快速启动的，或者一些不会长期运行的服务，可以采用编译效率较高的 C1，对应参数-client。长期运行的服务，或者对峰值性能有要求的后台服务，可以采用峰值性能更好的 C2，对应参数-server。Java 7 开始引入了分层编译的概念，它结合了 C1 和 C2 的优势，追求启动速度和峰值性能的一个平衡。分层编译将 JVM 的执行状态分为了五个层次。五个层级分别是：</p>\n<ol>\n<li>解释执行。</li>\n<li>执行不带 profiling 的 C1 代码。</li>\n<li>执行仅带方法调用次数以及循环回边执行次数 profiling 的 C1 代码。</li>\n<li>执行带所有 profiling 的 C1 代码。</li>\n<li>执行 C2 代码。</li>\n</ol>\n<p>profiling 就是收集能够反映程序执行状态的数据。其中最基本的统计数据就是方法的调用次数，以及循环回边的执行次数。<br>通常情况下，C2 代码的执行效率要比 C1 代码的高出 30%以上。C1 层执行的代码，按执行效率排序从高至低则是 1 层&gt;2 层&gt;3 层。这 5 个层次中，1 层和 4 层都是终止状态，当一个方法到达终止状态后，只要编译后的代码并没有失效，那么 JVM 就不会再次发出该方法的编译请求的。服务实际运行时，JVM 会根据服务运行情况，从解释执行开始，选择不同的编译路径，直到到达终止状态。下图中就列举了几种常见的编译路径：</p>\n<ul>\n<li>图中第 ① 条路径，代表编译的一般情况，热点方法从解释执行到被 3 层的 C1 编译，最后被 4 层的 C2 编译。</li>\n<li>如果方法比较小（比如 Java 服务中常见的 getter/setter 方法），3 层的 profiling 没有收集到有价值的数据，JVM 就会断定该方法对于 C1 代码和 C2 代码的执行效率相同，就会执行图中第 ② 条路径。在这种情况下，JVM 会在 3 层编译之后，放弃进入 C2 编译，直接选择用 1 层的 C1 编译运行。</li>\n<li>在 C1 忙碌的情况下，执行图中第 ③ 条路径，在解释执行过程中对程序进行 profiling ，根据信息直接由第 4 层的 C2 编译。</li>\n<li>前文提到 C1 中的执行效率是 1 层&gt;2 层&gt;3 层，第 3 层一般要比第 2 层慢 35%以上，所以在 C2 忙碌的情况下，执行图中第 ④ 条路径。这时方法会被 2 层的 C1 编译，然后再被 3 层的 C1 编译，以减少方法在 3 层的执行时间。</li>\n<li>如果编译器做了一些比较激进的优化，比如分支预测，在实际运行时发现预测出错，这时就会进行反优化，重新进入解释执行，图中第 ⑤ 条执行路径代表的就是反优化。</li>\n</ul>\n<p>总的来说，C1 的编译速度更快，C2 的编译质量更高，分层编译的不同编译路径，也就是 JVM 根据当前服务的运行情况来寻找当前服务的最佳平衡点的一个过程。从 JDK 8 开始，JVM 默认开启分层编译。</p>\n<h3 id=\"3-即时编译的触发\"><a href=\"#3-即时编译的触发\" class=\"headerlink\" title=\"3. 即时编译的触发\"></a>3. 即时编译的触发</h3><p>Java 虚拟机根据方法的调用次数以及循环回边的执行次数来触发即时编译。循环回边是一个控制流图中的概念，程序中可以简单理解为往回跳转的指令，比如下面这段代码：<br>循环回边<br><strong>public</strong> <strong>void</strong> <strong>nlp</strong>(Object obj) { <strong>int</strong> sum = 0; <strong>for</strong> (<strong>int</strong> i = 0; i &lt; 200; i++) { sum += i; } }<br>上面这段代码经过编译生成下面的字节码。其中，偏移量为 18 的字节码将往回跳至偏移量为 4 的字节码中。在解释执行时，每当运行一次该指令，Java 虚拟机便会将该方法的循环回边计数器加 1。<br>字节码<br>public void nlp(java.lang.Object); Code: 0: iconst_0 1: istore_1 2: iconst_0 3: istore_2 4: iload_2 5: sipush 200 8: if_icmpge 21 11: iload_1 12: iload_2 13: iadd 14: istore_1 15: iinc 2, 1 18: goto 4 21: return<br>在即时编译过程中，编译器会识别循环的头部和尾部。上面这段字节码中，循环体的头部和尾部分别为偏移量为 11 的字节码和偏移量为 15 的字节码。编译器将在循环体结尾增加循环回边计数器的代码，来对循环进行计数。<br>当方法的调用次数和循环回边的次数的和，超过由参数-XX:CompileThreshold 指定的阈值时（使用 C1 时，默认值为 1500；使用 C2 时，默认值为 10000），就会触发即时编译。<br>开启分层编译的情况下，-XX:CompileThreshold 参数设置的阈值将会失效，触发编译会由以下的条件来判断：</p>\n<ul>\n<li>方法调用次数大于由参数-XX:TierXInvocationThreshold 指定的阈值乘以系数。</li>\n<li>方法调用次数大于由参数-XX:TierXMINInvocationThreshold 指定的阈值乘以系数，并且方法调用次数和循环回边次数之和大于由参数-XX:TierXCompileThreshold 指定的阈值乘以系数时。</li>\n</ul>\n<p>分层编译触发条件公式<br>i &gt; TierXInvocationThreshold _ s <strong>||</strong> (i &gt; TierXMinInvocationThreshold _ s &amp;&amp; i + **b <strong>&gt; TierXCompileThreshold * s) i 为调用次数，</strong>b 是循环回边次数 **<br>上述满足其中一个条件就会触发即时编译，并且 JVM 会根据当前的编译方法数以及编译线程数动态调整系数 s。</p>\n<h2 id=\"三、编译优化\"><a href=\"#三、编译优化\" class=\"headerlink\" title=\"三、编译优化\"></a>三、编译优化</h2><p>即时编译器会对正在运行的服务进行一系列的优化，包括字节码解析过程中的分析，根据编译过程中代码的一些中间形式来做局部优化，还会根据程序依赖图进行全局优化，最后才会生成机器码。</p>\n<h3 id=\"1-中间表达形式（Intermediate-Representation）\"><a href=\"#1-中间表达形式（Intermediate-Representation）\" class=\"headerlink\" title=\"1. 中间表达形式（Intermediate Representation）\"></a>1. 中间表达形式（Intermediate Representation）</h3><p>在编译原理中，通常把编译器分为前端和后端，前端编译经过词法分析、语法分析、语义分析生成中间表达形式（Intermediate Representation，以下称为 IR），后端会对 IR 进行优化，生成目标代码。<br>Java 字节码就是一种 IR，但是字节码的结构复杂，字节码这样代码形式的 IR 也不适合做全局的分析优化。现代编译器一般采用图结构的 IR，静态单赋值（Static Single Assignment，SSA）IR 是目前比较常用的一种。这种 IR 的特点是每个变量只能被赋值一次，而且只有当变量被赋值之后才能使用。举个例子：<br>SSA IR<br>Plain Text { a = 1; a = 2; b = a; }<br>上述代码中我们可以轻易地发现 a = 1 的赋值是冗余的，但是编译器不能。传统的编译器需要借助数据流分析，从后至前依次确认哪些变量的值被覆盖掉。不过，如果借助了 SSA IR，编译器则可以很容易识别冗余赋值。<br>上面代码的 SSA IR 形式的伪代码可以表示为：<br>SSA IR<br>Plain Text { a_1 = 1; a_2 = 2; b_1 = a_2; }<br>由于 SSA IR 中每个变量只能赋值一次，所以代码中的 a 在 SSA IR 中会分成 a_1、a_2 两个变量来赋值，这样编译器就可以很容易通过扫描这些变量来发现 a_1 的赋值后并没有使用，赋值是冗余的。<br>除此之外，SSA IR 对其他优化方式也有很大的帮助，例如下面这个死代码删除（Dead Code Elimination）的例子：<br>DeadCodeElimination<br><strong>public</strong> <strong>void</strong> DeadCodeElimination{ <strong>int</strong> a = 2; <strong>int</strong> b = 0 <strong>if</strong>(2 &gt; 1){ a = 1; } <strong>else</strong>{ b = 2; } <strong>add</strong>(a,b) }<br>可以得到 SSA IR 伪代码：<br>DeadCodeElimination<br>a_1 = 2; b_1 = 0 if true: a_2 = 1; else b_2 = 2; add(a,b)<br>编译器通过执行字节码可以发现 b_2 赋值后不会被使用，else 分支不会被执行。经过死代码删除后就可以得到代码：<br>DeadCodeElimination<br><strong>public</strong> <strong>void</strong> DeadCodeElimination{ <strong>int</strong> a = 1; <strong>int</strong> b = 0; <strong>add</strong>(a,b) }<br>我们可以将编译器的每一种优化看成一个图优化算法，它接收一个 IR 图，并输出经过转换后的 IR 图。编译器优化的过程就是一个个图节点的优化串联起来的。<br><strong>C1 中的中间表达形式</strong><br>前文提及 C1 编译器内部使用高级中间表达形式 HIR，低级中间表达形式 LIR 来进行各种优化，这两种 IR 都是 SSA 形式的。<br>HIR 是由很多基本块（Basic Block）组成的控制流图结构，每个块包含很多 SSA 形式的指令。基本块的结构如下图所示：</p>\n<p>其中，predecessors 表示前驱基本块（由于前驱可能是多个，所以是 BlockList 结构，是多个 BlockBegin 组成的可扩容数组）。同样，successors 表示多个后继基本块 BlockEnd。除了这两部分就是主体块，里面包含程序执行的指令和一个 next 指针，指向下一个执行的主体块。<br>从字节码到 HIR 的构造最终调用的是 GraphBuilder，GraphBuilder 会遍历字节码构造所有代码基本块储存为一个链表结构，但是这个时候的基本块只有 BlockBegin，不包括具体的指令。第二步 GraphBuilder 会用一个 ValueStack 作为操作数栈和局部变量表，模拟执行字节码，构造出对应的 HIR，填充之前空的基本块，这里给出简单字节码块构造 HIR 的过程示例，如下所示：<br>字节码构造 HIR<br>字节码 <strong>Local</strong> <strong>Value</strong> <strong>operand</strong> <strong>stack</strong> <strong>HIR</strong> <strong>5</strong>: <strong>iload_1</strong> [i1,i2] [i1] <strong>6</strong>: <strong>iload_2</strong> [i1,i2] [i1,i2] ………………………………………… <strong>i3</strong>: <strong>i1</strong> _ <strong>i2</strong> <strong>7</strong>: <strong>imul</strong> <strong>8</strong>: <strong>istore_3</strong> [i1,i2，i3] [i3]<br>可以看出，当执行 iload_1 时，操作数栈压入变量 i1，执行 iload_2 时，操作数栈压入变量 i2，执行相乘指令 imul 时弹出栈顶两个值，构造出 HIR i3 : i1 _ i2，生成的 i3 入栈。<br>C1 编译器优化大部分都是在 HIR 之上完成的。当优化完成之后它会将 HIR 转化为 LIR，LIR 和 HIR 类似，也是一种编译器内部用到的 IR，HIR 通过优化消除一些中间节点就可以生成 LIR，形式上更加简化。<br><strong>Sea-of-Nodes IR</strong><br>C2 编译器中的 Ideal Graph 采用的是一种名为 Sea-of-Nodes 中间表达形式，同样也是 SSA 形式的。它最大特点是去除了变量的概念，直接采用值来进行运算。为了方便理解，可以利用 IR 可视化工具 Ideal Graph Visualizer（IGV），来展示具体的 IR 图。比如下面这段代码：<br>example<br><strong>public</strong> <strong>static</strong> <strong>int</strong> <strong>foo</strong>(<strong>int</strong> count) { <strong>int</strong> sum = 0; <strong>for</strong> (<strong>int</strong> i = 0; i &lt; count; i++) { sum += i; } <strong>return</strong> sum; }<br>对应的 IR 图如下所示：</p>\n<p>图中若干个顺序执行的节点将被包含在同一个基本块之中，如图中的 B0、B1 等。B0 基本块中 0 号 Start 节点是方法入口，B3 中 21 号 Return 节点是方法出口。红色加粗线条为控制流，蓝色线条为数据流，而其他颜色的线条则是特殊的控制流或数据流。被控制流边所连接的是固定节点，其他的则是浮动节点（浮动节点指只要能满足数据依赖关系，可以放在不同位置的节点，浮动节点变动的这个过程称为 Schedule）。<br>这种图具有轻量级的边结构。 图中的边仅由指向另一个节点的指针表示。节点是 Node 子类的实例，带有指定输入边的指针数组。这种表示的优点是改变节点的输入边很快，如果想要改变输入边，只要将指针指向 Node，然后存入 Node 的指针数组就可以了。<br>依赖于这种图结构，通过收集程序运行的信息，JVM 可以通过 Schedule 那些浮动节点，从而获得最好的编译效果。<br><strong>Phi And Region Nodes</strong><br>Ideal Graph 是 SSA IR。 由于没有变量的概念，这会带来一个问题，就是不同执行路径可能会对同一变量设置不同的值。例如下面这段代码 if 语句的两个分支中，分别返回 5 和 6。此时，根据不同的执行路径，所读取到的值很有可能不同。<br>example<br><strong>int</strong> <strong>test</strong>(<strong>int</strong> x) { <strong>int</strong> a = 0; <strong>if</strong>(x == 1) { a = 5; } <strong>else</strong> { a = 6; } <strong>return</strong> a; }<br>为了解决这个问题，就引入一个 Phi Nodes 的概念，能够根据不同的执行路径选择不同的值。于是，上面这段代码可以表示为下面这张图：</p>\n<p>Phi Nodes 中保存不同路径上包含的所有值，Region Nodes 根据不同路径的判断条件，从 Phi Nodes 取得当前执行路径中变量应该赋予的值，带有 Phi 节点的 SSA 形式的伪代码如下：<br>Phi Nodes<br>int test(int x) { a_1 = 0; if(x == 1){ a_2 = 5; }else { a_3 = 6; } a_4 = Phi(a_2,a_3); return a_4; }<br><strong>Global Value Numbering</strong><br>Global Value Numbering（GVN） 是一种因为 Sea-of-Nodes 变得非常容易的优化技术 。<br>GVN 是指为每一个计算得到的值分配一个独一无二的编号，然后遍历指令寻找优化的机会，它可以发现并消除等价计算的优化技术。如果一段程序中出现了多次操作数相同的乘法，那么即时编译器可以将这些乘法合并为一个，从而降低输出机器码的大小。如果这些乘法出现在同一执行路径上，那么 GVN 还将省下冗余的乘法操作。在 Sea-of-Nodes 中，由于只存在值的概念，因此 GVN 算法将非常简单：即时编译器只需判断该浮动节点是否与已存在的浮动节点的编号相同，所输入的 IR 节点是否一致，便可以将这两个浮动节点归并成一个。比如下面这段代码：<br>GVN<br>a = 1; b = 2; c = a + b; d = a + b; e = d;<br>GVN 会利用 Hash 算法编号，计算 a = 1 时，得到编号 1，计算 b = 2 时得到编号 2，计算 c = a + b 时得到编号 3，这些编号都会放入 Hash 表中保存，在计算 d = a + b 时，会发现 a + b 已经存在 Hash 表中，就不会再进行计算，直接从 Hash 表中取出计算过的值。最后的 e = d 也可以由 Hash 表中查到而进行复用。<br>可以将 GVN 理解为在 IR 图上的公共子表达式消除（Common Subexpression Elimination，CSE）。两者区别在于，GVN 直接比较值的相同与否，而 CSE 是借助词法分析器来判断两个表达式相同与否。</p>\n<h3 id=\"2-方法内联\"><a href=\"#2-方法内联\" class=\"headerlink\" title=\"2.方法内联\"></a>2.方法内联</h3><p>方法内联，是指在编译过程中遇到方法调用时，将目标方法的方法体纳入编译范围之中，并取代原方法调用的优化手段。JIT 大部分的优化都是在内联的基础上进行的，方法内联是即时编译器中非常重要的一环。<br>Java 服务中存在大量 getter/setter 方法，如果没有方法内联，在调用 getter/setter 时，程序执行时需要保存当前方法的执行位置，创建并压入用于 getter/setter 的栈帧、访问字段、弹出栈帧，最后再恢复当前方法的执行。内联了对 getter/setter 的方法调用后，上述操作仅剩字段访问。在 C2 编译器 中，方法内联在解析字节码的过程中完成。当遇到方法调用字节码时，编译器将根据一些阈值参数决定是否需要内联当前方法的调用。如果需要内联，则开始解析目标方法的字节码。比如下面这个示例（来源于网络）：<br>方法内联的过程<br><strong>public</strong> <strong>static</strong> <strong>boolean</strong> flag = <strong>true</strong>; <strong>public</strong> <strong>static</strong> <strong>int</strong> value0 = 0; <strong>public</strong> <strong>static</strong> <strong>int</strong> value1 = 1; <strong>public</strong> <strong>static</strong> <strong>int</strong> <strong>foo</strong>(<strong>int</strong> value) { <strong>int</strong> result = bar(flag); <strong>if</strong> (result != 0) { <strong>return</strong> result; } <strong>else</strong> { <strong>return</strong> value; } } <strong>public</strong> <strong>static</strong> <strong>int</strong> <strong>bar</strong>(<strong>boolean</strong> flag) { <strong>return</strong> flag ? value0 : value1; }<br>bar 方法的 IR 图：</p>\n<p>内联后的 IR 图：</p>\n<p>内联不仅将被调用方法的 IR 图节点复制到调用者方法的 IR 图中，还要完成其他操作。<br>被调用方法的参数替换为调用者方法进行方法调用时所传入参数。上面例子中，将 bar 方法中的 1 号 P(0)节点替换为 foo 方法 3 号 LoadField 节点。<br>调用者方法的 IR 图中，方法调用节点的数据依赖会变成被调用方法的返回。如果存在多个返回节点，会生成一个 Phi 节点，将这些返回值聚合起来，并作为原方法调用节点的替换对象。图中就是将 8 号==节点，以及 12 号 Return 节点连接到原 5 号 Invoke 节点的边，然后指向新生成的 24 号 Phi 节点中。<br>如果被调用方法将抛出某种类型的异常，而调用者方法恰好有该异常类型的处理器，并且该异常处理器覆盖这一方法调用，那么即时编译器需要将被调用方法抛出异常的路径，与调用者方法的异常处理器相连接。<br><strong>方法内联的条件</strong><br>编译器的大部分优化都是在方法内联的基础上。所以一般来说，内联的方法越多，生成代码的执行效率越高。但是对于即时编译器来说，内联的方法越多，编译时间也就越长，程序达到峰值性能的时刻也就比较晚。<br>可以通过虚拟机参数-XX:MaxInlineLevel 调整内联的层数，以及 1 层的直接递归调用（可以通过虚拟机参数-XX:MaxRecursiveInlineLevel 调整）。一些常见的内联相关的参数如下表所示：</p>\n<p><strong>虚函数内联</strong><br>内联是 JIT 提升性能的主要手段，但是虚函数使得内联是很难的，因为在内联阶段并不知道他们会调用哪个方法。例如，我们有一个数据处理的接口，这个接口中的一个方法有三种实现 add、sub 和 multi，JVM 是通过保存虚函数表 Virtual Method Table（以下称为 VMT）存储 class 对象中所有的虚函数，class 的实例对象保存着一个 VMT 的指针，程序运行时首先加载实例对象，然后通过实例对象找到 VMT，通过 VMT 找到对应方法的地址，所以虚函数的调用比直接指向方法地址的 classic call 性能上会差一些。很不幸的是，Java 中所有非私有的成员函数的调用都是虚调用。<br>C2 编译器已经足够智能，能够检测这种情况并会对虚调用进行优化。比如下面这段代码例子：<br>virtual call<br><strong>public</strong> <strong>class</strong> <strong>SimpleInliningTest</strong> { <strong>public</strong> <strong>static</strong> <strong>void</strong> <strong>main</strong>(String[] args) <strong>throws</strong> InterruptedException { VirtualInvokeTest obj = <strong>new</strong> VirtualInvokeTest(); VirtualInvoke1 obj1 = <strong>new</strong> VirtualInvoke1(); <strong>for</strong> (<strong>int</strong> i = 0; i &lt; 100000; i++) { invokeMethod(obj); invokeMethod(obj1); } Thread.sleep(1000); } <strong>public</strong> <strong>static</strong> <strong>void</strong> <strong>invokeMethod</strong>(VirtualInvokeTest obj) { obj.methodCall(); } <strong>private</strong> <strong>static</strong> <strong>class</strong> <strong>VirtualInvokeTest</strong> { <strong>public</strong> <strong>void</strong> <strong>methodCall</strong>() { System.out.println(“virtual call”); } } <strong>private</strong> <strong>static</strong> <strong>class</strong> <strong>VirtualInvoke1</strong> <strong>extends</strong> <strong>VirtualInvokeTest</strong> { @Override <strong>public</strong> <strong>void</strong> <strong>methodCall</strong>() { <strong>super</strong>.methodCall(); } } }<br>经过 JIT 编译器优化后，进行反汇编得到下面这段汇编代码：<br>0x0000000113369d37: callq 0x00000001132950a0 ; OopMap{off=476} ;<em>invokevirtual methodCall <em>//代表虚调用</em> ; - SimpleInliningTest::invokeMethod@1 (line 18) ; {optimized virtual</em>call} *//虚调用已经被优化_<br>可以看到 JIT 对 methodCall 方法进行了虚调用优化 optimized virtual_call。经过优化后的方法可以被内联。但是 C2 编译器的能力有限，对于多个实现方法的虚调用就“无能为力”了。<br>比如下面这段代码，我们增加一个实现：<br>多实现的虚调用<br><strong>public</strong> <strong>class</strong> <strong>SimpleInliningTest</strong> { <strong>public</strong> <strong>static</strong> <strong>void</strong> <strong>main</strong>(String[] args) <strong>throws</strong> InterruptedException { VirtualInvokeTest obj = <strong>new</strong> VirtualInvokeTest(); VirtualInvoke1 obj1 = <strong>new</strong> VirtualInvoke1(); VirtualInvoke2 obj2 = <strong>new</strong> VirtualInvoke2(); <strong>for</strong> (<strong>int</strong> i = 0; i &lt; 100000; i++) { invokeMethod(obj); invokeMethod(obj1); invokeMethod(obj2); } Thread.sleep(1000); } <strong>public</strong> <strong>static</strong> <strong>void</strong> <strong>invokeMethod</strong>(VirtualInvokeTest obj) { obj.methodCall(); } <strong>private</strong> <strong>static</strong> <strong>class</strong> <strong>VirtualInvokeTest</strong> { <strong>public</strong> <strong>void</strong> <strong>methodCall</strong>() { System.out.println(“virtual call”); } } <strong>private</strong> <strong>static</strong> <strong>class</strong> <strong>VirtualInvoke1</strong> <strong>extends</strong> <strong>VirtualInvokeTest</strong> { @Override <strong>public</strong> <strong>void</strong> <strong>methodCall</strong>() { <strong>super</strong>.methodCall(); } } <strong>private</strong> <strong>static</strong> <strong>class</strong> <strong>VirtualInvoke2</strong> <strong>extends</strong> <strong>VirtualInvokeTest</strong> { @Override <strong>public</strong> <strong>void</strong> <strong>methodCall</strong>() { <strong>super</strong>.methodCall(); } } }<br>经过反编译得到下面的汇编代码：<br>代码块<br>0x000000011f5f0a37: callq 0x000000011f4fd2e0 ; OopMap{off=28} ;<em>invokevirtual methodCall <em>//代表虚调用</em> ; - SimpleInliningTest::invokeMethod@1 (line 20) ; {virtual</em>call} *//虚调用未被优化_<br>可以看到多个实现的虚调用未被优化，依然是 virtual_call。<br>Graal 编译器针对这种情况，会去收集这部分执行的信息，比如在一段时间，发现前面的接口方法的调用 add 和 sub 是各占 50%的几率，那么 JVM 就会在每次运行时，遇到 add 就把 add 内联进来，遇到 sub 的情况再把 sub 函数内联进来，这样这两个路径的执行效率就会提升。在后续如果遇到其他不常见的情况，JVM 就会进行去优化的操作，在那个位置做标记，再遇到这种情况时切换回解释执行。</p>\n<h3 id=\"3-逃逸分析\"><a href=\"#3-逃逸分析\" class=\"headerlink\" title=\"3. 逃逸分析\"></a>3. 逃逸分析</h3><p>逃逸分析是“一种确定指针动态范围的静态分析，它可以分析在程序的哪些地方可以访问到指针”。Java 虚拟机的即时编译器会对新建的对象进行逃逸分析，判断对象是否逃逸出线程或者方法。即时编译器判断对象是否逃逸的依据有两种：</p>\n<ol>\n<li>对象是否被存入堆中（静态字段或者堆中对象的实例字段），一旦对象被存入堆中，其他线程便能获得该对象的引用，即时编译器就无法追踪所有使用该对象的代码位置。</li>\n<li>对象是否被传入未知代码中，即时编译器会将未被内联的代码当成未知代码，因为它无法确认该方法调用会不会将调用者或所传入的参数存储至堆中，这种情况，可以直接认为方法调用的调用者以及参数是逃逸的。</li>\n</ol>\n<p>逃逸分析通常是在方法内联的基础上进行的，即时编译器可以根据逃逸分析的结果进行诸如锁消除、栈上分配以及标量替换的优化。下面这段代码的就是对象未逃逸的例子：<br>pulbic <strong>class</strong> <strong>Example</strong>{ <strong>public</strong> <strong>static</strong> <strong>void</strong> <strong>main</strong>(String[] args) { example(); } <strong>public</strong> <strong>static</strong> <strong>void</strong> <strong>example</strong>() { Foo foo = <strong>new</strong> Foo(); Bar bar = <strong>new</strong> Bar(); bar.setFoo(foo); } } <strong>class</strong> <strong>Foo</strong> {} <strong>class</strong> <strong>Bar</strong> { <strong>private</strong> Foo foo; <strong>public</strong> <strong>void</strong> <strong>setFoo</strong>(Foo foo) { <strong>this</strong>.foo = foo; } } }<br>在这个例子中，创建了两个对象 foo 和 bar，其中一个作为另一个方法的参数提供。该方法 setFoo()存储对收到的 Foo 对象的引用。如果 Bar 对象在堆上，则对 Foo 的引用将逃逸。但是在这种情况下，编译器可以通过逃逸分析确定 Bar 对象本身不会对逃逸出 example()的调用。这意味着对 Foo 的引用也不能逃逸。因此，编译器可以安全地在栈上分配两个对象。<br><strong>锁消除</strong><br>在学习 Java 并发编程时会了解锁消除，而锁消除就是在逃逸分析的基础上进行的。<br>如果即时编译器能够证明锁对象不逃逸，那么对该锁对象的加锁、解锁操作没就有意义。因为线程并不能获得该锁对象。在这种情况下，即时编译器会消除对该不逃逸锁对象的加锁、解锁操作。实际上，编译器仅需证明锁对象不逃逸出线程，便可以进行锁消除。由于 Java 虚拟机即时编译的限制，上述条件被强化为证明锁对象不逃逸出当前编译的方法。不过，基于逃逸分析的锁消除实际上并不多见。<br><strong>栈上分配</strong><br>我们都知道 Java 的对象是在堆上分配的，而堆是对所有对象可见的。同时，JVM 需要对所分配的堆内存进行管理，并且在对象不再被引用时回收其所占据的内存。如果逃逸分析能够证明某些新建的对象不逃逸，那么 JVM 完全可以将其分配至栈上，并且在 new 语句所在的方法退出时，通过弹出当前方法的栈桢来自动回收所分配的内存空间。这样一来，我们便无须借助垃圾回收器来处理不再被引用的对象。不过 Hotspot 虚拟机，并没有进行实际的栈上分配，而是使用了标量替换这一技术。所谓的标量，就是仅能存储一个值的变量，比如 Java 代码中的基本类型。与之相反，聚合量则可能同时存储多个值，其中一个典型的例子便是 Java 的对象。编译器会在方法内将未逃逸的聚合量分解成多个标量，以此来减少堆上分配。下面是一个标量替换的例子：<br>标量替换<br><strong>public</strong> <strong>class</strong> <strong>Example</strong>{ @AllArgsConstructor <strong>class</strong> <strong>Cat</strong>{ <strong>int</strong> age; <strong>int</strong> weight; } <strong>public</strong> <strong>static</strong> <strong>void</strong> <strong>example</strong>(){ Cat cat = <strong>new</strong> Cat(1,10); addAgeAndWeight(cat.age,Cat.weight); } }<br>经过逃逸分析，cat 对象未逃逸出 example()的调用，因此可以对聚合量 cat 进行分解，得到两个标量 age 和 weight，进行标量替换后的伪代码：<br><strong>public</strong> <strong>class</strong> <strong>Example</strong>{ @AllArgsConstructor <strong>class</strong> <strong>Cat</strong>{ <strong>int</strong> age; <strong>int</strong> weight; } <strong>public</strong> <strong>static</strong> <strong>void</strong> <strong>example</strong>(){ <strong>int</strong> age = 1; <strong>int</strong> weight = 10; addAgeAndWeight(age,weight); } }<br><strong>部分逃逸分析</strong><br>部分逃逸分析也是 Graal 对于概率预测的应用。通常来说，如果发现一个对象逃逸出了方法或者线程，JVM 就不会去进行优化，但是 Graal 编译器依然会去分析当前程序的执行路径，它会在逃逸分析基础上收集、判断哪些路径上对象会逃逸，哪些不会。然后根据这些信息，在不会逃逸的路径上进行锁消除、栈上分配这些优化手段。</p>\n<h3 id=\"4-Loop-Transformations\"><a href=\"#4-Loop-Transformations\" class=\"headerlink\" title=\"4. Loop Transformations\"></a>4. Loop Transformations</h3><p>在文章中介绍 C2 编译器的部分有提及到，C2 编译器在构建 Ideal Graph 后会进行很多的全局优化，其中就包括对循环的转换，最重要的两种转换就是循环展开和循环分离。<br><strong>循环展开</strong><br>循环展开是一种循环转换技术，它试图以牺牲程序二进制码大小为代价来优化程序的执行速度，是一种用空间换时间的优化手段。<br>循环展开通过减少或消除控制程序循环的指令，来减少计算开销，这种开销包括增加指向数组中下一个索引或者指令的指针算数等。如果编译器可以提前计算这些索引，并且构建到机器代码指令中，那么程序运行时就可以不必进行这种计算。也就是说有些循环可以写成一些重复独立的代码。比如下面这个循环：<br>循环展开<br><strong>public</strong> <strong>void</strong> <strong>loopRolling</strong>(){ <strong>for</strong>(<strong>int</strong> i = 0;i&lt;200;i++){ <strong>delete</strong>(i); } }<br>上面的代码需要循环删除 200 次，通过循环展开可以得到下面这段代码：<br>循环展开<br><strong>public</strong> <strong>void</strong> <strong>loopRolling</strong>(){ <strong>for</strong>(<strong>int</strong> i = 0;i&lt;200;i+=5){ <strong>delete</strong>(i); <strong>delete</strong>(i+1); <strong>delete</strong>(i+2); <strong>delete</strong>(i+3); <strong>delete</strong>(i+4); } }<br>这样展开就可以减少循环的次数，每次循环内的计算也可以利用 CPU 的流水线提升效率。当然这只是一个示例，实际进行展开时，JVM 会去评估展开带来的收益，再决定是否进行展开。<br><strong>循环分离</strong><br>循环分离也是循环转换的一种手段。它把循环中一次或多次的特殊迭代分离出来，在循环外执行。举个例子，下面这段代码：<br>循环分离<br><strong>int</strong> a = 10; <strong>for</strong>(<strong>int</strong> i = 0;i&lt;10;i++){ b[i] = <strong>x</strong>[i] + <strong>x</strong>[a]; a = i; }<br>可以看出这段代码除了第一次循环 a = 10 以外，其他的情况 a 都等于 i-1。所以可以把特殊情况分离出去，变成下面这段代码：<br>循环分离<br>b[0] = x[0] + 10; for(int i = 1;i&lt;10;i++){ b[i] = x[i] + x[i-1]; }<br>这种等效的转换消除了在循环中对 a 变量的需求，从而减少了开销。</p>\n<h3 id=\"5-窥孔优化与寄存器分配\"><a href=\"#5-窥孔优化与寄存器分配\" class=\"headerlink\" title=\"5. 窥孔优化与寄存器分配\"></a>5. 窥孔优化与寄存器分配</h3><p>前文提到的窥孔优化是优化的最后一步，这之后就会程序就会转换成机器码，窥孔优化就是将编译器所生成的中间代码（或目标代码）中相邻指令，将其中的某些组合替换为效率更高的指令组，常见的比如强度削减、常数合并等，看下面这个例子就是一个强度削减的例子：<br>强度削减<br>y1=x1*3 经过强度削减后得到 y1=(x1&lt;&lt;1)+x1<br>编译器使用移位和加法削减乘法的强度，使用更高效率的指令组。<br>寄存器分配也是一种编译的优化手段，在 C2 编译器中普遍的使用。它是通过把频繁使用的变量保存在寄存器中，CPU 访问寄存器的速度比内存快得多，可以提升程序的运行速度。<br>寄存器分配和窥孔优化是程序优化的最后一步。经过寄存器分配和窥孔优化之后，程序就会被转换成机器码保存在 codeCache 中。</p>\n<h2 id=\"四、实践\"><a href=\"#四、实践\" class=\"headerlink\" title=\"四、实践\"></a>四、实践</h2><p>即时编译器情况复杂，同时网络上也很少有实战经验，以下是我们团队的一些调整经验。</p>\n<h3 id=\"1-编译相关的重-要参数\"><a href=\"#1-编译相关的重-要参数\" class=\"headerlink\" title=\"1. 编译相关的重* 要参数\"></a>1. 编译相关的重* 要参数</h3><ul>\n<li>-XX:+TieredCompilation：开启分层编译，JDK8 之后默认开启</li>\n<li>-XX:+CICompilerCount=N：编译线程数，设置数量后，JVM 会自动分配线程数，C1:C2 = 1:2</li>\n<li>-XX:TierXBackEdgeThreshold：OSR 编译的阈值</li>\n<li>-XX:TierXMinInvocationThreshold：开启分层编译后各层调用的阈值</li>\n<li>-XX:TierXCompileThreshold：开启分层编译后的编译阈值</li>\n<li>-XX:ReservedCodeCacheSize：codeCache 最大大小</li>\n<li>-XX:InitialCodeCacheSize：codeCache 初始大小</li>\n</ul>\n<p>-XX:TierXMinInvocationThreshold 是开启分层编译的情况下，触发编译的阈值参数，当方法调用次数大于由参数-XX:TierXInvocationThreshold 指定的阈值乘以系数，或者当方法调用次数大于由参数-XX:TierXMINInvocationThreshold 指定的阈值乘以系数，并且方法调用次数和循环回边次数之和大于由参数-XX:TierXCompileThreshold 指定的阈值乘以系数时，便会触发 X 层即时编译。分层编译开启下会乘以一个系数，系数根据当前编译的方法和编译线程数确定，降低阈值可以提升编译方法数，一些常用但是不能编译的方法可以编译优化提升性能。<br>由于编译情况复杂，JVM 也会动态调整相关的阈值来保证 JVM 的性能，所以不建议手动调整编译相关的参数。除非一些特定的 Case，比如 codeCache 满了停止了编译，可以适当增加 codeCache 大小，或者一些非常常用的方法，未被内联到，拖累了性能，可以调整内敛层数或者内联方法的大小来解决。</p>\n<h3 id=\"2-通过-JITwatch-分析编译日志\"><a href=\"#2-通过-JITwatch-分析编译日志\" class=\"headerlink\" title=\"2. 通过 JITwatch 分析编译日志\"></a>2. 通过 JITwatch 分析编译日志</h3><p>通过增加-XX:+UnlockDiagnosticVMOptions -XX:+PrintCompilation -XX:+PrintInlining -XX:+PrintCodeCache -XX:+PrintCodeCacheOnCompilation -XX:+TraceClassLoading -XX:+LogCompilation -XX:LogFile=LogPath 参数可以输出编译、内联、codeCache 信息到文件。但是打印的编译日志多且复杂很难直接从其中得到信息，可以使用 JITwatch 的工具来分析编译日志。JITwatch 首页的 Open Log 选中日志文件，点击 Start 就可以开始分析日志。</p>\n<p>如上图所示，区域 1 中是整个项目 Java Class 包括引入的第三方依赖；区域 2 是功能区 Timeline 以图形的形式展示 JIT 编译的时间轴，Histo 是直方图展示一些信息，TopList 里面是编译中产生的一些对象和数据的排序，Cache 是空闲 codeCache 空间，NMethod 是 Native 方法，Threads 是 JIT 编译的线程；区域 3 是 JITwatch 对日志分析结果的展示，其中 Suggestions 中会给出一些代码优化的建议，举个例子，如下图中：</p>\n<p>我们可以看到在调用 ZipInputStream 的 read 方法时，因为该方法没有被标记为热点方法，同时又“太大了”，导致无法被内联到。使用-XX:CompileCommand 中 inline 指令可以强制方法进行内联，不过还是建议谨慎使用，除非确定某个方法内联会带来不少的性能提升，否则不建议使用，并且过多使用对编译线程和 codeCache 都会带来不小的压力。<br>区域 3 中的-Allocs 和-Locks 逃逸分析后 JVM 对代码做的优化，包括栈上分配、锁消除等。</p>\n<h3 id=\"3-使用-Graal-编译器\"><a href=\"#3-使用-Graal-编译器\" class=\"headerlink\" title=\"3. 使用 Graal 编译器\"></a>3. 使用 Graal 编译器</h3><p>由于 JVM 会去根据当前的编译方法数和编译线程数对编译阈值进行动态的调整，所以实际服务中对这一部分的调整空间是不大的，JVM 做的已经足够多了。<br>为了提升性能，在服务中尝试了最新的 Graal 编译器。只需要使用-XX:+UnlockExperimentalVMOptions -XX:+UseJVMCICompiler 就可以启动 Graal 编译器来代替 C2 编译器，并且响应 C2 的编译请求，不过要注意的是，Graal 编译器与 ZGC 不兼容，只能与 G1 搭配使用。<br>前文有提到过，Graal 是一个用 Java 写的即时编译器，它从 Java 9 开始便被集成自 JDK 中，作为实验性质的即时编译器。Graal 编译器就是脱身于 GraalVM，GraalVM 是一个高性能的、支持多种编程语言的执行环境。它既可以在传统的 OpenJDK 上运行，也可以通过 AOT（Ahead-Of-Time）编译成可执行文件单独运行，甚至可以集成至数据库中运行。<br>前文提到过数次，Graal 的优化都基于某种假设（Assumption）。当假设出错的情况下，Java 虚拟机会借助去优化（Deoptimization）这项机制，从执行即时编译器生成的机器码切换回解释执行，在必要情况下，它甚至会废弃这份机器码，并在重新收集程序 profile 之后，再进行编译。<br>这些中激进的手段使得 Graal 的峰值性能要好于 C2，而且在 Scale、Ruby 这种语言 Graal 表现更加出色，Twitter 目前已经在服务中大量的使用 Graal 来提升性能，企业版的 GraalVM 使得 Twitter 服务性能提升了 22%。<br><strong>使用 Graal 编译器后性能表现</strong><br>在我们的线上服务中，启用 Graal 编译后，TP9999 从 60ms -&gt; 50ms ，下降 10ms，下降幅度达 16.7%。<br>运行过程中的峰值性能会更高。可以看出对于该服务，Graal 编译器带来了一定的性能提升。<br><strong>Graal 编译器的问题</strong><br>Graal 编译器的优化方式更加激进，因此在启动时会进行更多的编译，Graal 编译器本身也需要被即时编译，所以服务刚启动时性能会比较差。<br>考虑的解决办法：JDK 9 开始提供工具 jaotc，同时 GraalVM 的 Native Image 都是可以通过静态编译，极大地提升服务的启动速度的方式，但是 GraalVM 会使用自己的垃圾回收，这是一种很原始的基于复制算法的垃圾回收，相比 G1、ZGC 这些优秀的新型垃圾回收器，它的性能并不好。同时 GraalVM 对 Java 的一些特性支持也不够，比如基于配置的支持，比如反射就需要把所有需要反射的类配置一个 JSON 文件，在大量使用反射的服务，这样的配置会是很大的工作量。我们也在做这方面的调研。</p>\n<h2 id=\"五、总结\"><a href=\"#五、总结\" class=\"headerlink\" title=\"五、总结\"></a>五、总结</h2><p>本文主要介绍了 JIT 即时编译的原理以及在美团一些实践的经验，还有最前沿的即时编译器的使用效果。作为一项解释型语言中提升性能的技术，JIT 已经比较成熟了，在很多语言中都有使用。对于 Java 服务，JVM 本身已经做了足够多，但是我们还应该不断深入了解 JIT 的优化原理和最新的编译技术，从而弥补 JIT 的劣势，提升 Java 服务的性能，不断追求卓越。</p>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/img/default.jpg","excerpt":"","more":"<h2 id=\"一、导读\"><a href=\"#一、导读\" class=\"headerlink\" title=\"一、导读\"></a>一、导读</h2><p>常见的编译型语言如 C++，通常会把代码直接编译成 CPU 所能理解的机器码来运行。而 Java 为了实现“一次编译，处处运行”的特性，把编译的过程分成两部分，首先它会先由 javac 编译成通用的中间形式——字节码，然后再由解释器逐条将字节码解释为机器码来执行。所以在性能上，Java 通常不如 C++这类编译型语言。<br>为了优化 Java 的性能 ，JVM 在解释器之外引入了即时（Just In Time）编译器：当程序运行时，解释器首先发挥作用，代码可以直接执行。随着时间推移，即时编译器逐渐发挥作用，把越来越多的代码编译优化成本地代码，来获取更高的执行效率。解释器这时可以作为编译运行的降级手段，在一些不可靠的编译优化出现问题时，再切换回解释执行，保证程序可以正常运行。<br>即时编译器极大地提高了 Java 程序的运行速度，而且跟静态编译相比，即时编译器可以选择性地编译热点代码，省去了很多编译时间，也节省很多的空间。目前，即时编译器已经非常成熟了，在性能层面甚至可以和编译型语言相比。不过在这个领域，大家依然在不断探索如何结合不同的编译方式，使用更加智能的手段来提升程序的运行速度。</p>\n<h2 id=\"二、Java-的执行过程\"><a href=\"#二、Java-的执行过程\" class=\"headerlink\" title=\"二、Java 的执行过程\"></a>二、Java 的执行过程</h2><p>Java 的执行过程整体可以分为两个部分，第一步由 javac 将源码编译成字节码，在这个过程中会进行词法分析、语法分析、语义分析，编译原理中这部分的编译称为前端编译。接下来无需编译直接逐条将字节码解释执行，在解释执行的过程中，虚拟机同时对程序运行的信息进行收集，在这些信息的基础上，编译器会逐渐发挥作用，它会进行后端编译——把字节码编译成机器码，但不是所有的代码都会被编译，只有被 JVM 认定为的热点代码，才可能被编译。<br>怎么样才会被认为是热点代码呢？JVM 中会设置一个阈值，当方法或者代码块的在一定时间内的调用次数超过这个阈值时就会被编译，存入 codeCache 中。当下次执行时，再遇到这段代码，就会从 codeCache 中读取机器码，直接执行，以此来提升程序运行的性能。整体的执行过程大致如下图所示：</p>\n<h3 id=\"1-JVM-中的编译器\"><a href=\"#1-JVM-中的编译器\" class=\"headerlink\" title=\"1. JVM 中的编译器\"></a>1. JVM 中的编译器</h3><p>JVM 中集成了两种编译器，Client Compiler 和 Server Compiler，它们的作用也不同。Client Compiler 注重启动速度和局部的优化，Server Compiler 则更加关注全局的优化，性能会更好，但由于会进行更多的全局分析，所以启动速度会变慢。两种编译器有着不同的应用场景，在虚拟机中同时发挥作用。<br><strong>Client Compiler</strong><br>HotSpot VM 带有一个 Client Compiler C1 编译器。这种编译器启动速度快，但是性能比较 Server Compiler 来说会差一些。C1 会做三件事：</p>\n<ul>\n<li>局部简单可靠的优化，比如字节码上进行的一些基础优化，方法内联、常量传播等，放弃许多耗时较长的全局优化。</li>\n<li>将字节码构造成高级中间表示（High-level Intermediate Representation，以下称为 HIR），HIR 与平台无关，通常采用图结构，更适合 JVM 对程序进行优化。</li>\n<li>最后将 HIR 转换成低级中间表示（Low-level Intermediate Representation，以下称为 LIR），在 LIR 的基础上会进行寄存器分配、窥孔优化（局部的优化方式，编译器在一个基本块或者多个基本块中，针对已经生成的代码，结合 CPU 自己指令的特点，通过一些认为可能带来性能提升的转换规则或者通过整体的分析，进行指令转换，来提升代码性能）等操作，最终生成机器码。</li>\n</ul>\n<p><strong>Server Compiler</strong><br>Server Compiler 主要关注一些编译耗时较长的全局优化，甚至会还会根据程序运行的信息进行一些不可靠的激进优化。这种编译器的启动时间长，适用于长时间运行的后台程序，它的性能通常比 Client Compiler 高 30%以上。目前，Hotspot 虚拟机中使用的 Server Compiler 有两种：C2 和 Graal。<br><strong>C2 Compiler</strong><br>在 Hotspot VM 中，默认的 Server Compiler 是 C2 编译器。<br>C2 编译器在进行编译优化时，会使用一种控制流与数据流结合的图数据结构，称为 Ideal Graph。 Ideal Graph 表示当前程序的数据流向和指令间的依赖关系，依靠这种图结构，某些优化步骤（尤其是涉及浮动代码块的那些优化步骤）变得不那么复杂。<br>Ideal Graph 的构建是在解析字节码的时候，根据字节码中的指令向一个空的 Graph 中添加节点，Graph 中的节点通常对应一个指令块，每个指令块包含多条相关联的指令，JVM 会利用一些优化技术对这些指令进行优化，比如 Global Value Numbering、常量折叠等，解析结束后，还会进行一些死代码剔除的操作。生成 Ideal Graph 后，会在这个基础上结合收集的程序运行信息来进行一些全局的优化，这个阶段如果 JVM 判断此时没有全局优化的必要，就会跳过这部分优化。<br>无论是否进行全局优化，Ideal Graph 都会被转化为一种更接近机器层面的 MachNode Graph，最后编译的机器码就是从 MachNode Graph 中得的，生成机器码前还会有一些包括寄存器分配、窥孔优化等操作。关于 Ideal Graph 和各种全局的优化手段会在后面的章节详细介绍。Server Compiler 编译优化的过程如下图所示：</p>\n<p><strong>Graal Compiler</strong><br>从 JDK 9 开始，Hotspot VM 中集成了一种新的 Server Compiler，Graal 编译器。相比 C2 编译器，Graal 有这样几种关键特性：</p>\n<ul>\n<li>前文有提到，JVM 会在解释执行的时候收集程序运行的各种信息，然后编译器会根据这些信息进行一些基于预测的激进优化，比如分支预测，根据程序不同分支的运行概率，选择性地编译一些概率较大的分支。Graal 比 C2 更加青睐这种优化，所以 Graal 的峰值性能通常要比 C2 更好。</li>\n<li>使用 Java 编写，对于 Java 语言，尤其是新特性，比如 Lambda、Stream 等更加友好。</li>\n<li>更深层次的优化，比如虚函数的内联、部分逃逸分析等。</li>\n</ul>\n<p>Graal 编译器可以通过 Java 虚拟机参数-XX:+UnlockExperimentalVMOptions -XX:+UseJVMCICompiler 启用。当启用时，它将替换掉 HotSpot 中的 C2 编译器，并响应原本由 C2 负责的编译请求。</p>\n<h3 id=\"2-分层编译\"><a href=\"#2-分层编译\" class=\"headerlink\" title=\"2. 分层编译\"></a>2. 分层编译</h3><p>在 Java 7 以前，需要研发人员根据服务的性质去选择编译器。对于需要快速启动的，或者一些不会长期运行的服务，可以采用编译效率较高的 C1，对应参数-client。长期运行的服务，或者对峰值性能有要求的后台服务，可以采用峰值性能更好的 C2，对应参数-server。Java 7 开始引入了分层编译的概念，它结合了 C1 和 C2 的优势，追求启动速度和峰值性能的一个平衡。分层编译将 JVM 的执行状态分为了五个层次。五个层级分别是：</p>\n<ol>\n<li>解释执行。</li>\n<li>执行不带 profiling 的 C1 代码。</li>\n<li>执行仅带方法调用次数以及循环回边执行次数 profiling 的 C1 代码。</li>\n<li>执行带所有 profiling 的 C1 代码。</li>\n<li>执行 C2 代码。</li>\n</ol>\n<p>profiling 就是收集能够反映程序执行状态的数据。其中最基本的统计数据就是方法的调用次数，以及循环回边的执行次数。<br>通常情况下，C2 代码的执行效率要比 C1 代码的高出 30%以上。C1 层执行的代码，按执行效率排序从高至低则是 1 层&gt;2 层&gt;3 层。这 5 个层次中，1 层和 4 层都是终止状态，当一个方法到达终止状态后，只要编译后的代码并没有失效，那么 JVM 就不会再次发出该方法的编译请求的。服务实际运行时，JVM 会根据服务运行情况，从解释执行开始，选择不同的编译路径，直到到达终止状态。下图中就列举了几种常见的编译路径：</p>\n<ul>\n<li>图中第 ① 条路径，代表编译的一般情况，热点方法从解释执行到被 3 层的 C1 编译，最后被 4 层的 C2 编译。</li>\n<li>如果方法比较小（比如 Java 服务中常见的 getter/setter 方法），3 层的 profiling 没有收集到有价值的数据，JVM 就会断定该方法对于 C1 代码和 C2 代码的执行效率相同，就会执行图中第 ② 条路径。在这种情况下，JVM 会在 3 层编译之后，放弃进入 C2 编译，直接选择用 1 层的 C1 编译运行。</li>\n<li>在 C1 忙碌的情况下，执行图中第 ③ 条路径，在解释执行过程中对程序进行 profiling ，根据信息直接由第 4 层的 C2 编译。</li>\n<li>前文提到 C1 中的执行效率是 1 层&gt;2 层&gt;3 层，第 3 层一般要比第 2 层慢 35%以上，所以在 C2 忙碌的情况下，执行图中第 ④ 条路径。这时方法会被 2 层的 C1 编译，然后再被 3 层的 C1 编译，以减少方法在 3 层的执行时间。</li>\n<li>如果编译器做了一些比较激进的优化，比如分支预测，在实际运行时发现预测出错，这时就会进行反优化，重新进入解释执行，图中第 ⑤ 条执行路径代表的就是反优化。</li>\n</ul>\n<p>总的来说，C1 的编译速度更快，C2 的编译质量更高，分层编译的不同编译路径，也就是 JVM 根据当前服务的运行情况来寻找当前服务的最佳平衡点的一个过程。从 JDK 8 开始，JVM 默认开启分层编译。</p>\n<h3 id=\"3-即时编译的触发\"><a href=\"#3-即时编译的触发\" class=\"headerlink\" title=\"3. 即时编译的触发\"></a>3. 即时编译的触发</h3><p>Java 虚拟机根据方法的调用次数以及循环回边的执行次数来触发即时编译。循环回边是一个控制流图中的概念，程序中可以简单理解为往回跳转的指令，比如下面这段代码：<br>循环回边<br><strong>public</strong> <strong>void</strong> <strong>nlp</strong>(Object obj) { <strong>int</strong> sum = 0; <strong>for</strong> (<strong>int</strong> i = 0; i &lt; 200; i++) { sum += i; } }<br>上面这段代码经过编译生成下面的字节码。其中，偏移量为 18 的字节码将往回跳至偏移量为 4 的字节码中。在解释执行时，每当运行一次该指令，Java 虚拟机便会将该方法的循环回边计数器加 1。<br>字节码<br>public void nlp(java.lang.Object); Code: 0: iconst_0 1: istore_1 2: iconst_0 3: istore_2 4: iload_2 5: sipush 200 8: if_icmpge 21 11: iload_1 12: iload_2 13: iadd 14: istore_1 15: iinc 2, 1 18: goto 4 21: return<br>在即时编译过程中，编译器会识别循环的头部和尾部。上面这段字节码中，循环体的头部和尾部分别为偏移量为 11 的字节码和偏移量为 15 的字节码。编译器将在循环体结尾增加循环回边计数器的代码，来对循环进行计数。<br>当方法的调用次数和循环回边的次数的和，超过由参数-XX:CompileThreshold 指定的阈值时（使用 C1 时，默认值为 1500；使用 C2 时，默认值为 10000），就会触发即时编译。<br>开启分层编译的情况下，-XX:CompileThreshold 参数设置的阈值将会失效，触发编译会由以下的条件来判断：</p>\n<ul>\n<li>方法调用次数大于由参数-XX:TierXInvocationThreshold 指定的阈值乘以系数。</li>\n<li>方法调用次数大于由参数-XX:TierXMINInvocationThreshold 指定的阈值乘以系数，并且方法调用次数和循环回边次数之和大于由参数-XX:TierXCompileThreshold 指定的阈值乘以系数时。</li>\n</ul>\n<p>分层编译触发条件公式<br>i &gt; TierXInvocationThreshold _ s <strong>||</strong> (i &gt; TierXMinInvocationThreshold _ s &amp;&amp; i + **b <strong>&gt; TierXCompileThreshold * s) i 为调用次数，</strong>b 是循环回边次数 **<br>上述满足其中一个条件就会触发即时编译，并且 JVM 会根据当前的编译方法数以及编译线程数动态调整系数 s。</p>\n<h2 id=\"三、编译优化\"><a href=\"#三、编译优化\" class=\"headerlink\" title=\"三、编译优化\"></a>三、编译优化</h2><p>即时编译器会对正在运行的服务进行一系列的优化，包括字节码解析过程中的分析，根据编译过程中代码的一些中间形式来做局部优化，还会根据程序依赖图进行全局优化，最后才会生成机器码。</p>\n<h3 id=\"1-中间表达形式（Intermediate-Representation）\"><a href=\"#1-中间表达形式（Intermediate-Representation）\" class=\"headerlink\" title=\"1. 中间表达形式（Intermediate Representation）\"></a>1. 中间表达形式（Intermediate Representation）</h3><p>在编译原理中，通常把编译器分为前端和后端，前端编译经过词法分析、语法分析、语义分析生成中间表达形式（Intermediate Representation，以下称为 IR），后端会对 IR 进行优化，生成目标代码。<br>Java 字节码就是一种 IR，但是字节码的结构复杂，字节码这样代码形式的 IR 也不适合做全局的分析优化。现代编译器一般采用图结构的 IR，静态单赋值（Static Single Assignment，SSA）IR 是目前比较常用的一种。这种 IR 的特点是每个变量只能被赋值一次，而且只有当变量被赋值之后才能使用。举个例子：<br>SSA IR<br>Plain Text { a = 1; a = 2; b = a; }<br>上述代码中我们可以轻易地发现 a = 1 的赋值是冗余的，但是编译器不能。传统的编译器需要借助数据流分析，从后至前依次确认哪些变量的值被覆盖掉。不过，如果借助了 SSA IR，编译器则可以很容易识别冗余赋值。<br>上面代码的 SSA IR 形式的伪代码可以表示为：<br>SSA IR<br>Plain Text { a_1 = 1; a_2 = 2; b_1 = a_2; }<br>由于 SSA IR 中每个变量只能赋值一次，所以代码中的 a 在 SSA IR 中会分成 a_1、a_2 两个变量来赋值，这样编译器就可以很容易通过扫描这些变量来发现 a_1 的赋值后并没有使用，赋值是冗余的。<br>除此之外，SSA IR 对其他优化方式也有很大的帮助，例如下面这个死代码删除（Dead Code Elimination）的例子：<br>DeadCodeElimination<br><strong>public</strong> <strong>void</strong> DeadCodeElimination{ <strong>int</strong> a = 2; <strong>int</strong> b = 0 <strong>if</strong>(2 &gt; 1){ a = 1; } <strong>else</strong>{ b = 2; } <strong>add</strong>(a,b) }<br>可以得到 SSA IR 伪代码：<br>DeadCodeElimination<br>a_1 = 2; b_1 = 0 if true: a_2 = 1; else b_2 = 2; add(a,b)<br>编译器通过执行字节码可以发现 b_2 赋值后不会被使用，else 分支不会被执行。经过死代码删除后就可以得到代码：<br>DeadCodeElimination<br><strong>public</strong> <strong>void</strong> DeadCodeElimination{ <strong>int</strong> a = 1; <strong>int</strong> b = 0; <strong>add</strong>(a,b) }<br>我们可以将编译器的每一种优化看成一个图优化算法，它接收一个 IR 图，并输出经过转换后的 IR 图。编译器优化的过程就是一个个图节点的优化串联起来的。<br><strong>C1 中的中间表达形式</strong><br>前文提及 C1 编译器内部使用高级中间表达形式 HIR，低级中间表达形式 LIR 来进行各种优化，这两种 IR 都是 SSA 形式的。<br>HIR 是由很多基本块（Basic Block）组成的控制流图结构，每个块包含很多 SSA 形式的指令。基本块的结构如下图所示：</p>\n<p>其中，predecessors 表示前驱基本块（由于前驱可能是多个，所以是 BlockList 结构，是多个 BlockBegin 组成的可扩容数组）。同样，successors 表示多个后继基本块 BlockEnd。除了这两部分就是主体块，里面包含程序执行的指令和一个 next 指针，指向下一个执行的主体块。<br>从字节码到 HIR 的构造最终调用的是 GraphBuilder，GraphBuilder 会遍历字节码构造所有代码基本块储存为一个链表结构，但是这个时候的基本块只有 BlockBegin，不包括具体的指令。第二步 GraphBuilder 会用一个 ValueStack 作为操作数栈和局部变量表，模拟执行字节码，构造出对应的 HIR，填充之前空的基本块，这里给出简单字节码块构造 HIR 的过程示例，如下所示：<br>字节码构造 HIR<br>字节码 <strong>Local</strong> <strong>Value</strong> <strong>operand</strong> <strong>stack</strong> <strong>HIR</strong> <strong>5</strong>: <strong>iload_1</strong> [i1,i2] [i1] <strong>6</strong>: <strong>iload_2</strong> [i1,i2] [i1,i2] ………………………………………… <strong>i3</strong>: <strong>i1</strong> _ <strong>i2</strong> <strong>7</strong>: <strong>imul</strong> <strong>8</strong>: <strong>istore_3</strong> [i1,i2，i3] [i3]<br>可以看出，当执行 iload_1 时，操作数栈压入变量 i1，执行 iload_2 时，操作数栈压入变量 i2，执行相乘指令 imul 时弹出栈顶两个值，构造出 HIR i3 : i1 _ i2，生成的 i3 入栈。<br>C1 编译器优化大部分都是在 HIR 之上完成的。当优化完成之后它会将 HIR 转化为 LIR，LIR 和 HIR 类似，也是一种编译器内部用到的 IR，HIR 通过优化消除一些中间节点就可以生成 LIR，形式上更加简化。<br><strong>Sea-of-Nodes IR</strong><br>C2 编译器中的 Ideal Graph 采用的是一种名为 Sea-of-Nodes 中间表达形式，同样也是 SSA 形式的。它最大特点是去除了变量的概念，直接采用值来进行运算。为了方便理解，可以利用 IR 可视化工具 Ideal Graph Visualizer（IGV），来展示具体的 IR 图。比如下面这段代码：<br>example<br><strong>public</strong> <strong>static</strong> <strong>int</strong> <strong>foo</strong>(<strong>int</strong> count) { <strong>int</strong> sum = 0; <strong>for</strong> (<strong>int</strong> i = 0; i &lt; count; i++) { sum += i; } <strong>return</strong> sum; }<br>对应的 IR 图如下所示：</p>\n<p>图中若干个顺序执行的节点将被包含在同一个基本块之中，如图中的 B0、B1 等。B0 基本块中 0 号 Start 节点是方法入口，B3 中 21 号 Return 节点是方法出口。红色加粗线条为控制流，蓝色线条为数据流，而其他颜色的线条则是特殊的控制流或数据流。被控制流边所连接的是固定节点，其他的则是浮动节点（浮动节点指只要能满足数据依赖关系，可以放在不同位置的节点，浮动节点变动的这个过程称为 Schedule）。<br>这种图具有轻量级的边结构。 图中的边仅由指向另一个节点的指针表示。节点是 Node 子类的实例，带有指定输入边的指针数组。这种表示的优点是改变节点的输入边很快，如果想要改变输入边，只要将指针指向 Node，然后存入 Node 的指针数组就可以了。<br>依赖于这种图结构，通过收集程序运行的信息，JVM 可以通过 Schedule 那些浮动节点，从而获得最好的编译效果。<br><strong>Phi And Region Nodes</strong><br>Ideal Graph 是 SSA IR。 由于没有变量的概念，这会带来一个问题，就是不同执行路径可能会对同一变量设置不同的值。例如下面这段代码 if 语句的两个分支中，分别返回 5 和 6。此时，根据不同的执行路径，所读取到的值很有可能不同。<br>example<br><strong>int</strong> <strong>test</strong>(<strong>int</strong> x) { <strong>int</strong> a = 0; <strong>if</strong>(x == 1) { a = 5; } <strong>else</strong> { a = 6; } <strong>return</strong> a; }<br>为了解决这个问题，就引入一个 Phi Nodes 的概念，能够根据不同的执行路径选择不同的值。于是，上面这段代码可以表示为下面这张图：</p>\n<p>Phi Nodes 中保存不同路径上包含的所有值，Region Nodes 根据不同路径的判断条件，从 Phi Nodes 取得当前执行路径中变量应该赋予的值，带有 Phi 节点的 SSA 形式的伪代码如下：<br>Phi Nodes<br>int test(int x) { a_1 = 0; if(x == 1){ a_2 = 5; }else { a_3 = 6; } a_4 = Phi(a_2,a_3); return a_4; }<br><strong>Global Value Numbering</strong><br>Global Value Numbering（GVN） 是一种因为 Sea-of-Nodes 变得非常容易的优化技术 。<br>GVN 是指为每一个计算得到的值分配一个独一无二的编号，然后遍历指令寻找优化的机会，它可以发现并消除等价计算的优化技术。如果一段程序中出现了多次操作数相同的乘法，那么即时编译器可以将这些乘法合并为一个，从而降低输出机器码的大小。如果这些乘法出现在同一执行路径上，那么 GVN 还将省下冗余的乘法操作。在 Sea-of-Nodes 中，由于只存在值的概念，因此 GVN 算法将非常简单：即时编译器只需判断该浮动节点是否与已存在的浮动节点的编号相同，所输入的 IR 节点是否一致，便可以将这两个浮动节点归并成一个。比如下面这段代码：<br>GVN<br>a = 1; b = 2; c = a + b; d = a + b; e = d;<br>GVN 会利用 Hash 算法编号，计算 a = 1 时，得到编号 1，计算 b = 2 时得到编号 2，计算 c = a + b 时得到编号 3，这些编号都会放入 Hash 表中保存，在计算 d = a + b 时，会发现 a + b 已经存在 Hash 表中，就不会再进行计算，直接从 Hash 表中取出计算过的值。最后的 e = d 也可以由 Hash 表中查到而进行复用。<br>可以将 GVN 理解为在 IR 图上的公共子表达式消除（Common Subexpression Elimination，CSE）。两者区别在于，GVN 直接比较值的相同与否，而 CSE 是借助词法分析器来判断两个表达式相同与否。</p>\n<h3 id=\"2-方法内联\"><a href=\"#2-方法内联\" class=\"headerlink\" title=\"2.方法内联\"></a>2.方法内联</h3><p>方法内联，是指在编译过程中遇到方法调用时，将目标方法的方法体纳入编译范围之中，并取代原方法调用的优化手段。JIT 大部分的优化都是在内联的基础上进行的，方法内联是即时编译器中非常重要的一环。<br>Java 服务中存在大量 getter/setter 方法，如果没有方法内联，在调用 getter/setter 时，程序执行时需要保存当前方法的执行位置，创建并压入用于 getter/setter 的栈帧、访问字段、弹出栈帧，最后再恢复当前方法的执行。内联了对 getter/setter 的方法调用后，上述操作仅剩字段访问。在 C2 编译器 中，方法内联在解析字节码的过程中完成。当遇到方法调用字节码时，编译器将根据一些阈值参数决定是否需要内联当前方法的调用。如果需要内联，则开始解析目标方法的字节码。比如下面这个示例（来源于网络）：<br>方法内联的过程<br><strong>public</strong> <strong>static</strong> <strong>boolean</strong> flag = <strong>true</strong>; <strong>public</strong> <strong>static</strong> <strong>int</strong> value0 = 0; <strong>public</strong> <strong>static</strong> <strong>int</strong> value1 = 1; <strong>public</strong> <strong>static</strong> <strong>int</strong> <strong>foo</strong>(<strong>int</strong> value) { <strong>int</strong> result = bar(flag); <strong>if</strong> (result != 0) { <strong>return</strong> result; } <strong>else</strong> { <strong>return</strong> value; } } <strong>public</strong> <strong>static</strong> <strong>int</strong> <strong>bar</strong>(<strong>boolean</strong> flag) { <strong>return</strong> flag ? value0 : value1; }<br>bar 方法的 IR 图：</p>\n<p>内联后的 IR 图：</p>\n<p>内联不仅将被调用方法的 IR 图节点复制到调用者方法的 IR 图中，还要完成其他操作。<br>被调用方法的参数替换为调用者方法进行方法调用时所传入参数。上面例子中，将 bar 方法中的 1 号 P(0)节点替换为 foo 方法 3 号 LoadField 节点。<br>调用者方法的 IR 图中，方法调用节点的数据依赖会变成被调用方法的返回。如果存在多个返回节点，会生成一个 Phi 节点，将这些返回值聚合起来，并作为原方法调用节点的替换对象。图中就是将 8 号==节点，以及 12 号 Return 节点连接到原 5 号 Invoke 节点的边，然后指向新生成的 24 号 Phi 节点中。<br>如果被调用方法将抛出某种类型的异常，而调用者方法恰好有该异常类型的处理器，并且该异常处理器覆盖这一方法调用，那么即时编译器需要将被调用方法抛出异常的路径，与调用者方法的异常处理器相连接。<br><strong>方法内联的条件</strong><br>编译器的大部分优化都是在方法内联的基础上。所以一般来说，内联的方法越多，生成代码的执行效率越高。但是对于即时编译器来说，内联的方法越多，编译时间也就越长，程序达到峰值性能的时刻也就比较晚。<br>可以通过虚拟机参数-XX:MaxInlineLevel 调整内联的层数，以及 1 层的直接递归调用（可以通过虚拟机参数-XX:MaxRecursiveInlineLevel 调整）。一些常见的内联相关的参数如下表所示：</p>\n<p><strong>虚函数内联</strong><br>内联是 JIT 提升性能的主要手段，但是虚函数使得内联是很难的，因为在内联阶段并不知道他们会调用哪个方法。例如，我们有一个数据处理的接口，这个接口中的一个方法有三种实现 add、sub 和 multi，JVM 是通过保存虚函数表 Virtual Method Table（以下称为 VMT）存储 class 对象中所有的虚函数，class 的实例对象保存着一个 VMT 的指针，程序运行时首先加载实例对象，然后通过实例对象找到 VMT，通过 VMT 找到对应方法的地址，所以虚函数的调用比直接指向方法地址的 classic call 性能上会差一些。很不幸的是，Java 中所有非私有的成员函数的调用都是虚调用。<br>C2 编译器已经足够智能，能够检测这种情况并会对虚调用进行优化。比如下面这段代码例子：<br>virtual call<br><strong>public</strong> <strong>class</strong> <strong>SimpleInliningTest</strong> { <strong>public</strong> <strong>static</strong> <strong>void</strong> <strong>main</strong>(String[] args) <strong>throws</strong> InterruptedException { VirtualInvokeTest obj = <strong>new</strong> VirtualInvokeTest(); VirtualInvoke1 obj1 = <strong>new</strong> VirtualInvoke1(); <strong>for</strong> (<strong>int</strong> i = 0; i &lt; 100000; i++) { invokeMethod(obj); invokeMethod(obj1); } Thread.sleep(1000); } <strong>public</strong> <strong>static</strong> <strong>void</strong> <strong>invokeMethod</strong>(VirtualInvokeTest obj) { obj.methodCall(); } <strong>private</strong> <strong>static</strong> <strong>class</strong> <strong>VirtualInvokeTest</strong> { <strong>public</strong> <strong>void</strong> <strong>methodCall</strong>() { System.out.println(“virtual call”); } } <strong>private</strong> <strong>static</strong> <strong>class</strong> <strong>VirtualInvoke1</strong> <strong>extends</strong> <strong>VirtualInvokeTest</strong> { @Override <strong>public</strong> <strong>void</strong> <strong>methodCall</strong>() { <strong>super</strong>.methodCall(); } } }<br>经过 JIT 编译器优化后，进行反汇编得到下面这段汇编代码：<br>0x0000000113369d37: callq 0x00000001132950a0 ; OopMap{off=476} ;<em>invokevirtual methodCall <em>//代表虚调用</em> ; - SimpleInliningTest::invokeMethod@1 (line 18) ; {optimized virtual</em>call} *//虚调用已经被优化_<br>可以看到 JIT 对 methodCall 方法进行了虚调用优化 optimized virtual_call。经过优化后的方法可以被内联。但是 C2 编译器的能力有限，对于多个实现方法的虚调用就“无能为力”了。<br>比如下面这段代码，我们增加一个实现：<br>多实现的虚调用<br><strong>public</strong> <strong>class</strong> <strong>SimpleInliningTest</strong> { <strong>public</strong> <strong>static</strong> <strong>void</strong> <strong>main</strong>(String[] args) <strong>throws</strong> InterruptedException { VirtualInvokeTest obj = <strong>new</strong> VirtualInvokeTest(); VirtualInvoke1 obj1 = <strong>new</strong> VirtualInvoke1(); VirtualInvoke2 obj2 = <strong>new</strong> VirtualInvoke2(); <strong>for</strong> (<strong>int</strong> i = 0; i &lt; 100000; i++) { invokeMethod(obj); invokeMethod(obj1); invokeMethod(obj2); } Thread.sleep(1000); } <strong>public</strong> <strong>static</strong> <strong>void</strong> <strong>invokeMethod</strong>(VirtualInvokeTest obj) { obj.methodCall(); } <strong>private</strong> <strong>static</strong> <strong>class</strong> <strong>VirtualInvokeTest</strong> { <strong>public</strong> <strong>void</strong> <strong>methodCall</strong>() { System.out.println(“virtual call”); } } <strong>private</strong> <strong>static</strong> <strong>class</strong> <strong>VirtualInvoke1</strong> <strong>extends</strong> <strong>VirtualInvokeTest</strong> { @Override <strong>public</strong> <strong>void</strong> <strong>methodCall</strong>() { <strong>super</strong>.methodCall(); } } <strong>private</strong> <strong>static</strong> <strong>class</strong> <strong>VirtualInvoke2</strong> <strong>extends</strong> <strong>VirtualInvokeTest</strong> { @Override <strong>public</strong> <strong>void</strong> <strong>methodCall</strong>() { <strong>super</strong>.methodCall(); } } }<br>经过反编译得到下面的汇编代码：<br>代码块<br>0x000000011f5f0a37: callq 0x000000011f4fd2e0 ; OopMap{off=28} ;<em>invokevirtual methodCall <em>//代表虚调用</em> ; - SimpleInliningTest::invokeMethod@1 (line 20) ; {virtual</em>call} *//虚调用未被优化_<br>可以看到多个实现的虚调用未被优化，依然是 virtual_call。<br>Graal 编译器针对这种情况，会去收集这部分执行的信息，比如在一段时间，发现前面的接口方法的调用 add 和 sub 是各占 50%的几率，那么 JVM 就会在每次运行时，遇到 add 就把 add 内联进来，遇到 sub 的情况再把 sub 函数内联进来，这样这两个路径的执行效率就会提升。在后续如果遇到其他不常见的情况，JVM 就会进行去优化的操作，在那个位置做标记，再遇到这种情况时切换回解释执行。</p>\n<h3 id=\"3-逃逸分析\"><a href=\"#3-逃逸分析\" class=\"headerlink\" title=\"3. 逃逸分析\"></a>3. 逃逸分析</h3><p>逃逸分析是“一种确定指针动态范围的静态分析，它可以分析在程序的哪些地方可以访问到指针”。Java 虚拟机的即时编译器会对新建的对象进行逃逸分析，判断对象是否逃逸出线程或者方法。即时编译器判断对象是否逃逸的依据有两种：</p>\n<ol>\n<li>对象是否被存入堆中（静态字段或者堆中对象的实例字段），一旦对象被存入堆中，其他线程便能获得该对象的引用，即时编译器就无法追踪所有使用该对象的代码位置。</li>\n<li>对象是否被传入未知代码中，即时编译器会将未被内联的代码当成未知代码，因为它无法确认该方法调用会不会将调用者或所传入的参数存储至堆中，这种情况，可以直接认为方法调用的调用者以及参数是逃逸的。</li>\n</ol>\n<p>逃逸分析通常是在方法内联的基础上进行的，即时编译器可以根据逃逸分析的结果进行诸如锁消除、栈上分配以及标量替换的优化。下面这段代码的就是对象未逃逸的例子：<br>pulbic <strong>class</strong> <strong>Example</strong>{ <strong>public</strong> <strong>static</strong> <strong>void</strong> <strong>main</strong>(String[] args) { example(); } <strong>public</strong> <strong>static</strong> <strong>void</strong> <strong>example</strong>() { Foo foo = <strong>new</strong> Foo(); Bar bar = <strong>new</strong> Bar(); bar.setFoo(foo); } } <strong>class</strong> <strong>Foo</strong> {} <strong>class</strong> <strong>Bar</strong> { <strong>private</strong> Foo foo; <strong>public</strong> <strong>void</strong> <strong>setFoo</strong>(Foo foo) { <strong>this</strong>.foo = foo; } } }<br>在这个例子中，创建了两个对象 foo 和 bar，其中一个作为另一个方法的参数提供。该方法 setFoo()存储对收到的 Foo 对象的引用。如果 Bar 对象在堆上，则对 Foo 的引用将逃逸。但是在这种情况下，编译器可以通过逃逸分析确定 Bar 对象本身不会对逃逸出 example()的调用。这意味着对 Foo 的引用也不能逃逸。因此，编译器可以安全地在栈上分配两个对象。<br><strong>锁消除</strong><br>在学习 Java 并发编程时会了解锁消除，而锁消除就是在逃逸分析的基础上进行的。<br>如果即时编译器能够证明锁对象不逃逸，那么对该锁对象的加锁、解锁操作没就有意义。因为线程并不能获得该锁对象。在这种情况下，即时编译器会消除对该不逃逸锁对象的加锁、解锁操作。实际上，编译器仅需证明锁对象不逃逸出线程，便可以进行锁消除。由于 Java 虚拟机即时编译的限制，上述条件被强化为证明锁对象不逃逸出当前编译的方法。不过，基于逃逸分析的锁消除实际上并不多见。<br><strong>栈上分配</strong><br>我们都知道 Java 的对象是在堆上分配的，而堆是对所有对象可见的。同时，JVM 需要对所分配的堆内存进行管理，并且在对象不再被引用时回收其所占据的内存。如果逃逸分析能够证明某些新建的对象不逃逸，那么 JVM 完全可以将其分配至栈上，并且在 new 语句所在的方法退出时，通过弹出当前方法的栈桢来自动回收所分配的内存空间。这样一来，我们便无须借助垃圾回收器来处理不再被引用的对象。不过 Hotspot 虚拟机，并没有进行实际的栈上分配，而是使用了标量替换这一技术。所谓的标量，就是仅能存储一个值的变量，比如 Java 代码中的基本类型。与之相反，聚合量则可能同时存储多个值，其中一个典型的例子便是 Java 的对象。编译器会在方法内将未逃逸的聚合量分解成多个标量，以此来减少堆上分配。下面是一个标量替换的例子：<br>标量替换<br><strong>public</strong> <strong>class</strong> <strong>Example</strong>{ @AllArgsConstructor <strong>class</strong> <strong>Cat</strong>{ <strong>int</strong> age; <strong>int</strong> weight; } <strong>public</strong> <strong>static</strong> <strong>void</strong> <strong>example</strong>(){ Cat cat = <strong>new</strong> Cat(1,10); addAgeAndWeight(cat.age,Cat.weight); } }<br>经过逃逸分析，cat 对象未逃逸出 example()的调用，因此可以对聚合量 cat 进行分解，得到两个标量 age 和 weight，进行标量替换后的伪代码：<br><strong>public</strong> <strong>class</strong> <strong>Example</strong>{ @AllArgsConstructor <strong>class</strong> <strong>Cat</strong>{ <strong>int</strong> age; <strong>int</strong> weight; } <strong>public</strong> <strong>static</strong> <strong>void</strong> <strong>example</strong>(){ <strong>int</strong> age = 1; <strong>int</strong> weight = 10; addAgeAndWeight(age,weight); } }<br><strong>部分逃逸分析</strong><br>部分逃逸分析也是 Graal 对于概率预测的应用。通常来说，如果发现一个对象逃逸出了方法或者线程，JVM 就不会去进行优化，但是 Graal 编译器依然会去分析当前程序的执行路径，它会在逃逸分析基础上收集、判断哪些路径上对象会逃逸，哪些不会。然后根据这些信息，在不会逃逸的路径上进行锁消除、栈上分配这些优化手段。</p>\n<h3 id=\"4-Loop-Transformations\"><a href=\"#4-Loop-Transformations\" class=\"headerlink\" title=\"4. Loop Transformations\"></a>4. Loop Transformations</h3><p>在文章中介绍 C2 编译器的部分有提及到，C2 编译器在构建 Ideal Graph 后会进行很多的全局优化，其中就包括对循环的转换，最重要的两种转换就是循环展开和循环分离。<br><strong>循环展开</strong><br>循环展开是一种循环转换技术，它试图以牺牲程序二进制码大小为代价来优化程序的执行速度，是一种用空间换时间的优化手段。<br>循环展开通过减少或消除控制程序循环的指令，来减少计算开销，这种开销包括增加指向数组中下一个索引或者指令的指针算数等。如果编译器可以提前计算这些索引，并且构建到机器代码指令中，那么程序运行时就可以不必进行这种计算。也就是说有些循环可以写成一些重复独立的代码。比如下面这个循环：<br>循环展开<br><strong>public</strong> <strong>void</strong> <strong>loopRolling</strong>(){ <strong>for</strong>(<strong>int</strong> i = 0;i&lt;200;i++){ <strong>delete</strong>(i); } }<br>上面的代码需要循环删除 200 次，通过循环展开可以得到下面这段代码：<br>循环展开<br><strong>public</strong> <strong>void</strong> <strong>loopRolling</strong>(){ <strong>for</strong>(<strong>int</strong> i = 0;i&lt;200;i+=5){ <strong>delete</strong>(i); <strong>delete</strong>(i+1); <strong>delete</strong>(i+2); <strong>delete</strong>(i+3); <strong>delete</strong>(i+4); } }<br>这样展开就可以减少循环的次数，每次循环内的计算也可以利用 CPU 的流水线提升效率。当然这只是一个示例，实际进行展开时，JVM 会去评估展开带来的收益，再决定是否进行展开。<br><strong>循环分离</strong><br>循环分离也是循环转换的一种手段。它把循环中一次或多次的特殊迭代分离出来，在循环外执行。举个例子，下面这段代码：<br>循环分离<br><strong>int</strong> a = 10; <strong>for</strong>(<strong>int</strong> i = 0;i&lt;10;i++){ b[i] = <strong>x</strong>[i] + <strong>x</strong>[a]; a = i; }<br>可以看出这段代码除了第一次循环 a = 10 以外，其他的情况 a 都等于 i-1。所以可以把特殊情况分离出去，变成下面这段代码：<br>循环分离<br>b[0] = x[0] + 10; for(int i = 1;i&lt;10;i++){ b[i] = x[i] + x[i-1]; }<br>这种等效的转换消除了在循环中对 a 变量的需求，从而减少了开销。</p>\n<h3 id=\"5-窥孔优化与寄存器分配\"><a href=\"#5-窥孔优化与寄存器分配\" class=\"headerlink\" title=\"5. 窥孔优化与寄存器分配\"></a>5. 窥孔优化与寄存器分配</h3><p>前文提到的窥孔优化是优化的最后一步，这之后就会程序就会转换成机器码，窥孔优化就是将编译器所生成的中间代码（或目标代码）中相邻指令，将其中的某些组合替换为效率更高的指令组，常见的比如强度削减、常数合并等，看下面这个例子就是一个强度削减的例子：<br>强度削减<br>y1=x1*3 经过强度削减后得到 y1=(x1&lt;&lt;1)+x1<br>编译器使用移位和加法削减乘法的强度，使用更高效率的指令组。<br>寄存器分配也是一种编译的优化手段，在 C2 编译器中普遍的使用。它是通过把频繁使用的变量保存在寄存器中，CPU 访问寄存器的速度比内存快得多，可以提升程序的运行速度。<br>寄存器分配和窥孔优化是程序优化的最后一步。经过寄存器分配和窥孔优化之后，程序就会被转换成机器码保存在 codeCache 中。</p>\n<h2 id=\"四、实践\"><a href=\"#四、实践\" class=\"headerlink\" title=\"四、实践\"></a>四、实践</h2><p>即时编译器情况复杂，同时网络上也很少有实战经验，以下是我们团队的一些调整经验。</p>\n<h3 id=\"1-编译相关的重-要参数\"><a href=\"#1-编译相关的重-要参数\" class=\"headerlink\" title=\"1. 编译相关的重* 要参数\"></a>1. 编译相关的重* 要参数</h3><ul>\n<li>-XX:+TieredCompilation：开启分层编译，JDK8 之后默认开启</li>\n<li>-XX:+CICompilerCount=N：编译线程数，设置数量后，JVM 会自动分配线程数，C1:C2 = 1:2</li>\n<li>-XX:TierXBackEdgeThreshold：OSR 编译的阈值</li>\n<li>-XX:TierXMinInvocationThreshold：开启分层编译后各层调用的阈值</li>\n<li>-XX:TierXCompileThreshold：开启分层编译后的编译阈值</li>\n<li>-XX:ReservedCodeCacheSize：codeCache 最大大小</li>\n<li>-XX:InitialCodeCacheSize：codeCache 初始大小</li>\n</ul>\n<p>-XX:TierXMinInvocationThreshold 是开启分层编译的情况下，触发编译的阈值参数，当方法调用次数大于由参数-XX:TierXInvocationThreshold 指定的阈值乘以系数，或者当方法调用次数大于由参数-XX:TierXMINInvocationThreshold 指定的阈值乘以系数，并且方法调用次数和循环回边次数之和大于由参数-XX:TierXCompileThreshold 指定的阈值乘以系数时，便会触发 X 层即时编译。分层编译开启下会乘以一个系数，系数根据当前编译的方法和编译线程数确定，降低阈值可以提升编译方法数，一些常用但是不能编译的方法可以编译优化提升性能。<br>由于编译情况复杂，JVM 也会动态调整相关的阈值来保证 JVM 的性能，所以不建议手动调整编译相关的参数。除非一些特定的 Case，比如 codeCache 满了停止了编译，可以适当增加 codeCache 大小，或者一些非常常用的方法，未被内联到，拖累了性能，可以调整内敛层数或者内联方法的大小来解决。</p>\n<h3 id=\"2-通过-JITwatch-分析编译日志\"><a href=\"#2-通过-JITwatch-分析编译日志\" class=\"headerlink\" title=\"2. 通过 JITwatch 分析编译日志\"></a>2. 通过 JITwatch 分析编译日志</h3><p>通过增加-XX:+UnlockDiagnosticVMOptions -XX:+PrintCompilation -XX:+PrintInlining -XX:+PrintCodeCache -XX:+PrintCodeCacheOnCompilation -XX:+TraceClassLoading -XX:+LogCompilation -XX:LogFile=LogPath 参数可以输出编译、内联、codeCache 信息到文件。但是打印的编译日志多且复杂很难直接从其中得到信息，可以使用 JITwatch 的工具来分析编译日志。JITwatch 首页的 Open Log 选中日志文件，点击 Start 就可以开始分析日志。</p>\n<p>如上图所示，区域 1 中是整个项目 Java Class 包括引入的第三方依赖；区域 2 是功能区 Timeline 以图形的形式展示 JIT 编译的时间轴，Histo 是直方图展示一些信息，TopList 里面是编译中产生的一些对象和数据的排序，Cache 是空闲 codeCache 空间，NMethod 是 Native 方法，Threads 是 JIT 编译的线程；区域 3 是 JITwatch 对日志分析结果的展示，其中 Suggestions 中会给出一些代码优化的建议，举个例子，如下图中：</p>\n<p>我们可以看到在调用 ZipInputStream 的 read 方法时，因为该方法没有被标记为热点方法，同时又“太大了”，导致无法被内联到。使用-XX:CompileCommand 中 inline 指令可以强制方法进行内联，不过还是建议谨慎使用，除非确定某个方法内联会带来不少的性能提升，否则不建议使用，并且过多使用对编译线程和 codeCache 都会带来不小的压力。<br>区域 3 中的-Allocs 和-Locks 逃逸分析后 JVM 对代码做的优化，包括栈上分配、锁消除等。</p>\n<h3 id=\"3-使用-Graal-编译器\"><a href=\"#3-使用-Graal-编译器\" class=\"headerlink\" title=\"3. 使用 Graal 编译器\"></a>3. 使用 Graal 编译器</h3><p>由于 JVM 会去根据当前的编译方法数和编译线程数对编译阈值进行动态的调整，所以实际服务中对这一部分的调整空间是不大的，JVM 做的已经足够多了。<br>为了提升性能，在服务中尝试了最新的 Graal 编译器。只需要使用-XX:+UnlockExperimentalVMOptions -XX:+UseJVMCICompiler 就可以启动 Graal 编译器来代替 C2 编译器，并且响应 C2 的编译请求，不过要注意的是，Graal 编译器与 ZGC 不兼容，只能与 G1 搭配使用。<br>前文有提到过，Graal 是一个用 Java 写的即时编译器，它从 Java 9 开始便被集成自 JDK 中，作为实验性质的即时编译器。Graal 编译器就是脱身于 GraalVM，GraalVM 是一个高性能的、支持多种编程语言的执行环境。它既可以在传统的 OpenJDK 上运行，也可以通过 AOT（Ahead-Of-Time）编译成可执行文件单独运行，甚至可以集成至数据库中运行。<br>前文提到过数次，Graal 的优化都基于某种假设（Assumption）。当假设出错的情况下，Java 虚拟机会借助去优化（Deoptimization）这项机制，从执行即时编译器生成的机器码切换回解释执行，在必要情况下，它甚至会废弃这份机器码，并在重新收集程序 profile 之后，再进行编译。<br>这些中激进的手段使得 Graal 的峰值性能要好于 C2，而且在 Scale、Ruby 这种语言 Graal 表现更加出色，Twitter 目前已经在服务中大量的使用 Graal 来提升性能，企业版的 GraalVM 使得 Twitter 服务性能提升了 22%。<br><strong>使用 Graal 编译器后性能表现</strong><br>在我们的线上服务中，启用 Graal 编译后，TP9999 从 60ms -&gt; 50ms ，下降 10ms，下降幅度达 16.7%。<br>运行过程中的峰值性能会更高。可以看出对于该服务，Graal 编译器带来了一定的性能提升。<br><strong>Graal 编译器的问题</strong><br>Graal 编译器的优化方式更加激进，因此在启动时会进行更多的编译，Graal 编译器本身也需要被即时编译，所以服务刚启动时性能会比较差。<br>考虑的解决办法：JDK 9 开始提供工具 jaotc，同时 GraalVM 的 Native Image 都是可以通过静态编译，极大地提升服务的启动速度的方式，但是 GraalVM 会使用自己的垃圾回收，这是一种很原始的基于复制算法的垃圾回收，相比 G1、ZGC 这些优秀的新型垃圾回收器，它的性能并不好。同时 GraalVM 对 Java 的一些特性支持也不够，比如基于配置的支持，比如反射就需要把所有需要反射的类配置一个 JSON 文件，在大量使用反射的服务，这样的配置会是很大的工作量。我们也在做这方面的调研。</p>\n<h2 id=\"五、总结\"><a href=\"#五、总结\" class=\"headerlink\" title=\"五、总结\"></a>五、总结</h2><p>本文主要介绍了 JIT 即时编译的原理以及在美团一些实践的经验，还有最前沿的即时编译器的使用效果。作为一项解释型语言中提升性能的技术，JIT 已经比较成熟了，在很多语言中都有使用。对于 Java 服务，JVM 本身已经做了足够多，但是我们还应该不断深入了解 JIT 的优化原理和最新的编译技术，从而弥补 JIT 的劣势，提升 Java 服务的性能，不断追求卓越。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckw4j4bgz00053m3kdb6z2ccm","category_id":"ckw4j4bh200083m3ka7j3ec74","_id":"ckw4j4bhd000j3m3kb0zy1r6c"},{"post_id":"ckw4j4bhf000l3m3k0zn6egzg","category_id":"ckw4jg1xa0000qu3k6jgf4aq4","_id":"ckw4jg1xd0003qu3kfwed5bqd"}],"PostTag":[{"post_id":"ckw4j4bgz00053m3kdb6z2ccm","tag_id":"ckw4j4bh400093m3k8ht0b5m6","_id":"ckw4j4bhc000g3m3k7erufmec"},{"post_id":"ckw4j4bhf000l3m3k0zn6egzg","tag_id":"ckw4jg1xb0001qu3kbfzbgmlc","_id":"ckw4jg1xc0002qu3kck7h1mmq"}],"Tag":[{"name":"java","_id":"ckw4j4bh400093m3k8ht0b5m6"},{"name":"Github","_id":"ckw4jg1xb0001qu3kbfzbgmlc"}]}}